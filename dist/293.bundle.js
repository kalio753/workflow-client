"use strict";(self.webpackChunktask_1=self.webpackChunktask_1||[]).push([[293],{73293:(t,e,n)=>{n.r(e),n.d(e,{AnimatePresence:()=>bs,AnimateSharedLayout:()=>As,AnimationType:()=>It,DeprecatedLayoutGroupContext:()=>ws,DragControls:()=>Wa,FlatTree:()=>Ui,LayoutGroup:()=>Cs,LayoutGroupContext:()=>P,LazyMotion:()=>Rs,MotionConfig:()=>Ms,MotionConfigContext:()=>r,MotionContext:()=>i,MotionValue:()=>bo,PresenceContext:()=>a,Reorder:()=>Hs,SwitchLayoutGroupContext:()=>C,VisualElement:()=>ni,addPointerEvent:()=>_t,addScaleCorrector:()=>B,animate:()=>gi,animateVisualElement:()=>Oo,animationControls:()=>Fa,animations:()=>Yo,buildTransform:()=>z,calcLength:()=>er,checkTargetForNewValues:()=>Do,clamp:()=>jn,createBox:()=>pr,createDomMotionComponent:()=>ds,createMotionComponent:()=>A,delay:()=>On,distance:()=>Xo,distance2D:()=>Go,domAnimation:()=>$s,domMax:()=>Ys,filterProps:()=>mt,isBrowser:()=>l,isDragActive:()=>oe,isMotionComponent:()=>Ya,isMotionValue:()=>I,isValidMotionProp:()=>dt,m:()=>ps,makeUseVisualState:()=>kt,mix:()=>In,motion:()=>hs,motionValue:()=>wo,pipe:()=>le,resolveMotionValue:()=>Dt,transform:()=>js,unwrapMotionComponent:()=>Xa,useAnimation:()=>ja,useAnimationControls:()=>Oa,useAnimationFrame:()=>Ma,useCycle:()=>Ua,useDeprecatedAnimatedState:()=>tl,useDeprecatedInvertedScale:()=>ol,useDomEvent:()=>Nt,useDragControls:()=>$a,useElementScroll:()=>Ta,useForceUpdate:()=>ms,useInView:()=>za,useInstantLayoutTransition:()=>Ga,useInstantTransition:()=>Za,useIsPresent:()=>be,useIsomorphicLayoutEffect:()=>u,useMotionTemplate:()=>Xs,useMotionValue:()=>Os,usePresence:()=>Ee,useReducedMotion:()=>ka,useReducedMotionConfig:()=>Ba,useResetProjection:()=>Ka,useScroll:()=>Ca,useSpring:()=>Gs,useTime:()=>Ra,useTransform:()=>Us,useUnmountEffect:()=>se,useVelocity:()=>qs,useViewportScroll:()=>Aa,useVisualElementContext:()=>s,useWillChange:()=>Da,wrap:()=>Ia,wrapHandler:()=>Gt});var o=n(28416);const r=(0,o.createContext)({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),i=(0,o.createContext)({});function s(){return(0,o.useContext)(i).visualElement}const a=(0,o.createContext)(null),l="undefined"!=typeof document,u=l?o.useLayoutEffect:o.useEffect,c=(0,o.createContext)({strict:!1});function h(t){return"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,"current")}function d(t){return"string"==typeof t||Array.isArray(t)}function p(t){return"object"==typeof t&&"function"==typeof t.start}const f=["initial","animate","exit","whileHover","whileDrag","whileTap","whileFocus","whileInView"];function m(t){return p(t.animate)||f.some((e=>d(t[e])))}function g(t){return Boolean(m(t)||t.variants)}function v(t){return Array.isArray(t)?t.join(" "):t}const y=t=>({isEnabled:e=>t.some((t=>!!e[t]))}),x={measureLayout:y(["layout","layoutId","drag"]),animation:y(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:y(["exit"]),drag:y(["drag","dragControls"]),focus:y(["whileFocus"]),hover:y(["whileHover","onHoverStart","onHoverEnd"]),tap:y(["whileTap","onTap","onTapStart","onTapCancel"]),pan:y(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:y(["whileInView","onViewportEnter","onViewportLeave"])};function E(t){for(const e in t)"projectionNodeConstructor"===e?x.projectionNodeConstructor=t[e]:x[e].Component=t[e]}function b(t){const e=(0,o.useRef)(null);return null===e.current&&(e.current=t()),e.current}const w={hasAnimatedSinceResize:!0,hasEverUpdated:!1};let S=1;const P=(0,o.createContext)({});class V extends o.Component{getSnapshotBeforeUpdate(){const{visualElement:t,props:e}=this.props;return t&&t.setProps(e),null}componentDidUpdate(){}render(){return this.props.children}}const C=(0,o.createContext)({}),T=Symbol.for("motionComponentSymbol");function A({preloadedFeatures:t,createVisualElement:e,projectionNodeConstructor:n,useRender:p,useVisualState:f,Component:g}){t&&E(t);const y=(0,o.forwardRef)((function(y,E){const P={...(0,o.useContext)(r),...y,layoutId:M(y)},{isStatic:T}=P;let A=null;const R=function(t){const{initial:e,animate:n}=function(t,e){if(m(t)){const{initial:e,animate:n}=t;return{initial:!1===e||d(e)?e:void 0,animate:d(n)?n:void 0}}return!1!==t.inherit?e:{}}(t,(0,o.useContext)(i));return(0,o.useMemo)((()=>({initial:e,animate:n})),[v(e),v(n)])}(y),L=T?void 0:b((()=>{if(w.hasEverUpdated)return S++})),D=f(y,T);if(!T&&l){R.visualElement=function(t,e,n,i){const l=s(),h=(0,o.useContext)(c),d=(0,o.useContext)(a),p=(0,o.useContext)(r).reducedMotion,f=(0,o.useRef)();i=i||h.renderer,!f.current&&i&&(f.current=i(t,{visualState:e,parent:l,props:n,presenceId:d?d.id:void 0,blockInitialAnimation:!!d&&!1===d.initial,reducedMotionConfig:p}));const m=f.current;return u((()=>{m&&m.render()})),(0,o.useEffect)((()=>{m&&m.animationState&&m.animationState.animateChanges()})),u((()=>()=>m&&m.notify("Unmount")),[]),m}(g,D,P,e);const i=(0,o.useContext)(c).strict,l=(0,o.useContext)(C);R.visualElement&&(A=R.visualElement.loadFeatures(P,i,t,L,n||x.projectionNodeConstructor,l))}return o.createElement(V,{visualElement:R.visualElement,props:P},A,o.createElement(i.Provider,{value:R},p(g,y,L,function(t,e,n){return(0,o.useCallback)((o=>{o&&t.mount&&t.mount(o),e&&(o?e.mount(o):e.unmount()),n&&("function"==typeof n?n(o):h(n)&&(n.current=o))}),[e])}(D,R.visualElement,E),D,T,R.visualElement)))}));return y[T]=g,y}function M({layoutId:t}){const e=(0,o.useContext)(P).id;return e&&void 0!==t?e+"-"+t:t}function R(t){function e(e,n={}){return A(t(e,n))}if("undefined"==typeof Proxy)return e;const n=new Map;return new Proxy(e,{get:(t,o)=>(n.has(o)||n.set(o,e(o)),n.get(o))})}const L=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function D(t){return"string"==typeof t&&!t.includes("-")&&!!(L.indexOf(t)>-1||/[A-Z]/.test(t))}const k={};function B(t){Object.assign(k,t)}const F=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],O=new Set(F);function j(t,{layout:e,layoutId:n}){return O.has(t)||t.startsWith("origin")||(e||void 0!==n)&&(!!k[t]||"opacity"===t)}const I=t=>!!(null==t?void 0:t.getVelocity),U={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},N=(t,e)=>F.indexOf(t)-F.indexOf(e);function z({transform:t,transformKeys:e},{enableHardwareAcceleration:n=!0,allowTransformNone:o=!0},r,i){let s="";e.sort(N);for(const n of e)s+=`${U[n]||n}(${t[n]}) `;return n&&!t.z&&(s+="translateZ(0)"),s=s.trim(),i?s=i(t,r?"":s):o&&r&&(s="none"),s}function W(t){return t.startsWith("--")}const H=(t,e)=>e&&"number"==typeof t?e.transform(t):t,$=(t,e)=>n=>Math.max(Math.min(n,e),t),Y=t=>t%1?Number(t.toFixed(5)):t,X=/(-)?([\d]*\.?[\d])+/g,G=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,q=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Z(t){return"string"==typeof t}const K=t=>({test:e=>Z(e)&&e.endsWith(t)&&1===e.split(" ").length,parse:parseFloat,transform:e=>`${e}${t}`}),_=K("deg"),J=K("%"),Q=K("px"),tt=K("vh"),et=K("vw"),nt=Object.assign(Object.assign({},J),{parse:t=>J.parse(t)/100,transform:t=>J.transform(100*t)}),ot={test:t=>"number"==typeof t,parse:parseFloat,transform:t=>t},rt=Object.assign(Object.assign({},ot),{transform:$(0,1)}),it=Object.assign(Object.assign({},ot),{default:1}),st={...ot,transform:Math.round},at={borderWidth:Q,borderTopWidth:Q,borderRightWidth:Q,borderBottomWidth:Q,borderLeftWidth:Q,borderRadius:Q,radius:Q,borderTopLeftRadius:Q,borderTopRightRadius:Q,borderBottomRightRadius:Q,borderBottomLeftRadius:Q,width:Q,maxWidth:Q,height:Q,maxHeight:Q,size:Q,top:Q,right:Q,bottom:Q,left:Q,padding:Q,paddingTop:Q,paddingRight:Q,paddingBottom:Q,paddingLeft:Q,margin:Q,marginTop:Q,marginRight:Q,marginBottom:Q,marginLeft:Q,rotate:_,rotateX:_,rotateY:_,rotateZ:_,scale:it,scaleX:it,scaleY:it,scaleZ:it,skew:_,skewX:_,skewY:_,distance:Q,translateX:Q,translateY:Q,translateZ:Q,x:Q,y:Q,z:Q,perspective:Q,transformPerspective:Q,opacity:rt,originX:nt,originY:nt,originZ:Q,zIndex:st,fillOpacity:rt,strokeOpacity:rt,numOctaves:st};function lt(t,e,n,o){const{style:r,vars:i,transform:s,transformKeys:a,transformOrigin:l}=t;a.length=0;let u=!1,c=!1,h=!0;for(const t in e){const n=e[t];if(W(t)){i[t]=n;continue}const o=at[t],d=H(n,o);if(O.has(t)){if(u=!0,s[t]=d,a.push(t),!h)continue;n!==(o.default||0)&&(h=!1)}else t.startsWith("origin")?(c=!0,l[t]=d):r[t]=d}if(e.transform||(u||o?r.transform=z(t,n,h,o):r.transform&&(r.transform="none")),c){const{originX:t="50%",originY:e="50%",originZ:n=0}=l;r.transformOrigin=`${t} ${e} ${n}`}}function ut(t,e,n){for(const o in e)I(e[o])||j(o,n)||(t[o]=e[o])}function ct(t,e,n){const r={},i=function(t,e,n){const r={};return ut(r,t.style||{},t),Object.assign(r,function({transformTemplate:t},e,n){return(0,o.useMemo)((()=>{const o={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};return lt(o,e,{enableHardwareAcceleration:!n},t),Object.assign({},o.vars,o.style)}),[e])}(t,e,n)),t.transformValues?t.transformValues(r):r}(t,e,n);return t.drag&&!1!==t.dragListener&&(r.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),r.style=i,r}const ht=new Set(["initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","onHoverStart","onHoverEnd","layoutScroll","whileInView","onViewportEnter","onViewportLeave","viewport","whileTap","onTap","onTapStart","onTapCancel","animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView","onPan","onPanStart","onPanSessionStart","onPanEnd"]);function dt(t){return ht.has(t)}let pt=t=>!dt(t);function ft(t){t&&(pt=e=>e.startsWith("on")?!dt(e):t(e))}try{ft(require("@emotion/is-prop-valid").default)}catch(t){}function mt(t,e,n){const o={};for(const r in t)(pt(r)||!0===n&&dt(r)||!e&&!dt(r)||t.draggable&&r.startsWith("onDrag"))&&(o[r]=t[r]);return o}function gt(t,e,n){return"string"==typeof t?t:Q.transform(e+n*t)}const vt={offset:"stroke-dashoffset",array:"stroke-dasharray"},yt={offset:"strokeDashoffset",array:"strokeDasharray"};function xt(t,{attrX:e,attrY:n,originX:o,originY:r,pathLength:i,pathSpacing:s=1,pathOffset:a=0,...l},u,c,h){if(lt(t,l,u,h),c)return void(t.style.viewBox&&(t.attrs.viewBox=t.style.viewBox));t.attrs=t.style,t.style={};const{attrs:d,style:p,dimensions:f}=t;d.transform&&(f&&(p.transform=d.transform),delete d.transform),f&&(void 0!==o||void 0!==r||p.transform)&&(p.transformOrigin=function(t,e,n){return`${gt(e,t.x,t.width)} ${gt(n,t.y,t.height)}`}(f,void 0!==o?o:.5,void 0!==r?r:.5)),void 0!==e&&(d.x=e),void 0!==n&&(d.y=n),void 0!==i&&function(t,e,n=1,o=0,r=!0){t.pathLength=1;const i=r?vt:yt;t[i.offset]=Q.transform(-o);const s=Q.transform(e),a=Q.transform(n);t[i.array]=`${s} ${a}`}(d,i,s,a,!1)}const Et=t=>"string"==typeof t&&"svg"===t.toLowerCase();function bt(t,e,n,r){const i=(0,o.useMemo)((()=>{const n={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}};return xt(n,e,{enableHardwareAcceleration:!1},Et(r),t.transformTemplate),{...n.attrs,style:{...n.style}}}),[e]);if(t.style){const e={};ut(e,t.style,t),i.style={...e,...i.style}}return i}function wt(t=!1){return(e,n,r,i,{latestValues:s},a)=>{const l=(D(e)?bt:ct)(n,s,a,e),u={...mt(n,"string"==typeof e,t),...l,ref:i};return r&&(u["data-projection-id"]=r),(0,o.createElement)(e,u)}}const St=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function Pt(t,{style:e,vars:n},o,r){Object.assign(t.style,e,r&&r.getProjectionStyles(o));for(const e in n)t.style.setProperty(e,n[e])}const Vt=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function Ct(t,e,n,o){Pt(t,e,void 0,o);for(const n in e.attrs)t.setAttribute(Vt.has(n)?n:St(n),e.attrs[n])}function Tt(t){const{style:e}=t,n={};for(const o in e)(I(e[o])||j(o,t))&&(n[o]=e[o]);return n}function At(t){const e=Tt(t);for(const n in t)I(t[n])&&(e["x"===n||"y"===n?"attr"+n.toUpperCase():n]=t[n]);return e}function Mt(t,e,n,o={},r={}){return"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),"string"==typeof e&&(e=t.variants&&t.variants[e]),"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),e}const Rt=t=>Array.isArray(t),Lt=t=>Rt(t)?t[t.length-1]||0:t;function Dt(t){const e=I(t)?t.get():t;return n=e,Boolean(n&&"object"==typeof n&&n.mix&&n.toValue)?e.toValue():e;var n}const kt=t=>(e,n)=>{const r=(0,o.useContext)(i),s=(0,o.useContext)(a),l=()=>function({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},o,r,i){const s={latestValues:Bt(o,r,i,t),renderState:e()};return n&&(s.mount=t=>n(o,t,s)),s}(t,e,r,s);return n?l():b(l)};function Bt(t,e,n,o){const r={},i=o(t);for(const t in i)r[t]=Dt(i[t]);let{initial:s,animate:a}=t;const l=m(t),u=g(t);e&&u&&!l&&!1!==t.inherit&&(void 0===s&&(s=e.initial),void 0===a&&(a=e.animate));let c=!!n&&!1===n.initial;c=c||!1===s;const h=c?a:s;return h&&"boolean"!=typeof h&&!p(h)&&(Array.isArray(h)?h:[h]).forEach((e=>{const n=Mt(t,e);if(!n)return;const{transitionEnd:o,transition:i,...s}=n;for(const t in s){let e=s[t];Array.isArray(e)&&(e=e[c?e.length-1:0]),null!==e&&(r[t]=e)}for(const t in o)r[t]=o[t]})),r}const Ft={useVisualState:kt({scrapeMotionValuesFromProps:At,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}}),onMount:(t,e,{renderState:n,latestValues:o})=>{try{n.dimensions="function"==typeof e.getBBox?e.getBBox():e.getBoundingClientRect()}catch(t){n.dimensions={x:0,y:0,width:0,height:0}}xt(n,o,{enableHardwareAcceleration:!1},Et(e.tagName),t.transformTemplate),Ct(e,n)}})},Ot={useVisualState:kt({scrapeMotionValuesFromProps:Tt,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}})})};function jt(t,{forwardMotionProps:e=!1},n,o,r){return{...D(t)?Ft:Ot,preloadedFeatures:n,useRender:wt(e),createVisualElement:o,projectionNodeConstructor:r,Component:t}}var It;function Ut(t,e,n,o={passive:!0}){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n)}function Nt(t,e,n,r){(0,o.useEffect)((()=>{const o=t.current;if(n&&o)return Ut(o,e,n,r)}),[t,e,n,r])}function zt(t){return"undefined"!=typeof PointerEvent&&t instanceof PointerEvent?!("mouse"!==t.pointerType):t instanceof MouseEvent}function Wt(t){return!!t.touches}!function(t){t.Animate="animate",t.Hover="whileHover",t.Tap="whileTap",t.Drag="whileDrag",t.Focus="whileFocus",t.InView="whileInView",t.Exit="exit"}(It||(It={}));const Ht={pageX:0,pageY:0};function $t(t,e="page"){const n=t.touches[0]||t.changedTouches[0]||Ht;return{x:n[e+"X"],y:n[e+"Y"]}}function Yt(t,e="page"){return{x:t[e+"X"],y:t[e+"Y"]}}function Xt(t,e="page"){return{point:Wt(t)?$t(t,e):Yt(t,e)}}const Gt=(t,e=!1)=>{const n=e=>t(e,Xt(e));return e?(o=n,t=>{const e=t instanceof MouseEvent;(!e||e&&0===t.button)&&o(t)}):n;var o},qt={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Zt={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Kt(t){return l&&null===window.onpointerdown?t:l&&null===window.ontouchstart?Zt[t]:l&&null===window.onmousedown?qt[t]:t}function _t(t,e,n,o){return Ut(t,Kt(e),Gt(n,"pointerdown"===e),o)}function Jt(t,e,n,o){return Nt(t,Kt(e),n&&Gt(n,"pointerdown"===e),o)}function Qt(t){let e=null;return()=>null===e&&(e=t,()=>{e=null})}const te=Qt("dragHorizontal"),ee=Qt("dragVertical");function ne(t){let e=!1;if("y"===t)e=ee();else if("x"===t)e=te();else{const t=te(),n=ee();t&&n?e=()=>{t(),n()}:(t&&t(),n&&n())}return e}function oe(){const t=ne(!0);return!t||(t(),!1)}function re(t,e,n){return(o,r)=>{zt(o)&&!oe()&&(t.animationState&&t.animationState.setActive(It.Hover,e),n&&n(o,r))}}const ie=(t,e)=>!!e&&(t===e||ie(t,e.parentElement));function se(t){return(0,o.useEffect)((()=>()=>t()),[])}const ae=(t,e)=>n=>e(t(n)),le=(...t)=>t.reduce(ae),ue=new Set;function ce(t,e,n){t||ue.has(e)||(console.warn(e),n&&console.warn(n),ue.add(e))}const he=new WeakMap,de=new WeakMap,pe=t=>{const e=he.get(t.target);e&&e(t)},fe=t=>{t.forEach(pe)};const me={some:0,all:1};function ge(t,e,n,{root:r,margin:i,amount:s="some",once:a}){(0,o.useEffect)((()=>{if(!t||!n.current)return;const o={root:null==r?void 0:r.current,rootMargin:i,threshold:"number"==typeof s?s:me[s]};return function(t,e,n){const o=function({root:t,...e}){const n=t||document;de.has(n)||de.set(n,{});const o=de.get(n),r=JSON.stringify(e);return o[r]||(o[r]=new IntersectionObserver(fe,{root:t,...e})),o[r]}(e);return he.set(t,n),o.observe(t),()=>{he.delete(t),o.unobserve(t)}}(n.current,o,(t=>{const{isIntersecting:o}=t;if(e.isInView===o)return;if(e.isInView=o,a&&!o&&e.hasEnteredView)return;o&&(e.hasEnteredView=!0),n.animationState&&n.animationState.setActive(It.InView,o);const r=n.getProps(),i=o?r.onViewportEnter:r.onViewportLeave;i&&i(t)}))}),[t,r,i,s])}function ve(t,e,n,{fallback:r=!0}){(0,o.useEffect)((()=>{t&&r&&requestAnimationFrame((()=>{e.hasEnteredView=!0;const{onViewportEnter:t}=n.getProps();t&&t(null),n.animationState&&n.animationState.setActive(It.InView,!0)}))}),[t])}const ye=t=>e=>(t(e),null),xe={inView:ye((function({visualElement:t,whileInView:e,onViewportEnter:n,onViewportLeave:r,viewport:i={}}){const s=(0,o.useRef)({hasEnteredView:!1,isInView:!1});let a=Boolean(e||n||r);i.once&&s.current.hasEnteredView&&(a=!1),("undefined"==typeof IntersectionObserver?ve:ge)(a,s.current,t,i)})),tap:ye((function({onTap:t,onTapStart:e,onTapCancel:n,whileTap:r,visualElement:i}){const s=t||e||n||r,a=(0,o.useRef)(!1),l=(0,o.useRef)(null),u={passive:!(e||t||n||f)};function c(){l.current&&l.current(),l.current=null}function h(){return c(),a.current=!1,i.animationState&&i.animationState.setActive(It.Tap,!1),!oe()}function d(e,o){h()&&(ie(i.current,e.target)?t&&t(e,o):n&&n(e,o))}function p(t,e){h()&&n&&n(t,e)}function f(t,n){c(),a.current||(a.current=!0,l.current=le(_t(window,"pointerup",d,u),_t(window,"pointercancel",p,u)),i.animationState&&i.animationState.setActive(It.Tap,!0),e&&e(t,n))}Jt(i,"pointerdown",s?f:void 0,u),se(c)})),focus:ye((function({whileFocus:t,visualElement:e}){const{animationState:n}=e;Nt(e,"focus",t?()=>{n&&n.setActive(It.Focus,!0)}:void 0),Nt(e,"blur",t?()=>{n&&n.setActive(It.Focus,!1)}:void 0)})),hover:ye((function({onHoverStart:t,onHoverEnd:e,whileHover:n,visualElement:o}){Jt(o,"pointerenter",t||n?re(o,!0,t):void 0,{passive:!t}),Jt(o,"pointerleave",e||n?re(o,!1,e):void 0,{passive:!e})}))};function Ee(){const t=(0,o.useContext)(a);if(null===t)return[!0,null];const{isPresent:e,onExitComplete:n,register:r}=t,i=(0,o.useId)();return(0,o.useEffect)((()=>r(i)),[]),!e&&n?[!1,()=>n&&n(i)]:[!0]}function be(){return null===(t=(0,o.useContext)(a))||t.isPresent;var t}function we(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let o=0;o<n;o++)if(e[o]!==t[o])return!1;return!0}const Se=t=>1e3*t,Pe=t=>t,Ve=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t;function Ce(t,e,n,o){if(t===e&&n===o)return Pe;return r=>0===r||1===r?r:Ve(function(t,e,n,o,r){let i,s,a=0;do{s=e+(n-e)/2,i=Ve(s,o,r)-t,i>0?n=s:e=s}while(Math.abs(i)>1e-7&&++a<12);return s}(r,0,1,t,n),e,o)}const Te=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,Ae=t=>e=>1-t(1-e),Me=t=>t*t,Re=Ae(Me),Le=Te(Me),De=t=>1-Math.sin(Math.acos(t)),ke=Ae(De),Be=Te(ke),Fe=(t=1.525)=>e=>e*e*((t+1)*e-t),Oe=Fe(),je=Ae(Oe),Ie=Te(Oe),Ue=(t=>{const e=Fe(void 0);return t=>(t*=2)<1?.5*e(t):.5*(2-Math.pow(2,-10*(t-1)))})(),Ne={linear:Pe,easeIn:Me,easeInOut:Le,easeOut:Re,circIn:De,circInOut:Be,circOut:ke,backIn:Oe,backInOut:Ie,backOut:je,anticipate:Ue},ze=t=>{if(Array.isArray(t)){t.length;const[e,n,o,r]=t;return Ce(e,n,o,r)}return"string"==typeof t?Ne[t]:t},We=(t,e)=>n=>Boolean(Z(n)&&q.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),He=(t,e,n)=>o=>{if(!Z(o))return o;const[r,i,s,a]=o.match(X);return{[t]:parseFloat(r),[e]:parseFloat(i),[n]:parseFloat(s),alpha:void 0!==a?parseFloat(a):1}},$e=$(0,255),Ye=Object.assign(Object.assign({},ot),{transform:t=>Math.round($e(t))}),Xe={test:We("rgb","red"),parse:He("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:o=1})=>"rgba("+Ye.transform(t)+", "+Ye.transform(e)+", "+Ye.transform(n)+", "+Y(rt.transform(o))+")"},Ge={test:We("#"),parse:function(t){let e="",n="",o="",r="";return t.length>5?(e=t.substr(1,2),n=t.substr(3,2),o=t.substr(5,2),r=t.substr(7,2)):(e=t.substr(1,1),n=t.substr(2,1),o=t.substr(3,1),r=t.substr(4,1),e+=e,n+=n,o+=o,r+=r),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(o,16),alpha:r?parseInt(r,16)/255:1}},transform:Xe.transform},qe={test:We("hsl","hue"),parse:He("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:o=1})=>"hsla("+Math.round(t)+", "+J.transform(Y(e))+", "+J.transform(Y(n))+", "+Y(rt.transform(o))+")"},Ze={test:t=>Xe.test(t)||Ge.test(t)||qe.test(t),parse:t=>Xe.test(t)?Xe.parse(t):qe.test(t)?qe.parse(t):Ge.parse(t),transform:t=>Z(t)?t:t.hasOwnProperty("red")?Xe.transform(t):qe.transform(t)},Ke="${c}",_e="${n}";function Je(t){"number"==typeof t&&(t=`${t}`);const e=[];let n=0;const o=t.match(G);o&&(n=o.length,t=t.replace(G,Ke),e.push(...o.map(Ze.parse)));const r=t.match(X);return r&&(t=t.replace(X,_e),e.push(...r.map(ot.parse))),{values:e,numColors:n,tokenised:t}}function Qe(t){return Je(t).values}function tn(t){const{values:e,numColors:n,tokenised:o}=Je(t),r=e.length;return t=>{let e=o;for(let o=0;o<r;o++)e=e.replace(o<n?Ke:_e,o<n?Ze.transform(t[o]):Y(t[o]));return e}}const en=t=>"number"==typeof t?0:t,nn={test:function(t){var e,n,o,r;return isNaN(t)&&Z(t)&&(null!==(n=null===(e=t.match(X))||void 0===e?void 0:e.length)&&void 0!==n?n:0)+(null!==(r=null===(o=t.match(G))||void 0===o?void 0:o.length)&&void 0!==r?r:0)>0},parse:Qe,createTransformer:tn,getAnimatableNone:function(t){const e=Qe(t);return tn(t)(e.map(en))}},on=(t,e)=>!("zIndex"===t||"number"!=typeof e&&!Array.isArray(e)&&("string"!=typeof e||!nn.test(e)||e.startsWith("url("))),rn=()=>({type:"spring",stiffness:500,damping:25,restSpeed:10}),sn=t=>({type:"spring",stiffness:550,damping:0===t?2*Math.sqrt(550):30,restSpeed:10}),an=()=>({type:"keyframes",ease:"linear",duration:.3}),ln=t=>({type:"keyframes",duration:.8,values:t}),un={x:rn,y:rn,z:rn,rotate:rn,rotateX:rn,rotateY:rn,rotateZ:rn,scaleX:sn,scaleY:sn,scale:sn,opacity:an,backgroundColor:an,color:an,default:sn},cn=(t,e)=>{let n;return n=Rt(e)?ln:un[t]||un.default,{to:e,...n(e)}},hn=new Set(["brightness","contrast","saturate","opacity"]);function dn(t){let[e,n]=t.slice(0,-1).split("(");if("drop-shadow"===e)return t;const[o]=n.match(X)||[];if(!o)return t;const r=n.replace(o,"");let i=hn.has(e)?1:0;return o!==n&&(i*=100),e+"("+i+r+")"}const pn=/([a-z-]*)\(.*?\)/g,fn=Object.assign(Object.assign({},nn),{getAnimatableNone:t=>{const e=t.match(pn);return e?e.map(dn).join(" "):t}}),mn={...at,color:Ze,backgroundColor:Ze,outlineColor:Ze,fill:Ze,stroke:Ze,borderColor:Ze,borderTopColor:Ze,borderRightColor:Ze,borderBottomColor:Ze,borderLeftColor:Ze,filter:fn,WebkitFilter:fn},gn=t=>mn[t];function vn(t,e){var n;let o=gn(t);return o!==fn&&(o=nn),null===(n=o.getAnimatableNone)||void 0===n?void 0:n.call(o,e)}const yn={current:!1},xn=1/60*1e3,En="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),bn="undefined"!=typeof window?t=>window.requestAnimationFrame(t):t=>setTimeout((()=>t(En())),xn);let wn=!0,Sn=!1,Pn=!1;const Vn={delta:0,timestamp:0},Cn=["read","update","preRender","render","postRender"],Tn=Cn.reduce(((t,e)=>(t[e]=function(t){let e=[],n=[],o=0,r=!1,i=!1;const s=new WeakSet,a={schedule:(t,i=!1,a=!1)=>{const l=a&&r,u=l?e:n;return i&&s.add(t),-1===u.indexOf(t)&&(u.push(t),l&&r&&(o=e.length)),t},cancel:t=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1),s.delete(t)},process:l=>{if(r)i=!0;else{if(r=!0,[e,n]=[n,e],n.length=0,o=e.length,o)for(let n=0;n<o;n++){const o=e[n];o(l),s.has(o)&&(a.schedule(o),t())}r=!1,i&&(i=!1,a.process(l))}}};return a}((()=>Sn=!0)),t)),{}),An=Cn.reduce(((t,e)=>{const n=Tn[e];return t[e]=(t,e=!1,o=!1)=>(Sn||kn(),n.schedule(t,e,o)),t}),{}),Mn=Cn.reduce(((t,e)=>(t[e]=Tn[e].cancel,t)),{}),Rn=Cn.reduce(((t,e)=>(t[e]=()=>Tn[e].process(Vn),t)),{}),Ln=t=>Tn[t].process(Vn),Dn=t=>{Sn=!1,Vn.delta=wn?xn:Math.max(Math.min(t-Vn.timestamp,40),1),Vn.timestamp=t,Pn=!0,Cn.forEach(Ln),Pn=!1,Sn&&(wn=!1,bn(Dn))},kn=()=>{Sn=!0,wn=!0,Pn||bn(Dn)},Bn=()=>Vn,Fn=An;function On(t,e){const n=performance.now(),o=({timestamp:r})=>{const i=r-n;i>=e&&(Mn.read(o),t(i-e))};return Fn.read(o,!0),()=>Mn.read(o)}const jn=(t,e,n)=>Math.min(Math.max(n,t),e),In=(t,e,n)=>-n*t+n*e+t;function Un(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}const Nn=(t,e,n)=>{const o=t*t;return Math.sqrt(Math.max(0,n*(e*e-o)+o))},zn=[Ge,Xe,qe];function Wn(t){const e=(n=t,zn.find((t=>t.test(n))));var n;Boolean(e);let o=e.parse(t);return e===qe&&(o=function({hue:t,saturation:e,lightness:n,alpha:o}){t/=360,n/=100;let r=0,i=0,s=0;if(e/=100){const o=n<.5?n*(1+e):n+e-n*e,a=2*n-o;r=Un(a,o,t+1/3),i=Un(a,o,t),s=Un(a,o,t-1/3)}else r=i=s=n;return{red:Math.round(255*r),green:Math.round(255*i),blue:Math.round(255*s),alpha:o}}(o)),o}const Hn=(t,e)=>{const n=Wn(t),o=Wn(e),r={...n};return t=>(r.red=Nn(n.red,o.red,t),r.green=Nn(n.green,o.green,t),r.blue=Nn(n.blue,o.blue,t),r.alpha=In(n.alpha,o.alpha,t),Xe.transform(r))};function $n(t,e){return"number"==typeof t?n=>In(t,e,n):Ze.test(t)?Hn(t,e):qn(t,e)}const Yn=(t,e)=>{const n=[...t],o=n.length,r=t.map(((t,n)=>$n(t,e[n])));return t=>{for(let e=0;e<o;e++)n[e]=r[e](t);return n}},Xn=(t,e)=>{const n={...t,...e},o={};for(const r in n)void 0!==t[r]&&void 0!==e[r]&&(o[r]=$n(t[r],e[r]));return t=>{for(const e in o)n[e]=o[e](t);return n}};function Gn(t){const e=nn.parse(t),n=e.length;let o=0,r=0;for(let t=0;t<n;t++)o||"number"==typeof e[t]?o++:r++;return{parsed:e,numNumbers:o,numColors:r}}const qn=(t,e)=>{const n=nn.createTransformer(e),o=Gn(t),r=Gn(e);return o.numColors===r.numColors&&o.numNumbers>=r.numNumbers?le(Yn(o.parsed,r.parsed),n):n=>`${n>0?e:t}`},Zn=(t,e,n)=>{const o=e-t;return 0===o?1:(n-t)/o},Kn=(t,e)=>n=>In(t,e,n);function _n(t,e,{clamp:n=!0,ease:o,mixer:r}={}){const i=t.length;e.length,!o||!Array.isArray(o)||o.length,t[0]>t[i-1]&&(t=[...t].reverse(),e=[...e].reverse());const s=function(t,e,n){const o=[],r=n||("number"==typeof(i=t[0])?Kn:"string"==typeof i?Ze.test(i)?Hn:qn:Array.isArray(i)?Yn:"object"==typeof i?Xn:Kn);var i;const s=t.length-1;for(let n=0;n<s;n++){let i=r(t[n],t[n+1]);if(e){const t=Array.isArray(e)?e[n]:e;i=le(t,i)}o.push(i)}return o}(e,o,r),a=s.length,l=e=>{let n=0;if(a>1)for(;n<t.length-2&&!(e<t[n+1]);n++);const o=Zn(t[n],t[n+1],e);return s[n](o)};return n?e=>l(jn(t[0],t[i-1],e)):l}function Jn(t,e){return t.map((()=>e||Le)).splice(0,t.length-1)}function Qn(t,e){return t*Math.sqrt(1-e*e)}const to=["duration","bounce"],eo=["stiffness","damping","mass"];function no(t,e){return e.some((e=>void 0!==t[e]))}function oo({from:t=0,to:e=1,restSpeed:n=2,restDelta:o=.01,...r}){const i={done:!1,value:t};let{stiffness:s,damping:a,mass:l,velocity:u,duration:c,isResolvedFromDuration:h}=function(t){let e={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...t};if(!no(t,eo)&&no(t,to)){const n=function({duration:t=800,bounce:e=.25,velocity:n=0,mass:o=1}){let r,i,s=1-e;s=jn(.05,1,s),t=jn(.01,10,t/1e3),s<1?(r=e=>{const o=e*s,r=o*t;return.001-(o-n)/Qn(e,s)*Math.exp(-r)},i=e=>{const o=e*s*t,i=o*n+n,a=Math.pow(s,2)*Math.pow(e,2)*t,l=Math.exp(-o),u=Qn(Math.pow(e,2),s);return(.001-r(e)>0?-1:1)*((i-a)*l)/u}):(r=e=>Math.exp(-e*t)*((e-n)*t+1)-.001,i=e=>Math.exp(-e*t)*(t*t*(n-e)));const a=function(t,e,n){let o=n;for(let n=1;n<12;n++)o-=t(o)/e(o);return o}(r,i,5/t);if(t*=1e3,isNaN(a))return{stiffness:100,damping:10,duration:t};{const e=Math.pow(a,2)*o;return{stiffness:e,damping:2*s*Math.sqrt(o*e),duration:t}}}(t);e={...e,...n,velocity:0,mass:1},e.isResolvedFromDuration=!0}return e}(r),d=ro,p=ro;function f(){const n=u?-u/1e3:0,r=e-t,i=a/(2*Math.sqrt(s*l)),c=Math.sqrt(s/l)/1e3;if(void 0===o&&(o=Math.min(Math.abs(e-t)/100,.4)),i<1){const t=Qn(c,i);d=o=>{const s=Math.exp(-i*c*o);return e-s*((n+i*c*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},p=e=>{const o=Math.exp(-i*c*e);return i*c*o*(Math.sin(t*e)*(n+i*c*r)/t+r*Math.cos(t*e))-o*(Math.cos(t*e)*(n+i*c*r)-t*r*Math.sin(t*e))}}else if(1===i)d=t=>e-Math.exp(-c*t)*(r+(n+c*r)*t);else{const t=c*Math.sqrt(i*i-1);d=o=>{const s=Math.exp(-i*c*o),a=Math.min(t*o,300);return e-s*((n+i*c*r)*Math.sinh(a)+t*r*Math.cosh(a))/t}}}return f(),{next:t=>{const r=d(t);if(h)i.done=t>=c;else{const s=1e3*p(t),a=Math.abs(s)<=n,l=Math.abs(e-r)<=o;i.done=a&&l}return i.value=i.done?e:r,i},flipTarget:()=>{u=-u,[t,e]=[e,t],f()}}}oo.needsInterpolation=(t,e)=>"string"==typeof t||"string"==typeof e;const ro=t=>0,io={decay:function({velocity:t=0,from:e=0,power:n=.8,timeConstant:o=350,restDelta:r=.5,modifyTarget:i}){const s={done:!1,value:e};let a=n*t;const l=e+a,u=void 0===i?l:i(l);return u!==l&&(a=u-e),{next:t=>{const e=-a*Math.exp(-t/o);return s.done=!(e>r||e<-r),s.value=s.done?u:u+e,s},flipTarget:()=>{}}},keyframes:function({from:t=0,to:e=1,ease:n,offset:o,duration:r=300}){const i={done:!1,value:t},s=Array.isArray(e)?e:[t,e],a=function(t,e){return t.map((t=>t*e))}(o&&o.length===s.length?o:function(t){const e=t.length;return t.map(((t,n)=>0!==n?n/(e-1):0))}(s),r);function l(){return _n(a,s,{ease:Array.isArray(n)?n:Jn(s,n)})}let u=l();return{next:t=>(i.value=u(t),i.done=t>=r,i),flipTarget:()=>{s.reverse(),u=l()}}},spring:oo};function so(t,e,n=0){return t-e-n}const ao=t=>{const e=({delta:e})=>t(e);return{start:()=>Fn.update(e,!0),stop:()=>Mn.update(e)}};function lo({from:t,autoplay:e=!0,driver:n=ao,elapsed:o=0,repeat:r=0,repeatType:i="loop",repeatDelay:s=0,onPlay:a,onStop:l,onComplete:u,onRepeat:c,onUpdate:h,type:d="keyframes",...p}){var f,m;let g,v,y,{to:x}=p,E=0,b=p.duration,w=!1,S=!0;const P=io[Array.isArray(x)?"keyframes":d];(null===(m=(f=P).needsInterpolation)||void 0===m?void 0:m.call(f,t,x))&&(y=_n([0,100],[t,x],{clamp:!1}),t=0,x=100);const V=P({...p,from:t,to:x});return e&&(null==a||a(),g=n((function(t){if(S||(t=-t),o+=t,!w){const t=V.next(Math.max(0,o));v=t.value,y&&(v=y(v)),w=S?t.done:o<=0}null==h||h(v),w&&(0===E&&(null!=b||(b=o)),E<r?function(t,e,n,o){return o?t>=e+n:t<=-n}(o,b,s,S)&&(E++,"reverse"===i?(S=E%2==0,o=function(t,e=0,n=0,o=!0){return o?so(e+-t,e,n):e-(t-e)+n}(o,b,s,S)):(o=so(o,b,s),"mirror"===i&&V.flipTarget()),w=!1,c&&c()):(g.stop(),u&&u()))})),g.start()),{stop:()=>{null==l||l(),g.stop()}}}function uo(t,e){return e?t*(1e3/e):0}let co=!1;function ho({ease:t,times:e,yoyo:n,flip:o,loop:r,...i}){const s={...i};return e&&(s.offset=e),i.duration&&(s.duration=Se(i.duration)),i.repeatDelay&&(s.repeatDelay=Se(i.repeatDelay)),t&&(s.ease=(t=>Array.isArray(t)&&"number"!=typeof t[0])(t)?t.map(ze):ze(t)),"tween"===i.type&&(s.type="keyframes"),(n||r||o)&&(co=!0,n?s.repeatType="reverse":r?s.repeatType="loop":o&&(s.repeatType="mirror"),s.repeat=r||n||o||i.repeat),"spring"!==i.type&&(s.type="keyframes"),s}function po(t,e,n){return Array.isArray(e.to)&&void 0===t.duration&&(t.duration=.8),function(t){Array.isArray(t.to)&&null===t.to[0]&&(t.to=[...t.to],t.to[0]=t.from)}(e),function({when:t,delay:e,delayChildren:n,staggerChildren:o,staggerDirection:r,repeat:i,repeatType:s,repeatDelay:a,from:l,...u}){return!!Object.keys(u).length}(t)||(t={...t,...cn(n,e.to)}),{...e,...ho(t)}}function fo(t){return 0===t||"string"==typeof t&&0===parseFloat(t)&&-1===t.indexOf(" ")}function mo(t){return"number"==typeof t?0:vn("",t)}function go(t,e){return t[e]||t.default||t}function vo(t,e,n,o={}){return yn.current&&(o={type:!1}),e.start((r=>{let i;const s=function(t,e,n,o,r){const i=go(o,t)||{};let s=void 0!==i.from?i.from:e.get();const a=on(t,n);return"none"===s&&a&&"string"==typeof n?s=vn(t,n):fo(s)&&"string"==typeof n?s=mo(n):!Array.isArray(n)&&fo(n)&&"string"==typeof s&&(n=mo(s)),on(t,s)&&a&&!1!==i.type?function(){const o={from:s,to:n,velocity:e.getVelocity(),onComplete:r,onUpdate:t=>e.set(t)};return"inertia"===i.type||"decay"===i.type?function({from:t=0,velocity:e=0,min:n,max:o,power:r=.8,timeConstant:i=750,bounceStiffness:s=500,bounceDamping:a=10,restDelta:l=1,modifyTarget:u,driver:c,onUpdate:h,onComplete:d,onStop:p}){let f;function m(t){return void 0!==n&&t<n||void 0!==o&&t>o}function g(t){return void 0===n?o:void 0===o||Math.abs(n-t)<Math.abs(o-t)?n:o}function v(t){null==f||f.stop(),f=lo({...t,driver:c,onUpdate:e=>{var n;null==h||h(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:d,onStop:p})}function y(t){v({type:"spring",stiffness:s,damping:a,restDelta:l,...t})}if(m(t))y({from:t,velocity:e,to:g(t)});else{let o=r*e+t;void 0!==u&&(o=u(o));const s=g(o),a=s===n?-1:1;let c,h;const d=t=>{c=h,h=t,e=uo(t-c,Bn().delta),(1===a&&t>s||-1===a&&t<s)&&y({from:t,to:s,velocity:e})};v({type:"decay",from:t,velocity:e,timeConstant:i,power:r,restDelta:l,modifyTarget:u,onUpdate:m(o)?d:void 0})}return{stop:()=>null==f?void 0:f.stop()}}({...o,...i}):lo({...po(i,o,t),onUpdate:t=>{o.onUpdate(t),i.onUpdate&&i.onUpdate(t)},onComplete:()=>{o.onComplete(),i.onComplete&&i.onComplete()}})}:function(){const t=Lt(n);return e.set(t),r(),i.onUpdate&&i.onUpdate(t),i.onComplete&&i.onComplete(),{stop:()=>{}}}}(t,e,n,o,r),a=function(t,e){var n,o;return null!==(o=null!==(n=(go(t,e)||{}).delay)&&void 0!==n?n:t.delay)&&void 0!==o?o:0}(o,t),l=()=>i=s();let u;return a?u=On(l,Se(a)):l(),()=>{u&&u(),i&&i.stop()}}))}function yo(t,e){-1===t.indexOf(e)&&t.push(e)}function xo(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class Eo{constructor(){this.subscriptions=[]}add(t){return yo(this.subscriptions,t),()=>xo(this.subscriptions,t)}notify(t,e,n){const o=this.subscriptions.length;if(o)if(1===o)this.subscriptions[0](t,e,n);else for(let r=0;r<o;r++){const o=this.subscriptions[r];o&&o(t,e,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}class bo{constructor(t){var e;this.version="7.6.19",this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new Eo,this.velocityUpdateSubscribers=new Eo,this.renderSubscribers=new Eo,this.canTrackVelocity=!1,this.updateAndNotify=(t,e=!0)=>{this.prev=this.current,this.current=t;const{delta:n,timestamp:o}=Bn();this.lastUpdated!==o&&(this.timeDelta=n,this.lastUpdated=o,Fn.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.updateSubscribers.notify(this.current),this.velocityUpdateSubscribers.getSize()&&this.velocityUpdateSubscribers.notify(this.getVelocity()),e&&this.renderSubscribers.notify(this.current)},this.scheduleVelocityCheck=()=>Fn.postRender(this.velocityCheck),this.velocityCheck=({timestamp:t})=>{t!==this.lastUpdated&&(this.prev=this.current,this.velocityUpdateSubscribers.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=(e=this.current,!isNaN(parseFloat(e)))}onChange(t){return this.updateSubscribers.add(t)}clearListeners(){this.updateSubscribers.clear()}onRenderRequest(t){return t(this.get()),this.renderSubscribers.add(t)}attach(t){this.passiveEffect=t}set(t,e=!0){e&&this.passiveEffect?this.passiveEffect(t,this.updateAndNotify):this.updateAndNotify(t,e)}get(){return this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?uo(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise((e=>{this.hasAnimated=!0,this.stopAnimation=t(e)})).then((()=>this.clearAnimation()))}stop(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()}isAnimating(){return!!this.stopAnimation}clearAnimation(){this.stopAnimation=null}destroy(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()}}function wo(t){return new bo(t)}const So=t=>e=>e.test(t),Po=[ot,Q,J,_,et,tt,{test:t=>"auto"===t,parse:t=>t}],Vo=t=>Po.find(So(t)),Co=[...Po,Ze,nn],To=t=>Co.find(So(t));function Ao(t,e,n){const o=t.getProps();return Mt(o,e,void 0!==n?n:o.custom,function(t){const e={};return t.values.forEach(((t,n)=>e[n]=t.get())),e}(t),function(t){const e={};return t.values.forEach(((t,n)=>e[n]=t.getVelocity())),e}(t))}function Mo(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,wo(n))}function Ro(t,e){const n=Ao(t,e);let{transitionEnd:o={},transition:r={},...i}=n?t.makeTargetAnimatable(n,!1):{};i={...i,...o};for(const e in i)Mo(t,e,Lt(i[e]))}function Lo(t,e){[...e].reverse().forEach((n=>{var o;const r=t.getVariant(n);r&&Ro(t,r),null===(o=t.variantChildren)||void 0===o||o.forEach((t=>{Lo(t,e)}))}))}function Do(t,e,n){var o,r;const i=Object.keys(e).filter((e=>!t.hasValue(e))),s=i.length;if(s)for(let a=0;a<s;a++){const s=i[a],l=e[s];let u=null;Array.isArray(l)&&(u=l[0]),null===u&&(u=null!==(r=null!==(o=n[s])&&void 0!==o?o:t.readValue(s))&&void 0!==r?r:e[s]),null!=u&&("string"==typeof u&&(/^\-?\d*\.?\d+$/.test(u)||/^0[^.\s]+$/.test(u))?u=parseFloat(u):!To(u)&&nn.test(l)&&(u=vn(s,l)),t.addValue(s,wo(u)),void 0===n[s]&&(n[s]=u),null!==u&&t.setBaseTarget(s,u))}}function ko(t,e){if(e)return(e[t]||e.default||e).from}function Bo(t,e,n){var o;const r={};for(const i in t){const t=ko(i,e);r[i]=void 0!==t?t:null===(o=n.getValue(i))||void 0===o?void 0:o.get()}return r}function Fo(t){return Boolean(I(t)&&t.add)}function Oo(t,e,n={}){let o;if(t.notify("AnimationStart",e),Array.isArray(e)){const r=e.map((e=>jo(t,e,n)));o=Promise.all(r)}else if("string"==typeof e)o=jo(t,e,n);else{const r="function"==typeof e?Ao(t,e,n.custom):e;o=Io(t,r,n)}return o.then((()=>t.notify("AnimationComplete",e)))}function jo(t,e,n={}){var o;const r=Ao(t,e,n.custom);let{transition:i=t.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(i=n.transitionOverride);const s=r?()=>Io(t,r,n):()=>Promise.resolve(),a=(null===(o=t.variantChildren)||void 0===o?void 0:o.size)?(o=0)=>{const{delayChildren:r=0,staggerChildren:s,staggerDirection:a}=i;return function(t,e,n=0,o=0,r=1,i){const s=[],a=(t.variantChildren.size-1)*o,l=1===r?(t=0)=>t*o:(t=0)=>a-t*o;return Array.from(t.variantChildren).sort(Uo).forEach(((t,o)=>{s.push(jo(t,e,{...i,delay:n+l(o)}).then((()=>t.notify("AnimationComplete",e))))})),Promise.all(s)}(t,e,r+o,s,a,n)}:()=>Promise.resolve(),{when:l}=i;if(l){const[t,e]="beforeChildren"===l?[s,a]:[a,s];return t().then(e)}return Promise.all([s(),a(n.delay)])}function Io(t,e,{delay:n=0,transitionOverride:o,type:r}={}){var i;let{transition:s=t.getDefaultTransition(),transitionEnd:a,...l}=t.makeTargetAnimatable(e);const u=t.getValue("willChange");o&&(s=o);const c=[],h=r&&(null===(i=t.animationState)||void 0===i?void 0:i.getState()[r]);for(const e in l){const o=t.getValue(e),r=l[e];if(!o||void 0===r||h&&No(h,e))continue;let i={delay:n,...s};t.shouldReduceMotion&&O.has(e)&&(i={...i,type:!1,delay:0});let a=vo(e,o,r,i);Fo(u)&&(u.add(e),a=a.then((()=>u.remove(e)))),c.push(a)}return Promise.all(c).then((()=>{a&&Ro(t,a)}))}function Uo(t,e){return t.sortNodePosition(e)}function No({protectedKeys:t,needsAnimating:e},n){const o=t.hasOwnProperty(n)&&!0!==e[n];return e[n]=!1,o}const zo=[It.Animate,It.InView,It.Focus,It.Hover,It.Tap,It.Drag,It.Exit],Wo=[...zo].reverse(),Ho=zo.length;function $o(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}const Yo={animation:ye((({visualElement:t,animate:e})=>{t.animationState||(t.animationState=function(t){let e=function(t){return e=>Promise.all(e.map((({animation:e,options:n})=>Oo(t,e,n))))}(t);const n={[It.Animate]:$o(!0),[It.InView]:$o(),[It.Hover]:$o(),[It.Tap]:$o(),[It.Drag]:$o(),[It.Focus]:$o(),[It.Exit]:$o()};let o=!0;const r=(e,n)=>{const o=Ao(t,n);if(o){const{transition:t,transitionEnd:n,...r}=o;e={...e,...r,...n}}return e};function i(i,s){var a;const l=t.getProps(),u=t.getVariantContext(!0)||{},c=[],h=new Set;let f={},m=1/0;for(let e=0;e<Ho;e++){const y=Wo[e],x=n[y],E=null!==(a=l[y])&&void 0!==a?a:u[y],b=d(E),w=y===s?x.isActive:null;!1===w&&(m=e);let S=E===u[y]&&E!==l[y]&&b;if(S&&o&&t.manuallyAnimateOnMount&&(S=!1),x.protectedKeys={...f},!x.isActive&&null===w||!E&&!x.prevProp||p(E)||"boolean"==typeof E)continue;const P=(g=x.prevProp,"string"==typeof(v=E)?v!==g:!!Array.isArray(v)&&!we(v,g));let V=P||y===s&&x.isActive&&!S&&b||e>m&&b;const C=Array.isArray(E)?E:[E];let T=C.reduce(r,{});!1===w&&(T={});const{prevResolvedValues:A={}}=x,M={...A,...T},R=t=>{V=!0,h.delete(t),x.needsAnimating[t]=!0};for(const t in M){const e=T[t],n=A[t];f.hasOwnProperty(t)||(e!==n?Rt(e)&&Rt(n)?!we(e,n)||P?R(t):x.protectedKeys[t]=!0:void 0!==e?R(t):h.add(t):void 0!==e&&h.has(t)?R(t):x.protectedKeys[t]=!0)}x.prevProp=E,x.prevResolvedValues=T,x.isActive&&(f={...f,...T}),o&&t.blockInitialAnimation&&(V=!1),V&&!S&&c.push(...C.map((t=>({animation:t,options:{type:y,...i}}))))}var g,v;if(h.size){const e={};h.forEach((n=>{const o=t.getBaseTarget(n);void 0!==o&&(e[n]=o)})),c.push({animation:e})}let y=Boolean(c.length);return o&&!1===l.initial&&!t.manuallyAnimateOnMount&&(y=!1),o=!1,y?e(c):Promise.resolve()}return{animateChanges:i,setActive:function(e,o,r){var s;if(n[e].isActive===o)return Promise.resolve();null===(s=t.variantChildren)||void 0===s||s.forEach((t=>{var n;return null===(n=t.animationState)||void 0===n?void 0:n.setActive(e,o)})),n[e].isActive=o;const a=i(r,e);for(const t in n)n[t].protectedKeys={};return a},setAnimateFunction:function(n){e=n(t)},getState:()=>n}}(t)),p(e)&&(0,o.useEffect)((()=>e.subscribe(t)),[e])})),exit:ye((t=>{const{custom:e,visualElement:n}=t,[r,i]=Ee(),s=(0,o.useContext)(a);(0,o.useEffect)((()=>{n.isPresent=r;const t=n.animationState&&n.animationState.setActive(It.Exit,!r,{custom:s&&s.custom||e});t&&!r&&t.then(i)}),[r])}))},Xo=(t,e)=>Math.abs(t-e);function Go(t,e){const n=Xo(t.x,e.x),o=Xo(t.y,e.y);return Math.sqrt(n**2+o**2)}class qo{constructor(t,e,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const t=_o(this.lastMoveEventInfo,this.history),e=null!==this.startEvent,n=Go(t.offset,{x:0,y:0})>=3;if(!e&&!n)return;const{point:o}=t,{timestamp:r}=Bn();this.history.push({...o,timestamp:r});const{onStart:i,onMove:s}=this.handlers;e||(i&&i(this.lastMoveEvent,t),this.startEvent=this.lastMoveEvent),s&&s(this.lastMoveEvent,t)},this.handlePointerMove=(t,e)=>{this.lastMoveEvent=t,this.lastMoveEventInfo=Zo(e,this.transformPagePoint),zt(t)&&0===t.buttons?this.handlePointerUp(t,e):Fn.update(this.updatePoint,!0)},this.handlePointerUp=(t,e)=>{this.end();const{onEnd:n,onSessionEnd:o}=this.handlers,r=_o(Zo(e,this.transformPagePoint),this.history);this.startEvent&&n&&n(t,r),o&&o(t,r)},Wt(t)&&t.touches.length>1)return;this.handlers=e,this.transformPagePoint=n;const o=Zo(Xt(t),this.transformPagePoint),{point:r}=o,{timestamp:i}=Bn();this.history=[{...r,timestamp:i}];const{onSessionStart:s}=e;s&&s(t,_o(o,this.history)),this.removeListeners=le(_t(window,"pointermove",this.handlePointerMove),_t(window,"pointerup",this.handlePointerUp),_t(window,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),Mn.update(this.updatePoint)}}function Zo(t,e){return e?{point:e(t.point)}:t}function Ko(t,e){return{x:t.x-e.x,y:t.y-e.y}}function _o({point:t},e){return{point:t,delta:Ko(t,Qo(e)),offset:Ko(t,Jo(e)),velocity:tr(e,.1)}}function Jo(t){return t[0]}function Qo(t){return t[t.length-1]}function tr(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,o=null;const r=Qo(t);for(;n>=0&&(o=t[n],!(r.timestamp-o.timestamp>Se(e)));)n--;if(!o)return{x:0,y:0};const i=(r.timestamp-o.timestamp)/1e3;if(0===i)return{x:0,y:0};const s={x:(r.x-o.x)/i,y:(r.y-o.y)/i};return s.x===1/0&&(s.x=0),s.y===1/0&&(s.y=0),s}function er(t){return t.max-t.min}function nr(t,e=0,n=.01){return Math.abs(t-e)<=n}function or(t,e,n,o=.5){t.origin=o,t.originPoint=In(e.min,e.max,t.origin),t.scale=er(n)/er(e),(nr(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=In(n.min,n.max,t.origin)-t.originPoint,(nr(t.translate)||isNaN(t.translate))&&(t.translate=0)}function rr(t,e,n,o){or(t.x,e.x,n.x,null==o?void 0:o.originX),or(t.y,e.y,n.y,null==o?void 0:o.originY)}function ir(t,e,n){t.min=n.min+e.min,t.max=t.min+er(e)}function sr(t,e,n){t.min=e.min-n.min,t.max=t.min+er(e)}function ar(t,e,n){sr(t.x,e.x,n.x),sr(t.y,e.y,n.y)}function lr(t,e,n){return{min:void 0!==e?t.min+e:void 0,max:void 0!==n?t.max+n-(t.max-t.min):void 0}}function ur(t,e){let n=e.min-t.min,o=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,o]=[o,n]),{min:n,max:o}}const cr=.35;function hr(t,e,n){return{min:dr(t,e),max:dr(t,n)}}function dr(t,e){var n;return"number"==typeof t?t:null!==(n=t[e])&&void 0!==n?n:0}const pr=()=>({x:{min:0,max:0},y:{min:0,max:0}});function fr(t){return[t("x"),t("y")]}function mr({top:t,left:e,right:n,bottom:o}){return{x:{min:e,max:n},y:{min:t,max:o}}}function gr(t){return void 0===t||1===t}function vr({scale:t,scaleX:e,scaleY:n}){return!gr(t)||!gr(e)||!gr(n)}function yr(t){return vr(t)||xr(t)||t.z||t.rotate||t.rotateX||t.rotateY}function xr(t){return Er(t.x)||Er(t.y)}function Er(t){return t&&"0%"!==t}function br(t,e,n){return n+e*(t-n)}function wr(t,e,n,o,r){return void 0!==r&&(t=br(t,r,o)),br(t,n,o)+e}function Sr(t,e=0,n=1,o,r){t.min=wr(t.min,e,n,o,r),t.max=wr(t.max,e,n,o,r)}function Pr(t,{x:e,y:n}){Sr(t.x,e.translate,e.scale,e.originPoint),Sr(t.y,n.translate,n.scale,n.originPoint)}function Vr(t){return Number.isInteger(t)||t>1.0000000000001||t<.999999999999?t:1}function Cr(t,e){t.min=t.min+e,t.max=t.max+e}function Tr(t,e,[n,o,r]){const i=void 0!==e[r]?e[r]:.5,s=In(t.min,t.max,i);Sr(t,e[n],e[o],s,e.scale)}const Ar=["x","scaleX","originX"],Mr=["y","scaleY","originY"];function Rr(t,e){Tr(t.x,e,Ar),Tr(t.y,e,Mr)}function Lr(t,e){return mr(function(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),o=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:o.y,right:o.x}}(t.getBoundingClientRect(),e))}const Dr=new WeakMap;class kr{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=pr(),this.visualElement=t}start(t,{snapToCursor:e=!1}={}){!1!==this.visualElement.isPresent&&(this.panSession=new qo(t,{onSessionStart:t=>{this.stopAnimation(),e&&this.snapToCursor(Xt(t,"page").point)},onStart:(t,e)=>{var n;const{drag:o,dragPropagation:r,onDragStart:i}=this.getProps();(!o||r||(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=ne(o),this.openGlobalLock))&&(this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),fr((t=>{var e,n;let o=this.getAxisMotionValue(t).get()||0;if(J.test(o)){const r=null===(n=null===(e=this.visualElement.projection)||void 0===e?void 0:e.layout)||void 0===n?void 0:n.layoutBox[t];r&&(o=er(r)*(parseFloat(o)/100))}this.originPoint[t]=o})),null==i||i(t,e),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(It.Drag,!0))},onMove:(t,e)=>{const{dragPropagation:n,dragDirectionLock:o,onDirectionLock:r,onDrag:i}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:s}=e;if(o&&null===this.currentDirection)return this.currentDirection=function(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}(s),void(null!==this.currentDirection&&(null==r||r(this.currentDirection)));this.updateAxis("x",e.point,s),this.updateAxis("y",e.point,s),this.visualElement.render(),null==i||i(t,e)},onSessionEnd:(t,e)=>this.stop(t,e)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(t,e){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:o}=e;this.startAnimation(o);const{onDragEnd:r}=this.getProps();null==r||r(t,e)}cancel(){var t,e;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(t=this.panSession)||void 0===t||t.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(e=this.visualElement.animationState)||void 0===e||e.setActive(It.Drag,!1)}updateAxis(t,e,n){const{drag:o}=this.getProps();if(!n||!Br(t,o,this.currentDirection))return;const r=this.getAxisMotionValue(t);let i=this.originPoint[t]+n[t];this.constraints&&this.constraints[t]&&(i=function(t,{min:e,max:n},o){return void 0!==e&&t<e?t=o?In(e,t,o.min):Math.max(t,e):void 0!==n&&t>n&&(t=o?In(n,t,o.max):Math.min(t,n)),t}(i,this.constraints[t],this.elastic[t])),r.set(i)}resolveConstraints(){const{dragConstraints:t,dragElastic:e}=this.getProps(),{layout:n}=this.visualElement.projection||{},o=this.constraints;t&&h(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!t||!n)&&function(t,{top:e,left:n,bottom:o,right:r}){return{x:lr(t.x,n,r),y:lr(t.y,e,o)}}(n.layoutBox,t),this.elastic=function(t=cr){return!1===t?t=0:!0===t&&(t=cr),{x:hr(t,"left","right"),y:hr(t,"top","bottom")}}(e),o!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&fr((t=>{this.getAxisMotionValue(t)&&(this.constraints[t]=function(t,e){const n={};return void 0!==e.min&&(n.min=e.min-t.min),void 0!==e.max&&(n.max=e.max-t.min),n}(n.layoutBox[t],this.constraints[t]))}))}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:e}=this.getProps();if(!t||!h(t))return!1;const n=t.current,{projection:o}=this.visualElement;if(!o||!o.layout)return!1;const r=function(t,e,n){const o=Lr(t,n),{scroll:r}=e;return r&&(Cr(o.x,r.offset.x),Cr(o.y,r.offset.y)),o}(n,o.root,this.visualElement.getTransformPagePoint());let i=function(t,e){return{x:ur(t.x,e.x),y:ur(t.y,e.y)}}(o.layout.layoutBox,r);if(e){const t=e(function({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}(i));this.hasMutatedConstraints=!!t,t&&(i=mr(t))}return i}startAnimation(t){const{drag:e,dragMomentum:n,dragElastic:o,dragTransition:r,dragSnapToOrigin:i,onDragTransitionEnd:s}=this.getProps(),a=this.constraints||{},l=fr((s=>{var l;if(!Br(s,e,this.currentDirection))return;let u=null!==(l=null==a?void 0:a[s])&&void 0!==l?l:{};i&&(u={min:0,max:0});const c=o?200:1e6,h=o?40:1e7,d={type:"inertia",velocity:n?t[s]:0,bounceStiffness:c,bounceDamping:h,timeConstant:750,restDelta:1,restSpeed:10,...r,...u};return this.startAxisValueAnimation(s,d)}));return Promise.all(l).then(s)}startAxisValueAnimation(t,e){return vo(t,this.getAxisMotionValue(t),0,e)}stopAnimation(){fr((t=>this.getAxisMotionValue(t).stop()))}getAxisMotionValue(t){var e,n;const o="_drag"+t.toUpperCase();return this.visualElement.getProps()[o]||this.visualElement.getValue(t,null!==(n=null===(e=this.visualElement.getProps().initial)||void 0===e?void 0:e[t])&&void 0!==n?n:0)}snapToCursor(t){fr((e=>{const{drag:n}=this.getProps();if(!Br(e,n,this.currentDirection))return;const{projection:o}=this.visualElement,r=this.getAxisMotionValue(e);if(o&&o.layout){const{min:n,max:i}=o.layout.layoutBox[e];r.set(t[e]-In(n,i,.5))}}))}scalePositionWithinConstraints(){var t;if(!this.visualElement.current)return;const{drag:e,dragConstraints:n}=this.getProps(),{projection:o}=this.visualElement;if(!h(n)||!o||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};fr((t=>{const e=this.getAxisMotionValue(t);if(e){const n=e.get();r[t]=function(t,e){let n=.5;const o=er(t),r=er(e);return r>o?n=Zn(e.min,e.max-o,t.min):o>r&&(n=Zn(t.min,t.max-r,e.min)),jn(0,1,n)}({min:n,max:n},this.constraints[t])}}));const{transformTemplate:i}=this.visualElement.getProps();this.visualElement.current.style.transform=i?i({},""):"none",null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout(),this.resolveConstraints(),fr((t=>{if(!Br(t,e,null))return;const n=this.getAxisMotionValue(t),{min:o,max:i}=this.constraints[t];n.set(In(o,i,r[t]))}))}addListeners(){var t;if(!this.visualElement.current)return;Dr.set(this.visualElement,this);const e=_t(this.visualElement.current,"pointerdown",(t=>{const{drag:e,dragListener:n=!0}=this.getProps();e&&n&&this.start(t)})),n=()=>{const{dragConstraints:t}=this.getProps();h(t)&&(this.constraints=this.resolveRefConstraints())},{projection:o}=this.visualElement,r=o.addEventListener("measure",n);o&&!o.layout&&(null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout()),n();const i=Ut(window,"resize",(()=>this.scalePositionWithinConstraints())),s=o.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e})=>{this.isDragging&&e&&(fr((e=>{const n=this.getAxisMotionValue(e);n&&(this.originPoint[e]+=t[e].translate,n.set(n.get()+t[e].translate))})),this.visualElement.render())}));return()=>{i(),e(),r(),null==s||s()}}getProps(){const t=this.visualElement.getProps(),{drag:e=!1,dragDirectionLock:n=!1,dragPropagation:o=!1,dragConstraints:r=!1,dragElastic:i=cr,dragMomentum:s=!0}=t;return{...t,drag:e,dragDirectionLock:n,dragPropagation:o,dragConstraints:r,dragElastic:i,dragMomentum:s}}}function Br(t,e,n){return!(!0!==e&&e!==t||null!==n&&n!==t)}const Fr={pan:ye((function({onPan:t,onPanStart:e,onPanEnd:n,onPanSessionStart:i,visualElement:s}){const a=t||e||n||i,l=(0,o.useRef)(null),{transformPagePoint:u}=(0,o.useContext)(r),c={onSessionStart:i,onStart:e,onMove:t,onEnd:(t,e)=>{l.current=null,n&&n(t,e)}};(0,o.useEffect)((()=>{null!==l.current&&l.current.updateHandlers(c)})),Jt(s,"pointerdown",a&&function(t){l.current=new qo(t,c,{transformPagePoint:u})}),se((()=>l.current&&l.current.end()))})),drag:ye((function(t){const{dragControls:e,visualElement:n}=t,r=b((()=>new kr(n)));(0,o.useEffect)((()=>e&&e.subscribe(r)),[r,e]),(0,o.useEffect)((()=>r.addListeners()),[r])}))};function Or(t){return"string"==typeof t&&t.startsWith("var(--")}const jr=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Ir(t,e,n=1){const[o,r]=function(t){const e=jr.exec(t);if(!e)return[,];const[,n,o]=e;return[n,o]}(t);if(!o)return;const i=window.getComputedStyle(e).getPropertyValue(o);return i?i.trim():Or(r)?Ir(r,e,n+1):r}const Ur=new Set(["width","height","top","left","right","bottom","x","y"]),Nr=t=>Ur.has(t),zr=(t,e)=>{t.set(e,!1),t.set(e)},Wr=t=>t===ot||t===Q;var Hr;!function(t){t.width="width",t.height="height",t.left="left",t.right="right",t.top="top",t.bottom="bottom"}(Hr||(Hr={}));const $r=(t,e)=>parseFloat(t.split(", ")[e]),Yr=(t,e)=>(n,{transform:o})=>{if("none"===o||!o)return 0;const r=o.match(/^matrix3d\((.+)\)$/);if(r)return $r(r[1],e);{const e=o.match(/^matrix\((.+)\)$/);return e?$r(e[1],t):0}},Xr=new Set(["x","y","z"]),Gr=F.filter((t=>!Xr.has(t))),qr={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:Yr(4,13),y:Yr(5,14)};function Zr(t,e,n,o){return(t=>Object.keys(t).some(Nr))(e)?((t,e,n={},o={})=>{e={...e},o={...o};const r=Object.keys(e).filter(Nr);let i=[],s=!1;const a=[];if(r.forEach((r=>{const l=t.getValue(r);if(!t.hasValue(r))return;let u=n[r],c=Vo(u);const h=e[r];let d;if(Rt(h)){const t=h.length,e=null===h[0]?1:0;u=h[e],c=Vo(u);for(let n=e;n<t;n++)d?Vo(h[n]):(d=Vo(h[n]),d===c||Wr(c)&&Wr(d))}else d=Vo(h);if(c!==d)if(Wr(c)&&Wr(d)){const t=l.get();"string"==typeof t&&l.set(parseFloat(t)),"string"==typeof h?e[r]=parseFloat(h):Array.isArray(h)&&d===Q&&(e[r]=h.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==d?void 0:d.transform)&&(0===u||0===h)?0===u?l.set(d.transform(u)):e[r]=c.transform(h):(s||(i=function(t){const e=[];return Gr.forEach((n=>{const o=t.getValue(n);void 0!==o&&(e.push([n,o.get()]),o.set(n.startsWith("scale")?1:0))})),e.length&&t.render(),e}(t),s=!0),a.push(r),o[r]=void 0!==o[r]?o[r]:e[r],zr(l,h))})),a.length){const n=a.indexOf("height")>=0?window.pageYOffset:null,r=((t,e,n)=>{const o=e.measureViewportBox(),r=e.current,i=getComputedStyle(r),{display:s}=i,a={};"none"===s&&e.setStaticValue("display",t.display||"block"),n.forEach((t=>{a[t]=qr[t](o,i)})),e.render();const l=e.measureViewportBox();return n.forEach((n=>{const o=e.getValue(n);zr(o,a[n]),t[n]=qr[n](l,i)})),t})(e,t,a);return i.length&&i.forEach((([e,n])=>{t.getValue(e).set(n)})),t.render(),l&&null!==n&&window.scrollTo({top:n}),{target:r,transitionEnd:o}}return{target:e,transitionEnd:o}})(t,e,n,o):{target:e,transitionEnd:o}}const Kr={current:null},_r={current:!1};function Jr(){if(_r.current=!0,l)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>Kr.current=t.matches;t.addListener(e),e()}else Kr.current=!1}const Qr=Object.keys(x),ti=Qr.length,ei=["AnimationStart","AnimationComplete","Update","Unmount","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"];class ni{constructor({parent:t,props:e,reducedMotionConfig:n,visualState:o},r={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.isPresent=!0,this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>Fn.render(this.render,!1,!0);const{latestValues:i,renderState:s}=o;this.latestValues=i,this.baseTarget={...i},this.initialValues=e.initial?{...i}:{},this.renderState=s,this.parent=t,this.props=e,this.depth=t?t.depth+1:0,this.reducedMotionConfig=n,this.options=r,this.isControllingVariants=m(e),this.isVariantNode=g(e),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(t&&t.current);const{willChange:a,...l}=this.scrapeMotionValuesFromProps(e);for(const t in l){const e=l[t];void 0!==i[t]&&I(e)&&(e.set(i[t],!1),Fo(a)&&a.add(t))}}scrapeMotionValuesFromProps(t){return{}}mount(t){var e;this.current=t,this.projection&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=null===(e=this.parent)||void 0===e?void 0:e.addVariantChild(this)),this.values.forEach(((t,e)=>this.bindToMotionValue(e,t))),_r.current||Jr(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||Kr.current),this.parent&&this.parent.children.add(this),this.setProps(this.props)}unmount(){var t,e,n;null===(t=this.projection)||void 0===t||t.unmount(),Mn.update(this.notifyUpdate),Mn.render(this.render),this.valueSubscriptions.forEach((t=>t())),null===(e=this.removeFromVariantTree)||void 0===e||e.call(this),null===(n=this.parent)||void 0===n||n.children.delete(this);for(const t in this.events)this.events[t].clear();this.current=null}bindToMotionValue(t,e){const n=O.has(t),o=e.onChange((e=>{this.latestValues[t]=e,this.props.onUpdate&&Fn.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),r=e.onRenderRequest(this.scheduleRender);this.valueSubscriptions.set(t,(()=>{o(),r()}))}sortNodePosition(t){return this.current&&this.sortInstanceNodePosition&&this.type===t.type?this.sortInstanceNodePosition(this.current,t.current):0}loadFeatures(t,e,n,r,i,s){const a=[];for(let e=0;e<ti;e++){const n=Qr[e],{isEnabled:r,Component:i}=x[n];r(t)&&i&&a.push((0,o.createElement)(i,{key:n,...t,visualElement:this}))}if(!this.projection&&i){this.projection=new i(r,this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:o,dragConstraints:a,layoutScroll:l}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(o)||a&&h(a),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:s,layoutScroll:l})}return a}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):pr()}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,e){this.latestValues[t]=e}makeTargetAnimatable(t,e=!0){return this.makeTargetAnimatableFromInstance(t,this.props,e)}setProps(t){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.props=t;for(let e=0;e<ei.length;e++){const n=ei[e];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const o=t["on"+n];o&&(this.propEventSubscriptions[n]=this.on(n,o))}this.prevMotionValues=function(t,e,n){const{willChange:o}=e;for(const r in e){const i=e[r],s=n[r];if(I(i))t.addValue(r,i),Fo(o)&&o.add(r);else if(I(s))t.addValue(r,wo(i)),Fo(o)&&o.remove(r);else if(s!==i)if(t.hasValue(r)){const e=t.getValue(r);!e.hasAnimated&&e.set(i)}else{const e=t.getStaticValue(r);t.addValue(r,wo(void 0!==e?e:i))}}for(const o in n)void 0===e[o]&&t.removeValue(o);return e}(this,this.scrapeMotionValuesFromProps(t),this.prevMotionValues)}getProps(){return this.props}getVariant(t){var e;return null===(e=this.props.variants)||void 0===e?void 0:e[t]}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){var t;return this.isVariantNode?this:null===(t=this.parent)||void 0===t?void 0:t.getClosestVariantNode()}getVariantContext(t=!1){var e,n;if(t)return null===(e=this.parent)||void 0===e?void 0:e.getVariantContext();if(!this.isControllingVariants){const t=(null===(n=this.parent)||void 0===n?void 0:n.getVariantContext())||{};return void 0!==this.props.initial&&(t.initial=this.props.initial),t}const o={};for(let t=0;t<ri;t++){const e=oi[t],n=this.props[e];(d(n)||!1===n)&&(o[e]=n)}return o}addVariantChild(t){var e;const n=this.getClosestVariantNode();if(n)return null===(e=n.variantChildren)||void 0===e||e.add(t),()=>n.variantChildren.delete(t)}addValue(t,e){this.hasValue(t)&&this.removeValue(t),this.values.set(t,e),this.latestValues[t]=e.get(),this.bindToMotionValue(t,e)}removeValue(t){var e;this.values.delete(t),null===(e=this.valueSubscriptions.get(t))||void 0===e||e(),this.valueSubscriptions.delete(t),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,e){if(this.props.values&&this.props.values[t])return this.props.values[t];let n=this.values.get(t);return void 0===n&&void 0!==e&&(n=wo(e),this.addValue(t,n)),n}readValue(t){return void 0===this.latestValues[t]&&this.current?this.readValueFromInstance(this.current,t,this.options):this.latestValues[t]}setBaseTarget(t,e){this.baseTarget[t]=e}getBaseTarget(t){var e;const{initial:n}=this.props,o="string"==typeof n||"object"==typeof n?null===(e=Mt(this.props,n))||void 0===e?void 0:e[t]:void 0;if(n&&void 0!==o)return o;const r=this.getBaseTargetFromProps(this.props,t);return void 0===r||I(r)?void 0!==this.initialValues[t]&&void 0===o?void 0:this.baseTarget[t]:r}on(t,e){return this.events[t]||(this.events[t]=new Eo),this.events[t].add(e)}notify(t,...e){var n;null===(n=this.events[t])||void 0===n||n.notify(...e)}}const oi=["initial",...zo],ri=oi.length;class ii extends ni{sortInstanceNodePosition(t,e){return 2&t.compareDocumentPosition(e)?1:-1}getBaseTargetFromProps(t,e){var n;return null===(n=t.style)||void 0===n?void 0:n[e]}removeValueFromRenderState(t,{vars:e,style:n}){delete e[t],delete n[t]}makeTargetAnimatableFromInstance({transition:t,transitionEnd:e,...n},{transformValues:o},r){let i=Bo(n,t||{},this);if(o&&(e&&(e=o(e)),n&&(n=o(n)),i&&(i=o(i))),r){Do(this,n,i);const t=((t,e,n,o)=>{const r=function(t,{...e},n){const o=t.current;if(!(o instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.values.forEach((t=>{const e=t.get();if(!Or(e))return;const n=Ir(e,o);n&&t.set(n)}));for(const t in e){const r=e[t];if(!Or(r))continue;const i=Ir(r,o);i&&(e[t]=i,n&&void 0===n[t]&&(n[t]=r))}return{target:e,transitionEnd:n}}(t,e,o);return Zr(t,e=r.target,n,o=r.transitionEnd)})(this,n,i,e);e=t.transitionEnd,n=t.target}return{transition:t,transitionEnd:e,...n}}}class si extends ii{readValueFromInstance(t,e){if(O.has(e)){const t=gn(e);return t&&t.default||0}{const o=(n=t,window.getComputedStyle(n)),r=(W(e)?o.getPropertyValue(e):o[e])||0;return"string"==typeof r?r.trim():r}var n}measureInstanceViewportBox(t,{transformPagePoint:e}){return Lr(t,e)}build(t,e,n,o){lt(t,e,n,o.transformTemplate)}scrapeMotionValuesFromProps(t){return Tt(t)}renderInstance(t,e,n,o){Pt(t,e,n,o)}}class ai extends ii{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(t,e){return t[e]}readValueFromInstance(t,e){var n;return O.has(e)?(null===(n=gn(e))||void 0===n?void 0:n.default)||0:(e=Vt.has(e)?e:St(e),t.getAttribute(e))}measureInstanceViewportBox(){return pr()}scrapeMotionValuesFromProps(t){return At(t)}build(t,e,n,o){xt(t,e,n,this.isSVGTag,o.transformTemplate)}renderInstance(t,e,n,o){Ct(t,e,0,o)}mount(t){this.isSVGTag=Et(t.tagName),super.mount(t)}}const li=(t,e)=>D(t)?new ai(e,{enableHardwareAcceleration:!1}):new si(e,{enableHardwareAcceleration:!0});function ui(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const ci={correct:(t,e)=>{if(!e.target)return t;if("string"==typeof t){if(!Q.test(t))return t;t=parseFloat(t)}return`${ui(t,e.target.x)}% ${ui(t,e.target.y)}%`}},hi="_$css",di={correct:(t,{treeScale:e,projectionDelta:n})=>{const o=t,r=t.includes("var("),i=[];r&&(t=t.replace(jr,(t=>(i.push(t),hi))));const s=nn.parse(t);if(s.length>5)return o;const a=nn.createTransformer(t),l="number"!=typeof s[0]?1:0,u=n.x.scale*e.x,c=n.y.scale*e.y;s[0+l]/=u,s[1+l]/=c;const h=In(u,c,.5);"number"==typeof s[2+l]&&(s[2+l]/=h),"number"==typeof s[3+l]&&(s[3+l]/=h);let d=a(s);if(r){let t=0;d=d.replace(hi,(()=>{const e=i[t];return t++,e}))}return d}};class pi extends o.Component{componentDidMount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n,layoutId:o}=this.props,{projection:r}=t;B(fi),r&&(e.group&&e.group.add(r),n&&n.register&&o&&n.register(r),r.root.didUpdate(),r.addEventListener("animationComplete",(()=>{this.safeToRemove()})),r.setOptions({...r.options,onExitComplete:()=>this.safeToRemove()})),w.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:e,visualElement:n,drag:o,isPresent:r}=this.props,i=n.projection;return i?(i.isPresent=r,o||t.layoutDependency!==e||void 0===e?i.willUpdate():this.safeToRemove(),t.isPresent!==r&&(r?i.promote():i.relegate()||Fn.postRender((()=>{var t;(null===(t=i.getStack())||void 0===t?void 0:t.members.length)||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),!t.currentAnimation&&t.isLead()&&this.safeToRemove())}componentWillUnmount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n}=this.props,{projection:o}=t;o&&(o.scheduleCheckAfterUnmount(),(null==e?void 0:e.group)&&e.group.remove(o),(null==n?void 0:n.deregister)&&n.deregister(o))}safeToRemove(){const{safeToRemove:t}=this.props;null==t||t()}render(){return null}}const fi={borderRadius:{...ci,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:ci,borderTopRightRadius:ci,borderBottomLeftRadius:ci,borderBottomRightRadius:ci,boxShadow:di},mi={measureLayout:function(t){const[e,n]=Ee(),r=(0,o.useContext)(P);return o.createElement(pi,{...t,layoutGroup:r,switchLayoutGroup:(0,o.useContext)(C),isPresent:e,safeToRemove:n})}};function gi(t,e,n={}){const o=I(t)?t:wo(t);return vo("",o,e,n),{stop:()=>o.stop(),isAnimating:()=>o.isAnimating()}}const vi=["TopLeft","TopRight","BottomLeft","BottomRight"],yi=vi.length,xi=t=>"string"==typeof t?parseFloat(t):t,Ei=t=>"number"==typeof t||Q.test(t);function bi(t,e){var n;return null!==(n=t[e])&&void 0!==n?n:t.borderRadius}const wi=Pi(0,.5,ke),Si=Pi(.5,.95,Pe);function Pi(t,e,n){return o=>o<t?0:o>e?1:n(Zn(t,e,o))}function Vi(t,e){t.min=e.min,t.max=e.max}function Ci(t,e){Vi(t.x,e.x),Vi(t.y,e.y)}function Ti(t,e,n,o,r){return t=br(t-=e,1/n,o),void 0!==r&&(t=br(t,1/r,o)),t}function Ai(t,e,[n,o,r],i,s){!function(t,e=0,n=1,o=.5,r,i=t,s=t){if(J.test(e)&&(e=parseFloat(e),e=In(s.min,s.max,e/100)-s.min),"number"!=typeof e)return;let a=In(i.min,i.max,o);t===i&&(a-=e),t.min=Ti(t.min,e,n,a,r),t.max=Ti(t.max,e,n,a,r)}(t,e[n],e[o],e[r],e.scale,i,s)}const Mi=["x","scaleX","originX"],Ri=["y","scaleY","originY"];function Li(t,e,n,o){Ai(t.x,e,Mi,null==n?void 0:n.x,null==o?void 0:o.x),Ai(t.y,e,Ri,null==n?void 0:n.y,null==o?void 0:o.y)}function Di(t){return 0===t.translate&&1===t.scale}function ki(t){return Di(t.x)&&Di(t.y)}function Bi(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function Fi(t){return er(t.x)/er(t.y)}class Oi{constructor(){this.members=[]}add(t){yo(this.members,t),t.scheduleRender()}remove(t){if(xo(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const t=this.members[this.members.length-1];t&&this.promote(t)}}relegate(t){const e=this.members.findIndex((e=>t===e));if(0===e)return!1;let n;for(let t=e;t>=0;t--){const e=this.members[t];if(!1!==e.isPresent){n=e;break}}return!!n&&(this.promote(n),!0)}promote(t,e){var n;const o=this.lead;if(t!==o&&(this.prevLead=o,this.lead=t,t.show(),o)){o.instance&&o.scheduleRender(),t.scheduleRender(),t.resumeFrom=o,e&&(t.resumeFrom.preserveOpacity=!0),o.snapshot&&(t.snapshot=o.snapshot,t.snapshot.latestValues=o.animationValues||o.latestValues),(null===(n=t.root)||void 0===n?void 0:n.isUpdating)&&(t.isLayoutDirty=!0);const{crossfade:r}=t.options;!1===r&&o.hide()}}exitAnimationComplete(){this.members.forEach((t=>{var e,n,o,r,i;null===(n=(e=t.options).onExitComplete)||void 0===n||n.call(e),null===(i=null===(o=t.resumingFrom)||void 0===o?void 0:(r=o.options).onExitComplete)||void 0===i||i.call(r)}))}scheduleRender(){this.members.forEach((t=>{t.instance&&t.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function ji(t,e,n){let o="";const r=t.x.translate/e.x,i=t.y.translate/e.y;if((r||i)&&(o=`translate3d(${r}px, ${i}px, 0) `),1===e.x&&1===e.y||(o+=`scale(${1/e.x}, ${1/e.y}) `),n){const{rotate:t,rotateX:e,rotateY:r}=n;t&&(o+=`rotate(${t}deg) `),e&&(o+=`rotateX(${e}deg) `),r&&(o+=`rotateY(${r}deg) `)}const s=t.x.scale*e.x,a=t.y.scale*e.y;return 1===s&&1===a||(o+=`scale(${s}, ${a})`),o||"none"}const Ii=(t,e)=>t.depth-e.depth;class Ui{constructor(){this.children=[],this.isDirty=!1}add(t){yo(this.children,t),this.isDirty=!0}remove(t){xo(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(Ii),this.isDirty=!1,this.children.forEach(t)}}const Ni=["","X","Y","Z"];let zi=0;function Wi({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:o,resetTransform:r}){return class{constructor(t,n={},o=(null==e?void 0:e())){this.id=zi++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isTransformDirty=!1,this.isProjectionDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.nodes.forEach(Yi),this.nodes.forEach(Ki),this.nodes.forEach(_i)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.elementId=t,this.latestValues=n,this.root=o?o.root||o:this,this.path=o?[...o.path,o]:[],this.parent=o,this.depth=o?o.depth+1:0,t&&this.root.registerPotentialNode(t,this);for(let t=0;t<this.path.length;t++)this.path[t].shouldResetTransform=!0;this.root===this&&(this.nodes=new Ui)}addEventListener(t,e){return this.eventHandlers.has(t)||this.eventHandlers.set(t,new Eo),this.eventHandlers.get(t).add(e)}notifyListeners(t,...e){const n=this.eventHandlers.get(t);null==n||n.notify(...e)}hasListeners(t){return this.eventHandlers.has(t)}registerPotentialNode(t,e){this.potentialNodes.set(t,e)}mount(e,n=!1){var o;if(this.instance)return;this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;const{layoutId:r,layout:i,visualElement:s}=this.options;if(s&&!s.current&&s.mount(e),this.root.nodes.add(this),null===(o=this.parent)||void 0===o||o.children.add(this),this.elementId&&this.root.potentialNodes.delete(this.elementId),n&&(i||r)&&(this.isLayoutDirty=!0),t){let n;const o=()=>this.root.updateBlockedByResize=!1;t(e,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=On(o,250),w.hasAnimatedSinceResize&&(w.hasAnimatedSinceResize=!1,this.nodes.forEach(Zi))}))}r&&this.root.registerSharedNode(r,this),!1!==this.options.animate&&s&&(r||i)&&this.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e,hasRelativeTargetChanged:n,layout:o})=>{var r,i,a,l,u;if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const c=null!==(i=null!==(r=this.options.transition)&&void 0!==r?r:s.getDefaultTransition())&&void 0!==i?i:os,{onLayoutAnimationStart:h,onLayoutAnimationComplete:d}=s.getProps(),p=!this.targetLayout||!Bi(this.targetLayout,o)||n,f=!e&&n;if((null===(a=this.resumeFrom)||void 0===a?void 0:a.instance)||f||e&&(p||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(t,f);const e={...go(c,"layout"),onPlay:h,onComplete:d};s.shouldReduceMotion&&(e.delay=0,e.type=!1),this.startAnimation(e)}else e||0!==this.animationProgress||Zi(this),this.isLead()&&(null===(u=(l=this.options).onExitComplete)||void 0===u||u.call(l));this.targetLayout=o}))}unmount(){var t,e;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(t=this.getStack())||void 0===t||t.remove(this),null===(e=this.parent)||void 0===e||e.children.delete(this),this.instance=void 0,Mn.preRender(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){var t;return this.isAnimationBlocked||(null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimationBlocked())||!1}startUpdate(){var t;this.isUpdateBlocked()||(this.isUpdating=!0,null===(t=this.nodes)||void 0===t||t.forEach(Ji),this.animationId++)}willUpdate(t=!0){var e,n,o;if(this.root.isUpdateBlocked())return void(null===(n=(e=this.options).onExitComplete)||void 0===n||n.call(e));if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let t=0;t<this.path.length;t++){const e=this.path[t];e.shouldResetTransform=!0,e.updateScroll("snapshot")}const{layoutId:r,layout:i}=this.options;if(void 0===r&&!i)return;const s=null===(o=this.options.visualElement)||void 0===o?void 0:o.getProps().transformTemplate;this.prevTransformTemplateValue=null==s?void 0:s(this.latestValues,""),this.updateSnapshot(),t&&this.notifyListeners("willUpdate")}didUpdate(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Gi);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(rs),this.potentialNodes.clear()),this.nodes.forEach(qi),this.nodes.forEach(Hi),this.nodes.forEach($i),this.clearAllSnapshots(),Rn.update(),Rn.preRender(),Rn.render())}clearAllSnapshots(){this.nodes.forEach(Xi),this.sharedNodes.forEach(Qi)}scheduleUpdateProjection(){Fn.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){Fn.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){var t;if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let t=0;t<this.path.length;t++)this.path[t].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=pr(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox),null===(t=this.options.visualElement)||void 0===t||t.notify("LayoutMeasure",this.layout.layoutBox,null==e?void 0:e.layoutBox)}updateScroll(t="measure"){let e=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===t&&(e=!1),e&&(this.scroll={animationId:this.root.animationId,phase:t,isRoot:o(this.instance),offset:n(this.instance)})}resetTransform(){var t;if(!r)return;const e=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!ki(this.projectionDelta),o=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate,i=null==o?void 0:o(this.latestValues,""),s=i!==this.prevTransformTemplateValue;e&&(n||yr(this.latestValues)||s)&&(r(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}measure(t=!0){const e=this.measurePageBox();let n=this.removeElementScroll(e);var o;return t&&(n=this.removeTransform(n)),is((o=n).x),is(o.y),{animationId:this.root.animationId,measuredBox:e,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:t}=this.options;if(!t)return pr();const e=t.measureViewportBox(),{scroll:n}=this.root;return n&&(Cr(e.x,n.offset.x),Cr(e.y,n.offset.y)),e}removeElementScroll(t){const e=pr();Ci(e,t);for(let n=0;n<this.path.length;n++){const o=this.path[n],{scroll:r,options:i}=o;if(o!==this.root&&r&&i.layoutScroll){if(r.isRoot){Ci(e,t);const{scroll:n}=this.root;n&&(Cr(e.x,-n.offset.x),Cr(e.y,-n.offset.y))}Cr(e.x,r.offset.x),Cr(e.y,r.offset.y)}}return e}applyTransform(t,e=!1){const n=pr();Ci(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];!e&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Rr(n,{x:-o.scroll.offset.x,y:-o.scroll.offset.y}),yr(o.latestValues)&&Rr(n,o.latestValues)}return yr(this.latestValues)&&Rr(n,this.latestValues),n}removeTransform(t){var e;const n=pr();Ci(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];if(!o.instance)continue;if(!yr(o.latestValues))continue;vr(o.latestValues)&&o.updateSnapshot();const r=pr();Ci(r,o.measurePageBox()),Li(n,o.latestValues,null===(e=o.snapshot)||void 0===e?void 0:e.layoutBox,r)}return yr(this.latestValues)&&Li(n,this.latestValues),n}setTargetDelta(t){this.targetDelta=t,this.isProjectionDirty=!0,this.root.scheduleUpdateProjection()}setOptions(t){this.options={...this.options,...t,crossfade:void 0===t.crossfade||t.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}resolveTargetDelta(){var t;const e=this.getLead();if(this.isProjectionDirty||(this.isProjectionDirty=e.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=e.isTransformDirty),!this.isProjectionDirty&&!this.attemptToResolveRelativeTarget)return;const{layout:n,layoutId:o}=this.options;if(this.layout&&(n||o)){if(!this.targetDelta&&!this.relativeTarget){const t=this.getClosestProjectingParent();t&&t.layout?(this.relativeParent=t,this.relativeTarget=pr(),this.relativeTargetOrigin=pr(),ar(this.relativeTargetOrigin,this.layout.layoutBox,t.layout.layoutBox),Ci(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}var r,i,s;if((this.relativeTarget||this.targetDelta)&&(this.target||(this.target=pr(),this.targetWithTransforms=pr()),this.relativeTarget&&this.relativeTargetOrigin&&(null===(t=this.relativeParent)||void 0===t?void 0:t.target)?(r=this.target,i=this.relativeTarget,s=this.relativeParent.target,ir(r.x,i.x,s.x),ir(r.y,i.y,s.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):Ci(this.target,this.layout.layoutBox),Pr(this.target,this.targetDelta)):Ci(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget)){this.attemptToResolveRelativeTarget=!1;const t=this.getClosestProjectingParent();t&&Boolean(t.resumingFrom)===Boolean(this.resumingFrom)&&!t.options.layoutScroll&&t.target?(this.relativeParent=t,this.relativeTarget=pr(),this.relativeTargetOrigin=pr(),ar(this.relativeTargetOrigin,this.target,t.target),Ci(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}}}getClosestProjectingParent(){if(this.parent&&!vr(this.parent.latestValues)&&!xr(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()}calcProjection(){var t;const{isProjectionDirty:e,isTransformDirty:n}=this;this.isProjectionDirty=this.isTransformDirty=!1;const o=this.getLead(),r=Boolean(this.resumingFrom)||this!==o;let i=!0;if(e&&(i=!1),r&&n&&(i=!1),i)return;const{layout:s,layoutId:a}=this.options;if(this.isTreeAnimating=Boolean((null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!s&&!a)return;Ci(this.layoutCorrected,this.layout.layoutBox),function(t,e,n,o=!1){var r,i;const s=n.length;if(!s)return;let a,l;e.x=e.y=1;for(let u=0;u<s;u++)a=n[u],l=a.projectionDelta,"contents"!==(null===(i=null===(r=a.instance)||void 0===r?void 0:r.style)||void 0===i?void 0:i.display)&&(o&&a.options.layoutScroll&&a.scroll&&a!==a.root&&Rr(t,{x:-a.scroll.offset.x,y:-a.scroll.offset.y}),l&&(e.x*=l.x.scale,e.y*=l.y.scale,Pr(t,l)),o&&yr(a.latestValues)&&Rr(t,a.latestValues));e.x=Vr(e.x),e.y=Vr(e.y)}(this.layoutCorrected,this.treeScale,this.path,r);const{target:l}=o;if(!l)return;this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});const u=this.treeScale.x,c=this.treeScale.y,h=this.projectionTransform;rr(this.projectionDelta,this.layoutCorrected,l,this.latestValues),this.projectionTransform=ji(this.projectionDelta,this.treeScale),this.projectionTransform===h&&this.treeScale.x===u&&this.treeScale.y===c||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",l))}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(t=!0){var e,n,o;null===(n=(e=this.options).scheduleRender)||void 0===n||n.call(e),t&&(null===(o=this.getStack())||void 0===o||o.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(t,e=!1){var n,o;const r=this.snapshot,i=(null==r?void 0:r.latestValues)||{},s={...this.latestValues},a={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!e;const l=pr(),u=(null==r?void 0:r.source)!==(null===(n=this.layout)||void 0===n?void 0:n.source),c=((null===(o=this.getStack())||void 0===o?void 0:o.members.length)||0)<=1,h=Boolean(u&&!c&&!0===this.options.crossfade&&!this.path.some(ns));this.animationProgress=0,this.mixTargetDelta=e=>{var n;const o=e/1e3;var r,d,p,f;ts(a.x,t.x,o),ts(a.y,t.y,o),this.setTargetDelta(a),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&(null===(n=this.relativeParent)||void 0===n?void 0:n.layout)&&(ar(l,this.layout.layoutBox,this.relativeParent.layout.layoutBox),r=this.relativeTarget,d=this.relativeTargetOrigin,p=l,f=o,es(r.x,d.x,p.x,f),es(r.y,d.y,p.y,f)),u&&(this.animationValues=s,function(t,e,n,o,r,i){var s,a,l,u;r?(t.opacity=In(0,null!==(s=n.opacity)&&void 0!==s?s:1,wi(o)),t.opacityExit=In(null!==(a=e.opacity)&&void 0!==a?a:1,0,Si(o))):i&&(t.opacity=In(null!==(l=e.opacity)&&void 0!==l?l:1,null!==(u=n.opacity)&&void 0!==u?u:1,o));for(let r=0;r<yi;r++){const i=`border${vi[r]}Radius`;let s=bi(e,i),a=bi(n,i);void 0===s&&void 0===a||(s||(s=0),a||(a=0),0===s||0===a||Ei(s)===Ei(a)?(t[i]=Math.max(In(xi(s),xi(a),o),0),(J.test(a)||J.test(s))&&(t[i]+="%")):t[i]=a)}(e.rotate||n.rotate)&&(t.rotate=In(e.rotate||0,n.rotate||0,o))}(s,i,this.latestValues,o,h,c)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=o},this.mixTargetDelta(0)}startAnimation(t){var e,n;this.notifyListeners("animationStart"),null===(e=this.currentAnimation)||void 0===e||e.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(Mn.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=Fn.update((()=>{w.hasAnimatedSinceResize=!0,this.currentAnimation=gi(0,1e3,{...t,onUpdate:e=>{var n;this.mixTargetDelta(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:()=>{var e;null===(e=t.onComplete)||void 0===e||e.call(t),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){var t;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(t=this.getStack())||void 0===t||t.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){var t;this.currentAnimation&&(null===(t=this.mixTargetDelta)||void 0===t||t.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const t=this.getLead();let{targetWithTransforms:e,target:n,layout:o,latestValues:r}=t;if(e&&n&&o){if(this!==t&&this.layout&&o&&ss(this.options.animationType,this.layout.layoutBox,o.layoutBox)){n=this.target||pr();const e=er(this.layout.layoutBox.x);n.x.min=t.target.x.min,n.x.max=n.x.min+e;const o=er(this.layout.layoutBox.y);n.y.min=t.target.y.min,n.y.max=n.y.min+o}Ci(e,n),Rr(e,r),rr(this.projectionDeltaWithTransform,this.layoutCorrected,e,r)}}registerSharedNode(t,e){var n,o,r;this.sharedNodes.has(t)||this.sharedNodes.set(t,new Oi),this.sharedNodes.get(t).add(e),e.promote({transition:null===(n=e.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(r=null===(o=e.options.initialPromotionConfig)||void 0===o?void 0:o.shouldPreserveFollowOpacity)||void 0===r?void 0:r.call(o,e)})}isLead(){const t=this.getStack();return!t||t.lead===this}getLead(){var t;const{layoutId:e}=this.options;return e&&(null===(t=this.getStack())||void 0===t?void 0:t.lead)||this}getPrevLead(){var t;const{layoutId:e}=this.options;return e?null===(t=this.getStack())||void 0===t?void 0:t.prevLead:void 0}getStack(){const{layoutId:t}=this.options;if(t)return this.root.sharedNodes.get(t)}promote({needsReset:t,transition:e,preserveFollowOpacity:n}={}){const o=this.getStack();o&&o.promote(this,n),t&&(this.projectionDelta=void 0,this.needsReset=!0),e&&this.setOptions({transition:e})}relegate(){const t=this.getStack();return!!t&&t.relegate(this)}resetRotation(){const{visualElement:t}=this.options;if(!t)return;let e=!1;const{latestValues:n}=t;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(e=!0),!e)return;const o={};for(let e=0;e<Ni.length;e++){const r="rotate"+Ni[e];n[r]&&(o[r]=n[r],t.setStaticValue(r,0))}null==t||t.render();for(const e in o)t.setStaticValue(e,o[e]);t.scheduleRender()}getProjectionStyles(t={}){var e,n,o;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const i=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=Dt(t.pointerEvents)||"",r.transform=i?i(this.latestValues,""):"none",r;const s=this.getLead();if(!this.projectionDelta||!this.layout||!s.target){const e={};return this.options.layoutId&&(e.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,e.pointerEvents=Dt(t.pointerEvents)||""),this.hasProjected&&!yr(this.latestValues)&&(e.transform=i?i({},""):"none",this.hasProjected=!1),e}const a=s.animationValues||s.latestValues;this.applyTransformsToTarget(),r.transform=ji(this.projectionDeltaWithTransform,this.treeScale,a),i&&(r.transform=i(a,r.transform));const{x:l,y:u}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*u.origin}% 0`,s.animationValues?r.opacity=s===this?null!==(o=null!==(n=a.opacity)&&void 0!==n?n:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:a.opacityExit:r.opacity=s===this?void 0!==a.opacity?a.opacity:"":void 0!==a.opacityExit?a.opacityExit:0;for(const t in k){if(void 0===a[t])continue;const{correct:e,applyTo:n}=k[t],o=e(a[t],s);if(n){const t=n.length;for(let e=0;e<t;e++)r[n[e]]=o}else r[t]=o}return this.options.layoutId&&(r.pointerEvents=s===this?Dt(t.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((t=>{var e;return null===(e=t.currentAnimation)||void 0===e?void 0:e.stop()})),this.root.nodes.forEach(Gi),this.root.sharedNodes.clear()}}}function Hi(t){t.updateLayout()}function $i(t){var e,n,o;const r=(null===(e=t.resumeFrom)||void 0===e?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&r&&t.hasListeners("didUpdate")){const{layoutBox:e,measuredBox:n}=t.layout,{animationType:o}=t.options,i=r.source!==t.layout.source;"size"===o?fr((t=>{const n=i?r.measuredBox[t]:r.layoutBox[t],o=er(n);n.min=e[t].min,n.max=n.min+o})):ss(o,r.layoutBox,e)&&fr((t=>{const n=i?r.measuredBox[t]:r.layoutBox[t],o=er(e[t]);n.max=n.min+o}));const s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};rr(s,e,r.layoutBox);const a={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};i?rr(a,t.applyTransform(n,!0),r.measuredBox):rr(a,e,r.layoutBox);const l=!ki(s);let u=!1;if(!t.resumeFrom){const n=t.getClosestProjectingParent();if(n&&!n.resumeFrom){const{snapshot:t,layout:o}=n;if(t&&o){const n=pr();ar(n,r.layoutBox,t.layoutBox);const i=pr();ar(i,e,o.layoutBox),Bi(n,i)||(u=!0)}}}t.notifyListeners("didUpdate",{layout:e,snapshot:r,delta:a,layoutDelta:s,hasLayoutChanged:l,hasRelativeTargetChanged:u})}else t.isLead()&&(null===(o=(n=t.options).onExitComplete)||void 0===o||o.call(n));t.options.transition=void 0}function Yi(t){t.isProjectionDirty||(t.isProjectionDirty=Boolean(t.parent&&t.parent.isProjectionDirty)),t.isTransformDirty||(t.isTransformDirty=Boolean(t.parent&&t.parent.isTransformDirty))}function Xi(t){t.clearSnapshot()}function Gi(t){t.clearMeasurements()}function qi(t){const{visualElement:e}=t.options;(null==e?void 0:e.getProps().onBeforeLayoutMeasure)&&e.notify("BeforeLayoutMeasure"),t.resetTransform()}function Zi(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0}function Ki(t){t.resolveTargetDelta()}function _i(t){t.calcProjection()}function Ji(t){t.resetRotation()}function Qi(t){t.removeLeadSnapshot()}function ts(t,e,n){t.translate=In(e.translate,0,n),t.scale=In(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function es(t,e,n,o){t.min=In(e.min,n.min,o),t.max=In(e.max,n.max,o)}function ns(t){return t.animationValues&&void 0!==t.animationValues.opacityExit}const os={duration:.45,ease:[.4,0,.1,1]};function rs(t,e){let n=t.root;for(let e=t.path.length-1;e>=0;e--)if(Boolean(t.path[e].instance)){n=t.path[e];break}const o=(n&&n!==t.root?n.instance:document).querySelector(`[data-projection-id="${e}"]`);o&&t.mount(o,!0)}function is(t){t.min=Math.round(t.min),t.max=Math.round(t.max)}function ss(t,e,n){return"position"===t||"preserve-aspect"===t&&!nr(Fi(e),Fi(n),.2)}const as=Wi({attachResizeListener:(t,e)=>Ut(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),ls={current:void 0},us=Wi({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!ls.current){const t=new as(0,{});t.mount(window),t.setOptions({layoutScroll:!0}),ls.current=t}return ls.current},resetTransform:(t,e)=>{t.style.transform=void 0!==e?e:"none"},checkIsScrollRoot:t=>Boolean("fixed"===window.getComputedStyle(t).position)}),cs={...Yo,...xe,...Fr,...mi},hs=R(((t,e)=>jt(t,e,cs,li,us)));function ds(t){return A(jt(t,{forwardMotionProps:!1},cs,li,us))}const ps=R(jt);function fs(){const t=(0,o.useRef)(!1);return u((()=>(t.current=!0,()=>{t.current=!1})),[]),t}function ms(){const t=fs(),[e,n]=(0,o.useState)(0),r=(0,o.useCallback)((()=>{t.current&&n(e+1)}),[e]);return[(0,o.useCallback)((()=>Fn.postRender(r)),[r]),e]}class gs extends o.Component{getSnapshotBeforeUpdate(t){const e=this.props.childRef.current;if(e&&t.isPresent&&!this.props.isPresent){const t=this.props.sizeRef.current;t.height=e.offsetHeight||0,t.width=e.offsetWidth||0,t.top=e.offsetTop,t.left=e.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function vs({children:t,isPresent:e}){const n=(0,o.useId)(),r=(0,o.useRef)(null),i=(0,o.useRef)({width:0,height:0,top:0,left:0});return(0,o.useInsertionEffect)((()=>{const{width:t,height:o,top:s,left:a}=i.current;if(e||!r.current||!t||!o)return;r.current.dataset.motionPopId=n;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`\n          [data-motion-pop-id="${n}"] {\n            position: absolute !important;\n            width: ${t}px !important;\n            height: ${o}px !important;\n            top: ${s}px !important;\n            left: ${a}px !important;\n          }\n        `),()=>{document.head.removeChild(l)}}),[e]),o.createElement(gs,{isPresent:e,childRef:r,sizeRef:i},o.cloneElement(t,{ref:r}))}const ys=({children:t,initial:e,isPresent:n,onExitComplete:r,custom:i,presenceAffectsLayout:s,mode:l})=>{const u=b(xs),c=(0,o.useId)(),h=(0,o.useMemo)((()=>({id:c,initial:e,isPresent:n,custom:i,onExitComplete:t=>{u.set(t,!0);for(const t of u.values())if(!t)return;r&&r()},register:t=>(u.set(t,!1),()=>u.delete(t))})),s?void 0:[n]);return(0,o.useMemo)((()=>{u.forEach(((t,e)=>u.set(e,!1)))}),[n]),o.useEffect((()=>{!n&&!u.size&&r&&r()}),[n]),"popLayout"===l&&(t=o.createElement(vs,{isPresent:n},t)),o.createElement(a.Provider,{value:h},t)};function xs(){return new Map}const Es=t=>t.key||"",bs=({children:t,custom:e,initial:n=!0,onExitComplete:r,exitBeforeEnter:i,presenceAffectsLayout:s=!0,mode:a="sync"})=>{i&&(a="wait",ce(!1,"Replace exitBeforeEnter with mode='wait'"));let[l]=ms();const c=(0,o.useContext)(P).forceRender;c&&(l=c);const h=fs(),d=function(t){const e=[];return o.Children.forEach(t,(t=>{(0,o.isValidElement)(t)&&e.push(t)})),e}(t);let p=d;const f=new Set,m=(0,o.useRef)(p),g=(0,o.useRef)(new Map).current,v=(0,o.useRef)(!0);if(u((()=>{v.current=!1,function(t,e){t.forEach((t=>{const n=Es(t);e.set(n,t)}))}(d,g),m.current=p})),se((()=>{v.current=!0,g.clear(),f.clear()})),v.current)return o.createElement(o.Fragment,null,p.map((t=>o.createElement(ys,{key:Es(t),isPresent:!0,initial:!!n&&void 0,presenceAffectsLayout:s,mode:a},t))));p=[...p];const y=m.current.map(Es),x=d.map(Es),E=y.length;for(let t=0;t<E;t++){const e=y[t];-1===x.indexOf(e)&&f.add(e)}return"wait"===a&&f.size&&(p=[]),f.forEach((t=>{if(-1!==x.indexOf(t))return;const n=g.get(t);if(!n)return;const i=y.indexOf(t);p.splice(i,0,o.createElement(ys,{key:Es(n),isPresent:!1,onExitComplete:()=>{g.delete(t),f.delete(t);const e=m.current.findIndex((e=>e.key===t));if(m.current.splice(e,1),!f.size){if(m.current=d,!1===h.current)return;l(),r&&r()}},custom:e,presenceAffectsLayout:s,mode:a},n))})),p=p.map((t=>{const e=t.key;return f.has(e)?t:o.createElement(ys,{key:Es(t),isPresent:!0,presenceAffectsLayout:s,mode:a},t)})),o.createElement(o.Fragment,null,f.size?p:p.map((t=>(0,o.cloneElement)(t))))},ws=(0,o.createContext)(null),Ss=t=>!t.isLayoutDirty&&t.willUpdate(!1);function Ps(){const t=new Set,e=new WeakMap,n=()=>t.forEach(Ss);return{add:o=>{t.add(o),e.set(o,o.addEventListener("willUpdate",n))},remove:o=>{var r;t.delete(o),null===(r=e.get(o))||void 0===r||r(),e.delete(o),n()},dirty:n}}const Vs=t=>!0===t,Cs=({children:t,id:e,inheritId:n,inherit:r=!0})=>{void 0!==n&&(r=n);const i=(0,o.useContext)(P),s=(0,o.useContext)(ws),[a,l]=ms(),u=(0,o.useRef)(null),c=i.id||s;null===u.current&&((t=>Vs(!0===t)||"id"===t)(r)&&c&&(e=e?c+"-"+e:c),u.current={id:e,group:Vs(r)&&i.group||Ps()});const h=(0,o.useMemo)((()=>({...u.current,forceRender:a})),[l]);return o.createElement(P.Provider,{value:h},t)};let Ts=0;const As=({children:t})=>(o.useEffect((()=>{}),[]),o.createElement(Cs,{id:b((()=>"asl-"+Ts++))},t));function Ms({children:t,isValidProp:e,...n}){e&&ft(e),(n={...(0,o.useContext)(r),...n}).isStatic=b((()=>n.isStatic));const i=(0,o.useMemo)((()=>n),[JSON.stringify(n.transition),n.transformPagePoint,n.reducedMotion]);return o.createElement(r.Provider,{value:i},t)}function Rs({children:t,features:e,strict:n=!1}){const[,r]=(0,o.useState)(!Ls(e)),i=(0,o.useRef)(void 0);if(!Ls(e)){const{renderer:t,...n}=e;i.current=t,E(n)}return(0,o.useEffect)((()=>{Ls(e)&&e().then((({renderer:t,...e})=>{E(e),i.current=t,r(!0)}))}),[]),o.createElement(c.Provider,{value:{renderer:i.current,strict:n}},t)}function Ls(t){return"function"==typeof t}const Ds=(0,o.createContext)(null),ks=(0,o.forwardRef)((function({children:t,as:e="ul",axis:n="y",onReorder:r,values:i,...s},a){const l=b((()=>hs(e))),u=[],c=(0,o.useRef)(!1);Boolean(i);const h={axis:n,registerItem:(t,e)=>{e&&-1===u.findIndex((e=>t===e.value))&&(u.push({value:t,layout:e[n]}),u.sort(Fs))},updateOrder:(t,e,n)=>{if(c.current)return;const o=function(t,e,n,o){if(!o)return t;const r=t.findIndex((t=>t.value===e));if(-1===r)return t;const i=o>0?1:-1,s=t[r+i];if(!s)return t;const a=t[r],l=s.layout,u=In(l.min,l.max,.5);return 1===i&&a.layout.max+n>u||-1===i&&a.layout.min+n<u?function([...t],e,n){const o=e<0?t.length+e:e;if(o>=0&&o<t.length){const o=n<0?t.length+n:n,[r]=t.splice(e,1);t.splice(o,0,r)}return t}(t,r,r+i):t}(u,t,e,n);u!==o&&(c.current=!0,r(o.map(Bs).filter((t=>-1!==i.indexOf(t)))))}};return(0,o.useEffect)((()=>{c.current=!1})),o.createElement(l,{...s,ref:a},o.createElement(Ds.Provider,{value:h},t))}));function Bs(t){return t.value}function Fs(t,e){return t.layout.min-e.layout.min}function Os(t){const e=b((()=>wo(t))),{isStatic:n}=(0,o.useContext)(r);if(n){const[,n]=(0,o.useState)(t);(0,o.useEffect)((()=>e.onChange(n)),[])}return e}function js(...t){const e=!Array.isArray(t[0]),n=e?0:-1,o=t[0+n],r=t[1+n],i=t[2+n],s=t[3+n],a=_n(r,i,{mixer:(l=i[0],(t=>"object"==typeof t&&t.mix)(l)?l.mix:void 0),...s});var l;return e?a(o):a}function Is(t,e){const n=Os(e()),o=()=>n.set(e());return o(),function(t,e,n){u((()=>{const n=t.map((t=>t.onChange(e)));return()=>{n.forEach((t=>t())),Mn.update(o)}}))}(t,(()=>Fn.update(o,!1,!0))),n}function Us(t,e,n,o){const r="function"==typeof e?e:js(e,n,o);return Array.isArray(t)?Ns(t,r):Ns([t],(([t])=>r(t)))}function Ns(t,e){const n=b((()=>[]));return Is(t,(()=>{n.length=0;const o=t.length;for(let e=0;e<o;e++)n[e]=t[e].get();return e(n)}))}function zs(t,e=0){return I(t)?t:Os(e)}const Ws=(0,o.forwardRef)((function({children:t,style:e={},value:n,as:r="li",onDrag:i,layout:s=!0,...a},l){const u=b((()=>hs(r))),c=(0,o.useContext)(Ds),h={x:zs(e.x),y:zs(e.y)},d=Us([h.x,h.y],(([t,e])=>t||e?1:"unset")),p=(0,o.useRef)(null);Boolean(c);const{axis:f,registerItem:m,updateOrder:g}=c;return(0,o.useEffect)((()=>{m(n,p.current)}),[c]),o.createElement(u,{drag:f,...a,dragSnapToOrigin:!0,style:{...e,x:h.x,y:h.y,zIndex:d},layout:s,onDrag:(t,e)=>{const{velocity:o}=e;o[f]&&g(n,h[f].get(),o[f]),i&&i(t,e)},onLayoutMeasure:t=>{p.current=t},ref:l},t)})),Hs={Group:ks,Item:Ws},$s={renderer:li,...Yo,...xe},Ys={...$s,...Fr,...mi,projectionNodeConstructor:us};function Xs(t,...e){const n=t.length;return Is(e,(function(){let o="";for(let r=0;r<n;r++)o+=t[r],e[r]&&(o+=e[r].get());return o}))}function Gs(t,e={}){const{isStatic:n}=(0,o.useContext)(r),i=(0,o.useRef)(null),s=Os(I(t)?t.get():t);return(0,o.useMemo)((()=>s.attach(((t,o)=>n?o(t):(i.current&&i.current.stop(),i.current=lo({from:s.get(),to:t,velocity:s.getVelocity(),...e,onUpdate:o}),s.get())))),[JSON.stringify(e)]),function(t,e){u((()=>{if(I(t))return e(t.get()),t.onChange(e)}),[t,e])}(t,(t=>s.set(parseFloat(t)))),s}function qs(t){const e=Os(t.getVelocity());return(0,o.useEffect)((()=>t.velocityUpdateSubscribers.add((t=>{e.set(t)}))),[t]),e}function Zs(t,e){var n;return"string"==typeof t?e?(null!==(n=e[t])&&void 0!==n||(e[t]=document.querySelectorAll(t)),t=e[t]):t=document.querySelectorAll(t):t instanceof Element&&(t=[t]),Array.from(t||[])}Object.create,Object.create;const Ks=new WeakMap;let _s;function Js({target:t,contentRect:e,borderBoxSize:n}){var o;null===(o=Ks.get(t))||void 0===o||o.forEach((o=>{o({target:t,contentSize:e,get size(){return function(t,e){if(e){const{inlineSize:t,blockSize:n}=e[0];return{width:t,height:n}}return t instanceof SVGElement&&"getBBox"in t?t.getBBox():{width:t.offsetWidth,height:t.offsetHeight}}(t,n)}})}))}function Qs(t){t.forEach(Js)}const ta=new Set;let ea;const na=t=>"function"==typeof t,oa=(t,e,n)=>e-t==0?1:(n-t)/(e-t),ra={x:{length:"Width",position:"Left"},y:{length:"Height",position:"Top"}};function ia(t,e,n,o){const r=n[e],{length:i,position:s}=ra[e],a=r.current,l=n.time;r.current=t["scroll"+s],r.scrollLength=t["scroll"+i]-t["client"+i],r.offset.length=0,r.offset[0]=0,r.offset[1]=r.scrollLength,r.progress=oa(0,r.scrollLength,r.current);const u=o-l;var c,h;r.velocity=u>50?0:(c=r.current-a,(h=u)?c*(1e3/h):0)}const sa=t=>t,aa=(t,e,n)=>-n*t+n*e+t;function la(t,e){const n=t[t.length-1];for(let o=1;o<=e;o++){const r=oa(0,e,o);t.push(aa(n,1,r))}}function ua(t){const e=[0];return la(e,t-1),e}const ca=t=>"number"==typeof t;function ha(t,e=ua(t.length),n=sa){const o=t.length,r=o-e.length;return r>0&&la(e,r),r=>{let i=0;for(;i<o-2&&!(r<e[i+1]);i++);let s=(0,1,a=oa(e[i],e[i+1],r),Math.min(Math.max(a,0),1));var a;return s=function(t,e){return(t=>Array.isArray(t)&&!ca(t[0]))(t)?t[((t,e,n)=>{const o=e-0;return((n-0)%o+o)%o+0})(0,t.length,e)]:t}(n,i)(s),aa(t[i],t[i+1],s)}}const da={Enter:[[0,1],[1,1]],Exit:[[0,0],[1,0]],Any:[[1,0],[0,1]],All:[[0,0],[1,1]]},pa=t=>"string"==typeof t,fa={start:0,center:.5,end:1};function ma(t,e,n=0){let o=0;if(void 0!==fa[t]&&(t=fa[t]),pa(t)){const e=parseFloat(t);t.endsWith("px")?o=e:t.endsWith("%")?t=e/100:t.endsWith("vw")?o=e/100*document.documentElement.clientWidth:t.endsWith("vh")?o=e/100*document.documentElement.clientHeight:t=e}return ca(t)&&(o=e*t),n+o}const ga=[0,0];function va(t,e,n,o){let r=Array.isArray(t)?t:ga,i=0,s=0;return ca(t)?r=[t,t]:pa(t)&&(r=(t=t.trim()).includes(" ")?t.split(" "):[t,fa[t]?t:"0"]),i=ma(r[0],n,o),s=ma(r[1],e),i-s}const ya={x:0,y:0};function xa(t,e,n,o={}){const r=o.axis||"y";return{measure:()=>function(t,e=t,n){if(n.x.targetOffset=0,n.y.targetOffset=0,e!==t){let o=e;for(;o&&o!=t;)n.x.targetOffset+=o.offsetLeft,n.y.targetOffset+=o.offsetTop,o=o.offsetParent}n.x.targetLength=e===t?e.scrollWidth:e.clientWidth,n.y.targetLength=e===t?e.scrollHeight:e.clientHeight,n.x.containerLength=t.clientWidth,n.y.containerLength=t.clientHeight}(t,o.target,n),update:e=>{!function(t,e,n){ia(t,"x",e,n),ia(t,"y",e,n),e.time=n}(t,n,e),(o.offset||o.target)&&function(t,e,n){let{offset:o=da.All}=n;const{target:r=t,axis:i="y"}=n,s="y"===i?"height":"width",a=r!==t?function(t,e){let n={x:0,y:0},o=t;for(;o&&o!==e;)if(o instanceof HTMLElement)n.x+=o.offsetLeft,n.y+=o.offsetTop,o=o.offsetParent;else if(o instanceof SVGGraphicsElement&&"getBBox"in o){const{top:t,left:e}=o.getBBox();for(n.x+=e,n.y+=t;o&&"svg"!==o.tagName;)o=o.parentNode}return n}(r,t):ya,l=r===t?{width:t.scrollWidth,height:t.scrollHeight}:{width:r.clientWidth,height:r.clientHeight},u={width:t.clientWidth,height:t.clientHeight};e[i].offset.length=0;let c=!e[i].interpolate;const h=o.length;for(let t=0;t<h;t++){const n=va(o[t],u[s],l[s],a[i]);c||n===e[i].interpolatorOffsets[t]||(c=!0),e[i].offset[t]=n}c&&(e[i].interpolate=ha(ua(h),e[i].offset),e[i].interpolatorOffsets=[...e[i].offset]),e[i].progress=e[i].interpolate(e[i].current)}(t,n,o)},notify:na(e)?()=>e(n):(i=e,s=n[r],i.pause(),i.forEachNative(((t,{easing:e})=>{var n,o;if(t.updateDuration)e||(t.easing=sa),t.updateDuration(1);else{const r={duration:1e3};e||(r.easing="linear"),null===(o=null===(n=t.effect)||void 0===n?void 0:n.updateTiming)||void 0===o||o.call(n,r)}})),()=>{i.currentTime=s.progress})};var i,s}const Ea=new WeakMap,ba=new WeakMap,wa=new WeakMap,Sa=t=>t===document.documentElement?window:t;function Pa(t,e={}){var{container:n=document.documentElement}=e,o=function(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(t);r<o.length;r++)e.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(t,o[r])&&(n[o[r]]=t[o[r]])}return n}(e,["container"]);let r=wa.get(n);r||(r=new Set,wa.set(n,r));const i=xa(n,t,{time:0,x:{current:0,offset:[],progress:0,scrollLength:0,targetOffset:0,targetLength:0,containerLength:0,velocity:0},y:{current:0,offset:[],progress:0,scrollLength:0,targetOffset:0,targetLength:0,containerLength:0,velocity:0}},o);if(r.add(i),!Ea.has(n)){const t=()=>{const t=performance.now();for(const t of r)t.measure();for(const e of r)e.update(t);for(const t of r)t.notify()};Ea.set(n,t);const e=Sa(n);window.addEventListener("resize",t,{passive:!0}),n!==document.documentElement&&ba.set(n,(l=t,na(a=n)?(s=a,ta.add(s),ea||(ea=()=>{const t={width:window.innerWidth,height:window.innerHeight},e={target:window,size:t,contentSize:t};ta.forEach((t=>t(e)))},window.addEventListener("resize",ea)),()=>{ta.delete(s),!ta.size&&ea&&(ea=void 0)}):function(t,e){_s||"undefined"!=typeof ResizeObserver&&(_s=new ResizeObserver(Qs));const n=Zs(t);return n.forEach((t=>{let n=Ks.get(t);n||(n=new Set,Ks.set(t,n)),n.add(e),null==_s||_s.observe(t)})),()=>{n.forEach((t=>{const n=Ks.get(t);null==n||n.delete(e),(null==n?void 0:n.size)||null==_s||_s.unobserve(t)}))}}(a,l))),e.addEventListener("scroll",t,{passive:!0})}var s,a,l;const u=Ea.get(n),c=requestAnimationFrame(u);return()=>{var e;"function"!=typeof t&&t.stop(),cancelAnimationFrame(c);const o=wa.get(n);if(!o)return;if(o.delete(i),o.size)return;const r=Ea.get(n);Ea.delete(n),r&&(Sa(n).removeEventListener("scroll",r),null===(e=ba.get(n))||void 0===e||e(),window.removeEventListener("resize",r))}}const Va=()=>({scrollX:wo(0),scrollY:wo(0),scrollXProgress:wo(0),scrollYProgress:wo(0)});function Ca({container:t,target:e,layoutEffect:n=!0,...r}={}){const i=b(Va);return(n?u:o.useEffect)((()=>Pa((({x:t,y:e})=>{i.scrollX.set(t.current),i.scrollXProgress.set(t.progress),i.scrollY.set(e.current),i.scrollYProgress.set(e.progress)}),{...r,container:(null==t?void 0:t.current)||void 0,target:(null==e?void 0:e.current)||void 0})),[]),i}function Ta(t){return ce(!1,"useElementScroll is deprecated. Convert to useScroll({ container: ref })."),Ca({container:t})}function Aa(){return ce(!1,"useViewportScroll is deprecated. Convert to useScroll()."),Ca()}function Ma(t){const e=(0,o.useRef)(0),{isStatic:n}=(0,o.useContext)(r);(0,o.useEffect)((()=>{if(n)return;const o=({timestamp:n,delta:o})=>{e.current||(e.current=n),t(n-e.current,o)};return Fn.update(o,!0),()=>Mn.update(o)}),[t])}function Ra(){const t=Os(0);return Ma((e=>t.set(e))),t}class La extends bo{constructor(){super(...arguments),this.members=[],this.transforms=new Set}add(t){let e;O.has(t)?(this.transforms.add(t),e="transform"):t.startsWith("origin")||W(t)||"willChange"===t||(e=St(t)),e&&(yo(this.members,e),this.update())}remove(t){O.has(t)?(this.transforms.delete(t),this.transforms.size||xo(this.members,"transform")):xo(this.members,St(t)),this.update()}update(){this.set(this.members.length?this.members.join(", "):"auto")}}function Da(){return b((()=>new La("auto")))}function ka(){!_r.current&&Jr();const[t]=(0,o.useState)(Kr.current);return t}function Ba(){const t=ka(),{reducedMotion:e}=(0,o.useContext)(r);return"never"!==e&&("always"===e||t)}function Fa(){let t=!1;const e=[],n=new Set,o={subscribe:t=>(n.add(t),()=>{n.delete(t)}),start(o,r){if(t){const t=[];return n.forEach((e=>{t.push(Oo(e,o,{transitionOverride:r}))})),Promise.all(t)}return new Promise((t=>{e.push({animation:[o,r],resolve:t})}))},set:t=>n.forEach((e=>{!function(t,e){Array.isArray(e)?Lo(t,e):"string"==typeof e?Lo(t,[e]):Ro(t,e)}(e,t)})),stop(){n.forEach((t=>{!function(t){t.values.forEach((t=>t.stop()))}(t)}))},mount:()=>(t=!0,e.forEach((({animation:t,resolve:e})=>{o.start(...t).then(e)})),()=>{t=!1,o.stop()})};return o}function Oa(){const t=b(Fa);return(0,o.useEffect)(t.mount,[]),t}const ja=Oa,Ia=(t,e,n)=>{const o=e-t;return((n-t)%o+o)%o+t};function Ua(...t){const e=(0,o.useRef)(0),[n,r]=(0,o.useState)(t[e.current]);return[n,(0,o.useCallback)((n=>{e.current="number"!=typeof n?Ia(0,t.length,e.current+1):n,r(t[e.current])}),[t.length,...t])]}const Na={any:0,all:1};function za(t,{root:e,margin:n,amount:r,once:i=!1}={}){const[s,a]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(!t.current||i&&s)return;const o={root:e&&e.current||void 0,margin:n,amount:"some"===r?"any":r};return function(t,e,{root:n,margin:o,amount:r="any"}={}){if("undefined"==typeof IntersectionObserver)return()=>{};const i=Zs(t),s=new WeakMap,a=new IntersectionObserver((t=>{t.forEach((t=>{const n=s.get(t.target);if(t.isIntersecting!==Boolean(n))if(t.isIntersecting){const n=e(t);na(n)?s.set(t.target,n):a.unobserve(t.target)}else n&&(n(t),s.delete(t.target))}))}),{root:n,rootMargin:o,threshold:"number"==typeof r?r:Na[r]});return i.forEach((t=>a.observe(t))),()=>a.disconnect()}(t.current,(()=>(a(!0),i?void 0:()=>a(!1))),o)}),[e,t,n,i]),s}class Wa{constructor(){this.componentControls=new Set}subscribe(t){return this.componentControls.add(t),()=>this.componentControls.delete(t)}start(t,e){this.componentControls.forEach((n=>{n.start(t.nativeEvent||t,e)}))}}const Ha=()=>new Wa;function $a(){return b(Ha)}function Ya(t){return null!==t&&"object"==typeof t&&T in t}function Xa(t){if(Ya(t))return t[T]}function Ga(){return qa}function qa(t){ls.current&&(ls.current.isUpdating=!1,ls.current.blockUpdate(),t&&t())}function Za(){const[t,e]=ms(),n=Ga();return(0,o.useEffect)((()=>{Fn.postRender((()=>Fn.postRender((()=>yn.current=!1))))}),[e]),e=>{n((()=>{yn.current=!0,t(),e()}))}}function Ka(){return o.useCallback((()=>{const t=ls.current;t&&t.resetTree()}),[])}const _a=()=>({});class Ja extends ni{build(){}measureInstanceViewportBox(){return pr()}resetTransform(){}restoreTransform(){}removeValueFromRenderState(){}renderInstance(){}scrapeMotionValuesFromProps(){return{}}getBaseTargetFromProps(){}readValueFromInstance(t,e,n){return n.initialState[e]||0}sortInstanceNodePosition(){return 0}makeTargetAnimatableFromInstance({transition:t,transitionEnd:e,...n}){return Do(this,n,Bo(n,t||{},this)),{transition:t,transitionEnd:e,...n}}}const Qa=kt({scrapeMotionValuesFromProps:_a,createRenderState:_a});function tl(t){const[e,n]=(0,o.useState)(t),r=Qa({},!1),i=b((()=>new Ja({props:{},visualState:r},{initialState:t})));return(0,o.useEffect)((()=>(i.mount({}),()=>i.unmount())),[i]),(0,o.useEffect)((()=>{i.setProps({onUpdate:t=>{n({...t})}})}),[n,i]),[e,b((()=>t=>Oo(i,t)))]}const el=t=>t>.001?1/t:1e5;let nl=!1;function ol(t){let e=Os(1),n=Os(1);const o=s();return nl=!0,t?(e=t.scaleX||e,n=t.scaleY||n):o&&(e=o.getValue("scaleX",1),n=o.getValue("scaleY",1)),{scaleX:Us(e,el),scaleY:Us(n,el)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,