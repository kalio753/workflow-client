var Remote;(()=>{"use strict";var e,r,t,n,o,a,i,l,u,s,d,f,h,c,p,m,v,g={15428:(e,r,t)=>{var n={"./MenuService":()=>Promise.all([t.e(172),t.e(111),t.e(486)]).then((()=>()=>t(99486))),"./Button":()=>Promise.all([t.e(395),t.e(57),t.e(890),t.e(493),t.e(172),t.e(51),t.e(111),t.e(646),t.e(271),t.e(576)]).then((()=>()=>t(67255)))},o=(e,r)=>(t.R=r,r=t.o(n,e)?n[e]():Promise.resolve().then((()=>{throw new Error('Module "'+e+'" does not exist in container.')})),t.R=void 0,r),a=(e,r)=>{if(t.S){var n="default",o=t.S[n];if(o&&o!==e)throw new Error("Container initialization failed as it has already been initialized with a different share scope");return t.S[n]=e,t.I(n,r)}};t.d(r,{get:()=>o,init:()=>a})}},b={};function y(e){var r=b[e];if(void 0!==r)return r.exports;var t=b[e]={id:e,loaded:!1,exports:{}};return g[e].call(t.exports,t,t.exports,y),t.loaded=!0,t.exports}y.m=g,y.c=b,y.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return y.d(r,{a:r}),r},y.d=(e,r)=>{for(var t in r)y.o(r,t)&&!y.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},y.f={},y.e=e=>Promise.all(Object.keys(y.f).reduce(((r,t)=>(y.f[t](e,r),r)),[])),y.u=e=>e+".bundle.js",y.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),y.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="task-1:",y.l=(t,n,o,a)=>{if(e[t])e[t].push(n);else{var i,l;if(void 0!==o)for(var u=document.getElementsByTagName("script"),s=0;s<u.length;s++){var d=u[s];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==r+o){i=d;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,y.nc&&i.setAttribute("nonce",y.nc),i.setAttribute("data-webpack",r+o),i.src=t),e[t]=[n];var f=(r,n)=>{i.onerror=i.onload=null,clearTimeout(h);var o=e[t];if(delete e[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},h=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),l&&document.head.appendChild(i)}},y.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},y.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{y.S={};var e={},r={};y.I=(t,n)=>{n||(n=[]);var o=r[t];if(o||(o=r[t]={}),!(n.indexOf(o)>=0)){if(n.push(o),e[t])return e[t];y.o(y.S,t)||(y.S[t]={});var a=y.S[t],i="task-1",l=(e,r,t,n)=>{var o=a[e]=a[e]||{},l=o[r];(!l||!l.loaded&&(!n!=!l.eager?n:i>l.from))&&(o[r]={get:t,from:i,eager:!!n})},u=[];return"default"===t&&(l("@ant-design/icons","4.8.0",(()=>Promise.all([y.e(395),y.e(805),y.e(790),y.e(172)]).then((()=>()=>y(91790))))),l("@cyntler/react-doc-viewer","1.10.1",(()=>Promise.all([y.e(609),y.e(172),y.e(648)]).then((()=>()=>y(44609))))),l("@reduxjs/toolkit","1.9.0",(()=>Promise.all([y.e(890),y.e(418),y.e(413)]).then((()=>()=>y(23418))))),l("antd","4.24.3",(()=>Promise.all([y.e(395),y.e(57),y.e(805),y.e(374),y.e(172),y.e(51),y.e(700)]).then((()=>()=>y(51459))))),l("axios","0.27.2",(()=>y.e(669).then((()=>()=>y(9669))))),l("formBuilder","3.8.3",(()=>y.e(389).then((()=>()=>y(32389))))),l("framer-motion","7.6.19",(()=>Promise.all([y.e(293),y.e(172)]).then((()=>()=>y(73293))))),l("jquery-ui-sortable","1.0.0",(()=>Promise.all([y.e(717),y.e(646)]).then((()=>()=>y(20717))))),l("jquery","3.6.1",(()=>y.e(755).then((()=>()=>y(19755))))),l("lodash","4.17.21",(()=>y.e(20).then((()=>()=>y(96486))))),l("react-dom","18.2.0",(()=>Promise.all([y.e(935),y.e(172)]).then((()=>()=>y(73935))))),l("react-redux","8.0.5",(()=>Promise.all([y.e(416),y.e(172),y.e(51),y.e(831)]).then((()=>()=>y(86706))))),l("react-router-dom","6.4.3",(()=>Promise.all([y.e(818),y.e(172)]).then((()=>()=>y(49818))))),l("react","18.2.0",(()=>y.e(294).then((()=>()=>y(67294)))))),e[t]=u.length?Promise.all(u).then((()=>e[t]=1)):1}}})(),(()=>{var e;y.g.importScripts&&(e=y.g.location+"");var r=y.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),y.p=e})(),t=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),n=t[1]?r(t[1]):[];return t[2]&&(n.length++,n.push.apply(n,r(t[2]))),t[3]&&(n.push([]),n.push.apply(n,r(t[3]))),n},n=(e,r)=>{e=t(e),r=t(r);for(var n=0;;){if(n>=e.length)return n<r.length&&"u"!=(typeof r[n])[0];var o=e[n],a=(typeof o)[0];if(n>=r.length)return"u"==a;var i=r[n],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&o!=i)return o<i;n++}},o=e=>{var r=e[0],t="";if(1===e.length)return"*";if(r+.5){t+=0==r?">=":-1==r?"<":1==r?"^":2==r?"~":r>0?"=":"!=";for(var n=1,a=1;a<e.length;a++)n--,t+="u"==(typeof(l=e[a]))[0]?"-":(n>0?".":"")+(n=2,l);return t}var i=[];for(a=1;a<e.length;a++){var l=e[a];i.push(0===l?"not("+u()+")":1===l?"("+u()+" || "+u()+")":2===l?i.pop()+" "+i.pop():o(l))}return u();function u(){return i.pop().replace(/^\((.+)\)$/,"$1")}},a=(e,r)=>{if(0 in e){r=t(r);var n=e[0],o=n<0;o&&(n=-n-1);for(var i=0,l=1,u=!0;;l++,i++){var s,d,f=l<e.length?(typeof e[l])[0]:"";if(i>=r.length||"o"==(d=(typeof(s=r[i]))[0]))return!u||("u"==f?l>n&&!o:""==f!=o);if("u"==d){if(!u||"u"!=f)return!1}else if(u)if(f==d)if(l<=n){if(s!=e[l])return!1}else{if(o?s>e[l]:s<e[l])return!1;s!=e[l]&&(u=!1)}else if("s"!=f&&"n"!=f){if(o||l<=n)return!1;u=!1,l--}else{if(l<=n||d<f!=o)return!1;u=!1}else"s"!=f&&"n"!=f&&(u=!1,l--)}}var h=[],c=h.pop.bind(h);for(i=1;i<e.length;i++){var p=e[i];h.push(1==p?c()|c():2==p?c()&c():p?a(p,r):!c())}return!!c()},i=(e,r)=>{var t=e[r];return Object.keys(t).reduce(((e,r)=>!e||!t[e].loaded&&n(e,r)?r:e),0)},l=(e,r,t,n)=>"Unsatisfied version "+t+" from "+(t&&e[r][t].from)+" of shared singleton module "+r+" (required "+o(n)+")",u=(e,r,t,n)=>{var o=i(e,t);return a(n,o)||"undefined"!=typeof console&&console.warn&&console.warn(l(e,t,o,n)),d(e[t][o])},s=(e,r,t)=>{var o=e[r];return(r=Object.keys(o).reduce(((e,r)=>!a(t,r)||e&&!n(e,r)?e:r),0))&&o[r]},d=e=>(e.loaded=1,e.get()),h=(f=e=>function(r,t,n,o){var a=y.I(r);return a&&a.then?a.then(e.bind(e,r,y.S[r],t,n,o)):e(r,y.S[r],t,n,o)})(((e,r,t,n,o)=>r&&y.o(r,t)?u(r,0,t,n):o())),c=f(((e,r,t,n,o)=>{var a=r&&y.o(r,t)&&s(r,t,n);return a?d(a):o()})),p={},m={28416:()=>h("default","react",[1,18,2,0],(()=>y.e(294).then((()=>()=>y(67294))))),31051:()=>h("default","react-dom",[1,18,2,0],(()=>y.e(935).then((()=>()=>y(73935))))),46646:()=>c("default","jquery",[1,3,6,0],(()=>y.e(755).then((()=>()=>y(19755))))),60414:()=>c("default","react-router-dom",[1,6,3,0],(()=>y.e(818).then((()=>()=>y(49818))))),97432:()=>c("default","antd",[1,4,22,5],(()=>Promise.all([y.e(395),y.e(57),y.e(805),y.e(374),y.e(51),y.e(532)]).then((()=>()=>y(51459))))),15605:()=>c("default","@ant-design/icons",[1,4,7,0],(()=>Promise.all([y.e(805),y.e(790)]).then((()=>()=>y(91790))))),21745:()=>c("default","framer-motion",[1,7,6,19],(()=>y.e(293).then((()=>()=>y(73293))))),29539:()=>c("default","jquery-ui-sortable",[1,1,0,0],(()=>y.e(717).then((()=>()=>y(20717))))),34627:()=>c("default","formBuilder",[1,3,8,3],(()=>y.e(389).then((()=>()=>y(32389))))),44439:()=>c("default","lodash",[1,4,17,21],(()=>y.e(20).then((()=>()=>y(96486))))),65564:()=>c("default","axios",[2,0,27,2],(()=>y.e(669).then((()=>()=>y(9669))))),78802:()=>c("default","@cyntler/react-doc-viewer",[1,1,6,1],(()=>Promise.all([y.e(609),y.e(706)]).then((()=>()=>y(44609))))),83317:()=>c("default","@reduxjs/toolkit",[1,1,8,5],(()=>y.e(418).then((()=>()=>y(23418))))),95694:()=>c("default","react-redux",[1,8,0,2],(()=>y.e(416).then((()=>()=>y(86706)))))},v={51:[31051],111:[60414,97432],172:[28416],271:[15605,21745,29539,34627,44439,65564,78802,83317],576:[95694],646:[46646]},y.f.consumes=(e,r)=>{y.o(v,e)&&v[e].forEach((e=>{if(y.o(p,e))return r.push(p[e]);var t=r=>{p[e]=0,y.m[e]=t=>{delete y.c[e],t.exports=r()}},n=r=>{delete p[e],y.m[e]=t=>{throw delete y.c[e],r}};try{var o=m[e]();o.then?r.push(p[e]=o.then(t).catch(n)):t(o)}catch(e){n(e)}}))},(()=>{y.b=document.baseURI||self.location.href;var e={41:0};y.f.j=(r,t)=>{var n=y.o(e,r)?e[r]:void 0;if(0!==n)if(n)t.push(n[2]);else if(/^(111|172|51|646)$/.test(r))e[r]=0;else{var o=new Promise(((t,o)=>n=e[r]=[t,o]));t.push(n[2]=o);var a=y.p+y.u(r),i=new Error;y.l(a,(t=>{if(y.o(e,r)&&(0!==(n=e[r])&&(e[r]=void 0),n)){var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;i.message="Loading chunk "+r+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+r,r)}};var r=(r,t)=>{var n,o,[a,i,l]=t,u=0;if(a.some((r=>0!==e[r]))){for(n in i)y.o(i,n)&&(y.m[n]=i[n]);l&&l(y)}for(r&&r(t);u<a.length;u++)o=a[u],y.o(e,o)&&e[o]&&e[o][0](),e[o]=0},t=self.webpackChunktask_1=self.webpackChunktask_1||[];t.forEach(r.bind(null,0)),t.push=r.bind(null,t.push.bind(t))})(),y.nc=void 0;var w=y(15428);Remote=w})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,