/*! For license information please see 609.bundle.js.LICENSE.txt */
(self.webpackChunktask_1=self.webpackChunktask_1||[]).push([[609],{44609:(e,t,r)=>{"use strict";r.r(t),r.d(t,{DocViewerRenderers:()=>xo,arrayBufferFileLoader:()=>ir,binaryStringFileLoader:()=>lr,dataURLFileLoader:()=>or,default:()=>Po,defaultFileLoader:()=>ur,textFileLoader:()=>sr});var n=r(28416),a=r.n(n),i=r(59864),o=r(96774),s=r.n(o);const l=function(e){function t(e,n,l,u,d){for(var h,p,v,m,_,w=0,A=0,k=0,x=0,E=0,I=0,D=v=h=0,M=0,N=0,j=0,B=0,U=l.length,q=U-1,z="",W="",G="",H="";M<U;){if(p=l.charCodeAt(M),M===q&&0!==A+x+k+w&&(0!==A&&(p=47===A?10:47),x=k=w=0,U++,q++),0===A+x+k+w){if(M===q&&(0<N&&(z=z.replace(f,"")),0<z.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:z+=l.charAt(M)}p=59}switch(p){case 123:for(h=(z=z.trim()).charCodeAt(0),v=1,B=++M;M<U;){switch(p=l.charCodeAt(M)){case 123:v++;break;case 125:v--;break;case 47:switch(p=l.charCodeAt(M+1)){case 42:case 47:e:{for(D=M+1;D<q;++D)switch(l.charCodeAt(D)){case 47:if(42===p&&42===l.charCodeAt(D-1)&&M+2!==D){M=D+1;break e}break;case 10:if(47===p){M=D+1;break e}}M=D}}break;case 91:p++;case 40:p++;case 34:case 39:for(;M++<q&&l.charCodeAt(M)!==p;);}if(0===v)break;M++}if(v=l.substring(B,M),0===h&&(h=(z=z.replace(c,"").trim()).charCodeAt(0)),64===h){switch(0<N&&(z=z.replace(f,"")),p=z.charCodeAt(1)){case 100:case 109:case 115:case 45:N=n;break;default:N=O}if(B=(v=t(n,N,v,p,d+1)).length,0<F&&(_=s(3,v,N=r(O,z,j),n,C,P,B,p,d,u),z=N.join(""),void 0!==_&&0===(B=(v=_.trim()).length)&&(p=0,v="")),0<B)switch(p){case 115:z=z.replace(S,o);case 100:case 109:case 45:v=z+"{"+v+"}";break;case 107:v=(z=z.replace(y,"$1 $2"))+"{"+v+"}",v=1===R||2===R&&i("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=z+v,112===u&&(W+=v,v="")}else v=""}else v=t(n,r(n,z,j),v,u,d+1);G+=v,v=j=N=D=h=0,z="",p=l.charCodeAt(++M);break;case 125:case 59:if(1<(B=(z=(0<N?z.replace(f,""):z).trim()).length))switch(0===D&&(h=z.charCodeAt(0),45===h||96<h&&123>h)&&(B=(z=z.replace(" ",":")).length),0<F&&void 0!==(_=s(1,z,n,e,C,P,W.length,u,d,u))&&0===(B=(z=_.trim()).length)&&(z="\0\0"),h=z.charCodeAt(0),p=z.charCodeAt(1),h){case 0:break;case 64:if(105===p||99===p){H+=z+l.charAt(M);break}default:58!==z.charCodeAt(B-1)&&(W+=a(z,h,p,z.charCodeAt(2)))}j=N=D=h=0,z="",p=l.charCodeAt(++M)}}switch(p){case 13:case 10:47===A?A=0:0===1+h&&107!==u&&0<z.length&&(N=1,z+="\0"),0<F*L&&s(0,z,n,e,C,P,W.length,u,d,u),P=1,C++;break;case 59:case 125:if(0===A+x+k+w){P++;break}default:switch(P++,m=l.charAt(M),p){case 9:case 32:if(0===x+w+A)switch(E){case 44:case 58:case 9:case 32:m="";break;default:32!==p&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===x+A+w&&(N=j=1,m="\f"+m);break;case 108:if(0===x+A+w+T&&0<D)switch(M-D){case 2:112===E&&58===l.charCodeAt(M-3)&&(T=E);case 8:111===I&&(T=I)}break;case 58:0===x+A+w&&(D=M);break;case 44:0===A+k+x+w&&(N=1,m+="\r");break;case 34:case 39:0===A&&(x=x===p?0:0===x?p:x);break;case 91:0===x+A+k&&w++;break;case 93:0===x+A+k&&w--;break;case 41:0===x+A+w&&k--;break;case 40:0===x+A+w&&(0===h&&(2*E+3*I==533||(h=1)),k++);break;case 64:0===A+k+x+w+D+v&&(v=1);break;case 42:case 47:if(!(0<x+w+k))switch(A){case 0:switch(2*p+3*l.charCodeAt(M+1)){case 235:A=47;break;case 220:B=M,A=42}break;case 42:47===p&&42===E&&B+2!==M&&(33===l.charCodeAt(B+2)&&(W+=l.substring(B,M+1)),m="",A=0)}}0===A&&(z+=m)}I=E,E=p,M++}if(0<(B=W.length)){if(N=n,0<F&&void 0!==(_=s(2,W,N,e,C,P,B,u,d,u))&&0===(W=_).length)return H+W+G;if(W=N.join(",")+"{"+W+"}",0!=R*T){switch(2!==R||i(W,2)||(T=0),T){case 111:W=W.replace(b,":-moz-$1")+W;break;case 112:W=W.replace(g,"::-webkit-input-$1")+W.replace(g,"::-moz-$1")+W.replace(g,":-ms-input-$1")+W}T=0}}return H+W+G}function r(e,t,r){var a=t.trim().split(v);t=a;var i=a.length,o=e.length;switch(o){case 0:case 1:var s=0;for(e=0===o?"":e[0]+" ";s<i;++s)t[s]=n(e,t[s],r).trim();break;default:var l=s=0;for(t=[];s<i;++s)for(var u=0;u<o;++u)t[l++]=n(e[u]+" ",a[s],r).trim()}return t}function n(e,t,r){var n=t.charCodeAt(0);switch(33>n&&(n=(t=t.trim()).charCodeAt(0)),n){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*r&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function a(e,t,r,n){var o=e+";",s=2*t+3*r+4*n;if(944===s){e=o.indexOf(":",9)+1;var l=o.substring(e,o.length-1).trim();return l=o.substring(0,e).trim()+l+";",1===R||2===R&&i(l,1)?"-webkit-"+l+l:l}if(0===R||2===R&&!i(o,1))return o;switch(s){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(E,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(l=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+l+o;case 1005:return h.test(o)?o.replace(d,":-webkit-")+o.replace(d,":-moz-")+o:o;case 1e3:switch(t=(l=o.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=o.replace(_,"tb");break;case 232:l=o.replace(_,"tb-rl");break;case 220:l=o.replace(_,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+l+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(t=(o=e).length-10,s=(l=(33===o.charCodeAt(t)?o.substring(0,t):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:o=o.replace(l,"-webkit-"+l)+";"+o;break;case 207:case 102:o=o.replace(l,"-webkit-"+(102<s?"inline-":"")+"box")+";"+o.replace(l,"-webkit-"+l)+";"+o.replace(l,"-ms-"+l+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return l=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+l+"-ms-flex-"+l+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(A,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(A,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?a(e.replace("stretch","fill-available"),t,r,n).replace(":fill-available",":stretch"):o.replace(l,"-webkit-"+l)+o.replace(l,"-moz-"+l.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===r+n&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+o}return o}function i(e,t){var r=e.indexOf(1===t?":":"{"),n=e.substring(0,3!==t?r:10);return r=e.substring(r+1,e.length-1),D(2!==t?n:n.replace(k,"$1"),r,t)}function o(e,t){var r=a(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return r!==t+";"?r.replace(w," or ($1)").substring(4):"("+t+")"}function s(e,t,r,n,a,i,o,s,l,c){for(var f,d=0,h=t;d<F;++d)switch(f=I[d].call(u,e,h,r,n,a,i,o,s,l,c)){case void 0:case!1:case!0:case null:break;default:h=f}if(h!==t)return h}function l(e){return void 0!==(e=e.prefix)&&(D=null,e?"function"!=typeof e?R=1:(R=2,D=e):R=0),l}function u(e,r){var n=e;if(33>n.charCodeAt(0)&&(n=n.trim()),n=[n],0<F){var a=s(-1,r,n,n,C,P,0,0,0,0);void 0!==a&&"string"==typeof a&&(r=a)}var i=t(O,n,r,0,0);return 0<F&&void 0!==(a=s(-2,i,n,n,C,P,i.length,0,0,0))&&(i=a),T=0,P=C=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,h=/zoo|gra/,p=/([,: ])(transform)/g,v=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,_=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,A=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,P=1,C=1,T=0,R=1,O=[],I=[],F=0,D=null,L=0;return u.use=function e(t){switch(t){case void 0:case null:F=I.length=0;break;default:if("function"==typeof t)I[F++]=t;else if("object"==typeof t)for(var r=0,n=t.length;r<n;++r)e(t[r]);else L=0|!!t}return e},u.set=l,void 0!==e&&l(e),u},u={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var c=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const f=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(r=e,c.test(r)||111===r.charCodeAt(0)&&110===r.charCodeAt(1)&&r.charCodeAt(2)<91)),t[e];var r}}();var d=r(8679),h=r.n(d);function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var v=function(e,t){for(var r=[e[0]],n=0,a=t.length;n<a;n+=1)r.push(t[n],e[n+1]);return r},m=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,i.typeOf)(e)},y=Object.freeze([]),g=Object.freeze({});function b(e){return"function"==typeof e}function _(e){return e.displayName||e.name||"Component"}function S(e){return e&&"string"==typeof e.styledComponentId}var w="undefined"!=typeof process&&("MISSING_ENV_VAR".REACT_APP_SC_ATTR||"MISSING_ENV_VAR".SC_ATTR)||"data-styled",A="undefined"!=typeof window&&"HTMLElement"in window,k=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY?"false"!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&"false"!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".SC_DISABLE_SPEEDY);function x(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(r.length>0?" Args: "+r.join(", "):""))}var E=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,r=0;r<e;r++)t+=this.groupSizes[r];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var r=this.groupSizes,n=r.length,a=n;e>=a;)(a<<=1)<0&&x(16,""+e);this.groupSizes=new Uint32Array(a),this.groupSizes.set(r),this.length=a;for(var i=n;i<a;i++)this.groupSizes[i]=0}for(var o=this.indexOfGroup(e+1),s=0,l=t.length;s<l;s++)this.tag.insertRule(o,t[s])&&(this.groupSizes[e]++,o++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],r=this.indexOfGroup(e),n=r+t;this.groupSizes[e]=0;for(var a=r;a<n;a++)this.tag.deleteRule(r)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var r=this.groupSizes[e],n=this.indexOfGroup(e),a=n+r,i=n;i<a;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),P=new Map,C=new Map,T=1,R=function(e){if(P.has(e))return P.get(e);for(;C.has(T);)T++;var t=T++;return P.set(e,t),C.set(t,e),t},O=function(e){return C.get(e)},I=function(e,t){t>=T&&(T=t+1),P.set(e,t),C.set(t,e)},F="style["+w+'][data-styled-version="5.3.6"]',D=new RegExp("^"+w+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),L=function(e,t,r){for(var n,a=r.split(","),i=0,o=a.length;i<o;i++)(n=a[i])&&e.registerName(t,n)},M=function(e,t){for(var r=(t.textContent||"").split("/*!sc*/\n"),n=[],a=0,i=r.length;a<i;a++){var o=r[a].trim();if(o){var s=o.match(D);if(s){var l=0|parseInt(s[1],10),u=s[2];0!==l&&(I(u,l),L(e,u,s[3]),e.getTag().insertRules(l,n)),n.length=0}else n.push(o)}}},N=function(){return r.nc},j=function(e){var t=document.head,r=e||t,n=document.createElement("style"),a=function(e){for(var t=e.childNodes,r=t.length;r>=0;r--){var n=t[r];if(n&&1===n.nodeType&&n.hasAttribute(w))return n}}(r),i=void 0!==a?a.nextSibling:null;n.setAttribute(w,"active"),n.setAttribute("data-styled-version","5.3.6");var o=N();return o&&n.setAttribute("nonce",o),r.insertBefore(n,i),n},B=function(){function e(e){var t=this.element=j(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,r=0,n=t.length;r<n;r++){var a=t[r];if(a.ownerNode===e)return a}x(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),U=function(){function e(e){var t=this.element=j(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var r=document.createTextNode(t),n=this.nodes[e];return this.element.insertBefore(r,n||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),q=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),z=A,W={isServer:!A,useCSSOMInjection:!k},G=function(){function e(e,t,r){void 0===e&&(e=g),void 0===t&&(t={}),this.options=p({},W,{},e),this.gs=t,this.names=new Map(r),this.server=!!e.isServer,!this.server&&A&&z&&(z=!1,function(e){for(var t=document.querySelectorAll(F),r=0,n=t.length;r<n;r++){var a=t[r];a&&"active"!==a.getAttribute(w)&&(M(e,a),a.parentNode&&a.parentNode.removeChild(a))}}(this))}e.registerId=function(e){return R(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,r){return void 0===r&&(r=!0),new e(p({},this.options,{},t),this.gs,r&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(r=(t=this.options).isServer,n=t.useCSSOMInjection,a=t.target,e=r?new q(a):n?new B(a):new U(a),new E(e)));var e,t,r,n,a},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(R(e),this.names.has(e))this.names.get(e).add(t);else{var r=new Set;r.add(t),this.names.set(e,r)}},t.insertRules=function(e,t,r){this.registerName(e,t),this.getTag().insertRules(R(e),r)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(R(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),r=t.length,n="",a=0;a<r;a++){var i=O(a);if(void 0!==i){var o=e.names.get(i),s=t.getGroup(a);if(o&&s&&o.size){var l=w+".g"+a+'[id="'+i+'"]',u="";void 0!==o&&o.forEach((function(e){e.length>0&&(u+=e+",")})),n+=""+s+l+'{content:"'+u+'"}/*!sc*/\n'}}}return n}(this)},e}(),H=/(a)(d)/gi,V=function(e){return String.fromCharCode(e+(e>25?39:97))};function Y(e){var t,r="";for(t=Math.abs(e);t>52;t=t/52|0)r=V(t%52)+r;return(V(t%52)+r).replace(H,"$1-$2")}var Z=function(e,t){for(var r=t.length;r;)e=33*e^t.charCodeAt(--r);return e},X=function(e){return Z(5381,e)};function K(e){for(var t=0;t<e.length;t+=1){var r=e[t];if(b(r)&&!S(r))return!1}return!0}var J=X("5.3.6"),Q=function(){function e(e,t,r){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===r||r.isStatic)&&K(e),this.componentId=t,this.baseHash=Z(J,t),this.baseStyle=r,G.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,r){var n=this.componentId,a=[];if(this.baseStyle&&a.push(this.baseStyle.generateAndInjectStyles(e,t,r)),this.isStatic&&!r.hash)if(this.staticRulesId&&t.hasNameForId(n,this.staticRulesId))a.push(this.staticRulesId);else{var i=ve(this.rules,e,t,r).join(""),o=Y(Z(this.baseHash,i)>>>0);if(!t.hasNameForId(n,o)){var s=r(i,"."+o,void 0,n);t.insertRules(n,o,s)}a.push(o),this.staticRulesId=o}else{for(var l=this.rules.length,u=Z(this.baseHash,r.hash),c="",f=0;f<l;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var h=ve(d,e,t,r),p=Array.isArray(h)?h.join(""):h;u=Z(u,p+f),c+=p}}if(c){var v=Y(u>>>0);if(!t.hasNameForId(n,v)){var m=r(c,"."+v,void 0,n);t.insertRules(n,v,m)}a.push(v)}}return a.join(" ")},e}(),$=/^\s*\/\/.*$/gm,ee=[":","[",".","#"];function te(e){var t,r,n,a,i=void 0===e?g:e,o=i.options,s=void 0===o?g:o,u=i.plugins,c=void 0===u?y:u,f=new l(s),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(r,n,a,i,o,s,l,u,c,f){switch(r){case 1:if(0===c&&64===n.charCodeAt(0))return e(n+";"),"";break;case 2:if(0===u)return n+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(a[0]+n),"";default:return n+(0===f?"/*|*/":"")}case-2:n.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),p=function(e,n,i){return 0===n&&-1!==ee.indexOf(i[r.length])||i.match(a)?e:"."+t};function v(e,i,o,s){void 0===s&&(s="&");var l=e.replace($,""),u=i&&o?o+" "+i+" { "+l+" }":l;return t=s,r=i,n=new RegExp("\\"+r+"\\b","g"),a=new RegExp("(\\"+r+"\\b){2,}"),f(o||!i?"":i,u)}return f.use([].concat(c,[function(e,t,a){2===e&&a.length&&a[0].lastIndexOf(r)>0&&(a[0]=a[0].replace(n,p))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),v.hash=c.length?c.reduce((function(e,t){return t.name||x(15),Z(e,t.name)}),5381).toString():"",v}var re=a().createContext(),ne=(re.Consumer,a().createContext()),ae=(ne.Consumer,new G),ie=te();function oe(){return(0,n.useContext)(re)||ae}function se(e){var t=(0,n.useState)(e.stylisPlugins),r=t[0],i=t[1],o=oe(),l=(0,n.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),u=(0,n.useMemo)((function(){return te({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,n.useEffect)((function(){s()(r,e.stylisPlugins)||i(e.stylisPlugins)}),[e.stylisPlugins]),a().createElement(re.Provider,{value:l},a().createElement(ne.Provider,{value:u},e.children))}var le=function(){function e(e,t){var r=this;this.inject=function(e,t){void 0===t&&(t=ie);var n=r.name+t.hash;e.hasNameForId(r.id,n)||e.insertRules(r.id,n,t(r.rules,n,"@keyframes"))},this.toString=function(){return x(12,String(r.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ie),this.name+e.hash},e}(),ue=/([A-Z])/,ce=/([A-Z])/g,fe=/^ms-/,de=function(e){return"-"+e.toLowerCase()};function he(e){return ue.test(e)?e.replace(ce,de).replace(fe,"-ms-"):e}var pe=function(e){return null==e||!1===e||""===e};function ve(e,t,r,n){if(Array.isArray(e)){for(var a,i=[],o=0,s=e.length;o<s;o+=1)""!==(a=ve(e[o],t,r,n))&&(Array.isArray(a)?i.push.apply(i,a):i.push(a));return i}return pe(e)?"":S(e)?"."+e.styledComponentId:b(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:ve(e(t),t,r,n):e instanceof le?r?(e.inject(r,n),e.getName(n)):e:m(e)?function e(t,r){var n,a,i=[];for(var o in t)t.hasOwnProperty(o)&&!pe(t[o])&&(Array.isArray(t[o])&&t[o].isCss||b(t[o])?i.push(he(o)+":",t[o],";"):m(t[o])?i.push.apply(i,e(t[o],o)):i.push(he(o)+": "+(n=o,(null==(a=t[o])||"boolean"==typeof a||""===a?"":"number"!=typeof a||0===a||n in u?String(a).trim():a+"px")+";")));return r?[r+" {"].concat(i,["}"]):i}(e):e.toString();var l}var me=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ye(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return b(e)||m(e)?me(ve(v(y,[e].concat(r)))):0===r.length&&1===e.length&&"string"==typeof e[0]?e:me(ve(v(e,r)))}new Set;var ge=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,be=/(^-|-$)/g;function _e(e){return e.replace(ge,"-").replace(be,"")}var Se=function(e){return Y(X(e)>>>0)};function we(e){return"string"==typeof e&&!0}var Ae=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},ke=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function xe(e,t,r){var n=e[r];Ae(t)&&Ae(n)?Ee(n,t):e[r]=t}function Ee(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(var a=0,i=r;a<i.length;a++){var o=i[a];if(Ae(o))for(var s in o)ke(s)&&xe(e,o[s],s)}return e}var Pe=a().createContext();function Ce(e){var t=(0,n.useContext)(Pe),r=(0,n.useMemo)((function(){return function(e,t){return e?b(e)?e(t):Array.isArray(e)||"object"!=typeof e?x(8):t?p({},t,{},e):e:x(14)}(e.theme,t)}),[e.theme,t]);return e.children?a().createElement(Pe.Provider,{value:r},e.children):null}Pe.Consumer;var Te={};function Re(e,t,r){var i=S(e),o=!we(e),s=t.attrs,l=void 0===s?y:s,u=t.componentId,c=void 0===u?function(e,t){var r="string"!=typeof e?"sc":_e(e);Te[r]=(Te[r]||0)+1;var n=r+"-"+Se("5.3.6"+r+Te[r]);return t?t+"-"+n:n}(t.displayName,t.parentComponentId):u,d=t.displayName,v=void 0===d?function(e){return we(e)?"styled."+e:"Styled("+_(e)+")"}(e):d,m=t.displayName&&t.componentId?_e(t.displayName)+"-"+t.componentId:t.componentId||c,w=i&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,A=t.shouldForwardProp;i&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(r,n,a){return e.shouldForwardProp(r,n,a)&&t.shouldForwardProp(r,n,a)}:e.shouldForwardProp);var k,x=new Q(r,m,i?e.componentStyle:void 0),E=x.isStatic&&0===l.length,P=function(e,t){return function(e,t,r,a){var i=e.attrs,o=e.componentStyle,s=e.defaultProps,l=e.foldedComponentIds,u=e.shouldForwardProp,c=e.styledComponentId,d=e.target,h=function(e,t,r){void 0===e&&(e=g);var n=p({},t,{theme:e}),a={};return r.forEach((function(e){var t,r,i,o=e;for(t in b(o)&&(o=o(n)),o)n[t]=a[t]="className"===t?(r=a[t],i=o[t],r&&i?r+" "+i:r||i):o[t]})),[n,a]}(function(e,t,r){return void 0===r&&(r=g),e.theme!==r.theme&&e.theme||t||r.theme}(t,(0,n.useContext)(Pe),s)||g,t,i),v=h[0],m=h[1],y=function(e,t,r,a){var i=oe(),o=(0,n.useContext)(ne)||ie;return t?e.generateAndInjectStyles(g,i,o):e.generateAndInjectStyles(r,i,o)}(o,a,v),_=r,S=m.$as||t.$as||m.as||t.as||d,w=we(S),A=m!==t?p({},t,{},m):t,k={};for(var x in A)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?k.as=A[x]:(u?u(x,f,S):!w||f(x))&&(k[x]=A[x]));return t.style&&m.style!==t.style&&(k.style=p({},t.style,{},m.style)),k.className=Array.prototype.concat(l,c,y!==c?y:null,t.className,m.className).filter(Boolean).join(" "),k.ref=_,(0,n.createElement)(S,k)}(k,e,t,E)};return P.displayName=v,(k=a().forwardRef(P)).attrs=w,k.componentStyle=x,k.displayName=v,k.shouldForwardProp=A,k.foldedComponentIds=i?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):y,k.styledComponentId=m,k.target=i?e.target:e,k.withComponent=function(e){var n=t.componentId,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(t,["componentId"]),i=n&&n+"-"+(we(e)?e:_e(_(e)));return Re(e,p({},a,{attrs:w,componentId:i}),r)},Object.defineProperty(k,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=i?Ee({},e.defaultProps,t):t}}),k.toString=function(){return"."+k.styledComponentId},o&&h()(k,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),k}var Oe,Ie=function(e){return function e(t,r,n){if(void 0===n&&(n=g),!(0,i.isValidElementType)(r))return x(1,String(r));var a=function(){return t(r,n,ye.apply(void 0,arguments))};return a.withConfig=function(a){return e(t,r,p({},n,{},a))},a.attrs=function(a){return e(t,r,p({},n,{attrs:Array.prototype.concat(n.attrs,a).filter(Boolean)}))},a}(Re,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ie[e]=Ie(e)})),Oe=function(e,t){this.rules=e,this.componentId=t,this.isStatic=K(e),G.registerId(this.componentId+1)}.prototype,Oe.createStyles=function(e,t,r,n){var a=n(ve(this.rules,t,r,n).join(""),""),i=this.componentId+e;r.insertRules(i,i,a)},Oe.removeStyles=function(e,t){t.clearRules(this.componentId+e)},Oe.renderStyles=function(e,t,r,n){e>2&&G.registerId(this.componentId+e),this.removeStyles(e,r),this.createStyles(e,t,r,n)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var r=N();return"<style "+[r&&'nonce="'+r+'"',w+'="true"','data-styled-version="5.3.6"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?x(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return x(2);var r=((t={})[w]="",t["data-styled-version"]="5.3.6",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),n=N();return n&&(r.nonce=n),[a().createElement("style",p({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new G({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?x(2):a().createElement(se,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return x(3)}}();const Fe=Ie;var De,Le,Me,Ne,je,Be,Ue={en:JSON.parse('{"documentNavInfo":"Document {{ currentFileNo }} of {{ allFilesCount }}","noRendererMessage":"No renderer for file type: {{ fileType }}","downloadButtonLabel":"Download file","brokenFile":"Your file is broken. Please check it on your machine.","msgPluginRecipients":"Recipients","msgPluginSender":"Sender","pdfPluginLoading":"Loading...","pdfPluginPageNumber":"Page {{ currentPage }}/{{ allPagesCount }}"}'),pl:JSON.parse('{"documentNavInfo":"Dokument {{ currentFileNo }} z {{ allFilesCount }}","noRendererMessage":"Brak funckji renderującej dla: {{ fileType }}","downloadButtonLabel":"Pobierz plik","brokenFile":"Twój plik jest uszkodzony. Sprawdź go na swoim komputerze.","msgPluginRecipients":"Odbiorcy","msgPluginSender":"Nadawca","pdfPluginLoading":"Wczytywanie...","pdfPluginPageNumber":"Strona {{ currentPage }}/{{ allPagesCount }}"}'),es:JSON.parse('{"documentNavInfo":"Documento {{ currentFileNo }} de {{ allFilesCount }}","noRendererMessage":"No hay procesador para el tipo de archivo: {{ fileType }}","downloadButtonLabel":"Descargar archivo","brokenFile":"Tu archivo está roto. Compruébalo en tu máquina.","msgPluginRecipients":"Destinatarios","msgPluginSender":"Remitente","pdfPluginLoading":"Cargando...","pdfPluginPageNumber":"Página {{ página actual }}/{{ allPagesCount }}"}'),de:JSON.parse('{"documentNavInfo":"Dokument {{ currentFileNo }} von {{ allFilesCount }}","noRendererMessage":"Kein Renderer für Dateityp: {{ fileType }}","downloadButtonLabel":"Datei herunterladen","brokenFile":"Ihre Datei ist defekt. Bitte überprüfen Sie sie auf Ihrem Rechner.","msgPluginRecipients":"Empfänger","msgPluginSender":"Absender","pdfPluginLoading":"Wird geladen...","pdfPluginPageNumber":"Seite {{ aktuelleSeite }}/{{ allPagesCount }}"}'),it:JSON.parse('{"documentNavInfo":"Documento {{ currentFileNo }} di {{ allFilesCount }}","noRendererMessage":"Nessun renderer per il tipo di file: {{ fileType }}","downloadButtonLabel":"Scarica file","brokenFile":"Il tuo file è danneggiato. Controllalo sul tuo computer.","msgPluginRecipients":"Destinatari","msgPluginSender":"Mittente","pdfPluginLoading":"Caricamento in corso...","pdfPluginPageNumber":"Pagina {{ currentPage }}/{{ allPagesCount }}"}'),pt:JSON.parse('{"documentNavInfo":"Documento {{ currentFileNo }} de {{ allFilesCount }}","noRendererMessage":"Nenhum renderizador para o tipo de arquivo: {{ fileType }}","downloadButtonLabel":"Baixar arquivo","brokenFile":"Seu arquivo está quebrado. Por favor, verifique-o em sua máquina.","msgPluginRecipients":"Destinatários","msgPluginSender":"Remetente","pdfPluginLoading":"Carregando...","pdfPluginPageNumber":"Página {{ currentPage }}/{{ allPagesCount }}"}'),fr:JSON.parse('{"documentNavInfo":"Document {{ currentFileNo }} de {{ allFilesCount }}","noRendererMessage":"Aucun moteur de rendu pour le type de fichier : {{ fileType }}","downloadButtonLabel":"Télécharger le fichier","brokenFile":"Votre fichier est cassé. Veuillez le vérifier sur votre machine.","msgPluginRecipients":"Destinataires","msgPluginSender":"Expéditeur","pdfPluginLoading":"Chargement...","pdfPluginPageNumber":"Page {{ currentPage }}/{{ allPagesCount }}"}'),ar:JSON.parse('{"documentNavInfo":"مستند {{ currentFileNo }} من {{ allFilesCount }}","noRendererMessage":"{{ fileType }} : لا يمكننا عرض هذا النوع من الملفات","downloadButtonLabel":"تحميل الملف","brokenFile":"الملف تالف، يرجى التحقق منه على جهازك الخاص.","msgPluginRecipients":"المستلمين","msgPluginSender":"المرسل","pdfPluginLoading":"تحميل ...","pdfPluginPageNumber":" {{ allPagesCount }} \\\\ {{ currentPage }} صفحة "}')},qe="SET_ALL_DOCUMENTS",ze="SET_DOCUMENT_LOADING",We=function(e){return{type:ze,value:e}},Ge="NEXT_DOCUMENT",He=function(){return{type:Ge}},Ve="PREVIOUS_DOCUMENT",Ye=function(){return{type:Ve}},Ze="UPDATE_CURRENT_DOCUMENT",Xe=function(e){return{type:Ze,document:e}},Ke="SET_RENDERER_RECT",Je="SET_MAIN_CONFIG",Qe=function(){return Qe=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Qe.apply(this,arguments)},$e={currentFileNo:0,documents:[],documentLoading:!0,currentDocument:void 0,rendererRect:void 0,config:{},pluginRenderers:[],language:"en"},et=function(e,t){switch(void 0===e&&(e=$e),t.type){case qe:var r=t,n=r.documents,a=r.initialActiveDocument;return Qe(Qe({},e),{documents:n,currentDocument:a||n[0]||null,currentFileNo:a&&n.includes(a)?n.indexOf(a):$e.currentFileNo});case ze:var i=t.value;return Qe(Qe({},e),{documentLoading:i});case Ge:if(e.currentFileNo>=e.documents.length-1)return e;var o=e.currentFileNo+1;return Qe(Qe({},e),{currentFileNo:o,currentDocument:e.documents[o],documentLoading:!0});case Ve:if(e.currentFileNo<=0)return e;var s=e.currentFileNo-1;return Qe(Qe({},e),{currentFileNo:e.currentFileNo-1,currentDocument:e.documents[s],documentLoading:!0});case Ze:var l=t.document;return Qe(Qe({},e),{currentDocument:l});case Ke:var u=t.rect;return Qe(Qe({},e),{rendererRect:u});case Je:var c=t.config;return Qe(Qe({},e),{config:c});default:return e}},tt=function(){return tt=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},tt.apply(this,arguments)},rt=(0,n.createContext)({state:$e,dispatch:function(){return null}}),nt=function(e){var t,r=e.children,i=e.documents,o=e.config,s=e.pluginRenderers,l=e.prefetchMethod,u=e.requestHeaders,c=e.initialActiveDocument,f=e.language,d=(0,n.useReducer)(et,tt(tt({},$e),{documents:i||[],currentDocument:i&&i.length?c||i[0]:void 0,config:o,pluginRenderers:s,prefetchMethod:l,requestHeaders:u,currentFileNo:c&&null!==(t=i.findIndex((function(e){return e===c})))&&void 0!==t?t:0,language:f&&Ue[f]?f:"en"})),h=d[0],p=d[1];return(0,n.useEffect)((function(){p(function(e,t){return{type:qe,documents:e,initialActiveDocument:t}}(i,c)),o&&p(function(e){return{type:Je,config:e}}(o))}),[i,o,c]),a().createElement(rt.Provider,{value:{state:h,dispatch:p}},r)},at=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},it=ye(De||(De=at(["\n  background-color: ",";\n  color: ",";\n"],["\n  background-color: ",";\n  color: ",";\n"])),(function(e){return e.theme.primary}),(function(e){return e.theme.textPrimary})),ot=ye(Le||(Le=at(["\n  background-color: ",";\n  color: ",";\n"],["\n  background-color: ",";\n  color: ",";\n"])),(function(e){return e.theme.secondary}),(function(e){return e.theme.textSecondary})),st=Fe.button(Me||(Me=at(["\n  ","\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 35px;\n  height: 35px;\n  padding: 0;\n  margin: 0 0 0 5px;\n  text-align: center;\n  font-size: 18px;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  opacity: ",";\n  pointer-events: ",";\n  box-shadow: 2px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n"],["\n  ","\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 35px;\n  height: 35px;\n  padding: 0;\n  margin: 0 0 0 5px;\n  text-align: center;\n  font-size: 18px;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  opacity: ",";\n  pointer-events: ",";\n  box-shadow: 2px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n"])),it,(function(e){return e.disabled?.4:1}),(function(e){return e.disabled?"none":"all"})),lt=Fe.a(Ne||(Ne=at(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  background-color: ",";\n  color: ",";\n  box-shadow: 2px 2px 3px #00000033;\n\n  width: 35px;\n  height: 35px;\n  font-size: 18px;\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n"],["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  background-color: ",";\n  color: ",";\n  box-shadow: 2px 2px 3px #00000033;\n\n  width: 35px;\n  height: 35px;\n  font-size: 18px;\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n"])),(function(e){return e.theme.primary}),(function(e){return e.theme.textPrimary})),ut=(Fe(st)(je||(je=at([""],[""]))),Fe(st)(Be||(Be=at(["\n  ","\n"],["\n  ","\n"])),ot)),ct=function(){return ct=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},ct.apply(this,arguments)},ft=function(e){return a().createElement(ht,ct({},e))},dt=function(e){return a().createElement(ht,ct({},e,{reverse:!0}))},ht=function(e){var t=e.color,r=e.size,n=e.reverse;return a().createElement("svg",{width:r||"100%",height:r||"100%",style:{transform:"".concat(n?"rotate(180deg)":"")},id:"arrow_left",version:"1.1",viewBox:"0 0 32 32",xmlSpace:"preserve"},a().createElement("path",{clipRule:"evenodd",d:"M31.106,15H3.278l8.325-8.293  c0.391-0.391,0.391-1.024,0-1.414c-0.391-0.391-1.024-0.391-1.414,0l-9.9,9.899c-0.385,0.385-0.385,1.029,0,1.414l9.9,9.9  c0.391,0.391,1.024,0.391,1.414,0c0.391-0.391,0.391-1.024,0-1.414L3.278,17h27.828c0.552,0,1-0.448,1-1  C32.106,15.448,31.658,15,31.106,15z",fill:t||"#aaa",fillRule:"evenodd",id:"Arrow_Back"}))},pt=function(e){var t=e.color,r=e.size;return a().createElement("svg",{width:r||"100%",height:r||"100%",version:"1.1",id:"Icons",viewBox:"0 0 32 32",xmlSpace:"preserve",style:{alignSelf:"center",justifySelf:"center"}},a().createElement("g",null,a().createElement("path",{fill:t||"#aaa",d:"M16,2c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1s1-0.4,1-1V3C17,2.4,16.6,2,16,2z"}),a().createElement("path",{fill:t||"#aaa",d:"M7.5,6.1c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l3.5,3.5c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3c0.4-0.4,0.4-1,0-1.4L7.5,6.1\n\t\tz"}),a().createElement("path",{fill:t||"#aaa",d:"M9,16c0-0.6-0.4-1-1-1H3c-0.6,0-1,0.4-1,1s0.4,1,1,1h5C8.6,17,9,16.6,9,16z"}),a().createElement("path",{fill:t||"#aaa",d:"M9.6,20.9l-3.5,3.5c-0.4,0.4-0.4,1,0,1.4c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3l3.5-3.5c0.4-0.4,0.4-1,0-1.4\n\t\tS10,20.6,9.6,20.9z"}),a().createElement("path",{fill:t||"#aaa",d:"M16,23c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1s1-0.4,1-1v-5C17,23.4,16.6,23,16,23z"}),a().createElement("path",{fill:t||"#aaa",d:"M22.4,20.9c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l3.5,3.5c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3c0.4-0.4,0.4-1,0-1.4\n\t\tL22.4,20.9z"}),a().createElement("path",{fill:t||"#aaa",d:"M29,15h-5c-0.6,0-1,0.4-1,1s0.4,1,1,1h5c0.6,0,1-0.4,1-1S29.6,15,29,15z"}),a().createElement("path",{fill:t||"#aaa",d:"M21.7,11.3c0.3,0,0.5-0.1,0.7-0.3l3.5-3.5c0.4-0.4,0.4-1,0-1.4s-1-0.4-1.4,0l-3.5,3.5c-0.4,0.4-0.4,1,0,1.4\n\t\tC21.1,11.2,21.4,11.3,21.7,11.3z"})))},vt=Object.prototype.toString,mt=Array.isArray||function(e){return"[object Array]"===vt.call(e)};function yt(e){return"function"==typeof e}function gt(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function bt(e,t){return null!=e&&"object"==typeof e&&t in e}var _t=RegExp.prototype.test,St=/\S/;var wt={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},At=/\s*/,kt=/\s+/,xt=/\s*=/,Et=/\s*\}/,Pt=/#|\^|\/|>|\{|&|=|!/;function Ct(e){this.string=e,this.tail=e,this.pos=0}function Tt(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function Rt(){this.templateCache={_cache:{},set:function(e,t){this._cache[e]=t},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}Ct.prototype.eos=function(){return""===this.tail},Ct.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var r=t[0];return this.tail=this.tail.substring(r.length),this.pos+=r.length,r},Ct.prototype.scanUntil=function(e){var t,r=this.tail.search(e);switch(r){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,r),this.tail=this.tail.substring(r)}return this.pos+=t.length,t},Tt.prototype.push=function(e){return new Tt(e,this)},Tt.prototype.lookup=function(e){var t,r,n,a=this.cache;if(a.hasOwnProperty(e))t=a[e];else{for(var i,o,s,l=this,u=!1;l;){if(e.indexOf(".")>0)for(i=l.view,o=e.split("."),s=0;null!=i&&s<o.length;)s===o.length-1&&(u=bt(i,o[s])||(r=i,n=o[s],null!=r&&"object"!=typeof r&&r.hasOwnProperty&&r.hasOwnProperty(n))),i=i[o[s++]];else i=l.view[e],u=bt(l.view,e);if(u){t=i;break}l=l.parent}a[e]=t}return yt(t)&&(t=t.call(this.view)),t},Rt.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},Rt.prototype.parse=function(e,t){var r=this.templateCache,n=e+":"+(t||Ot.tags).join(":"),a=void 0!==r,i=a?r.get(n):void 0;return null==i&&(i=function(e,t){if(!e)return[];var r,n,a,i,o=!1,s=[],l=[],u=[],c=!1,f=!1,d="",h=0;function p(){if(c&&!f)for(;u.length;)delete l[u.pop()];else u=[];c=!1,f=!1}function v(e){if("string"==typeof e&&(e=e.split(kt,2)),!mt(e)||2!==e.length)throw new Error("Invalid tags: "+e);r=new RegExp(gt(e[0])+"\\s*"),n=new RegExp("\\s*"+gt(e[1])),a=new RegExp("\\s*"+gt("}"+e[1]))}v(t||Ot.tags);for(var m,y,g,b,_,S,w=new Ct(e);!w.eos();){if(m=w.pos,g=w.scanUntil(r))for(var A=0,k=g.length;A<k;++A)i=b=g.charAt(A),function(e,t){return _t.call(e,t)}(St,i)?(f=!0,o=!0,d+=" "):(u.push(l.length),d+=b),l.push(["text",b,m,m+1]),m+=1,"\n"===b&&(p(),d="",h=0,o=!1);if(!w.scan(r))break;if(c=!0,y=w.scan(Pt)||"name",w.scan(At),"="===y?(g=w.scanUntil(xt),w.scan(xt),w.scanUntil(n)):"{"===y?(g=w.scanUntil(a),w.scan(Et),w.scanUntil(n),y="&"):g=w.scanUntil(n),!w.scan(n))throw new Error("Unclosed tag at "+w.pos);if(_=">"==y?[y,g,m,w.pos,d,h,o]:[y,g,m,w.pos],h++,l.push(_),"#"===y||"^"===y)s.push(_);else if("/"===y){if(!(S=s.pop()))throw new Error('Unopened section "'+g+'" at '+m);if(S[1]!==g)throw new Error('Unclosed section "'+S[1]+'" at '+m)}else"name"===y||"{"===y||"&"===y?f=!0:"="===y&&v(g)}if(p(),S=s.pop())throw new Error('Unclosed section "'+S[1]+'" at '+w.pos);return function(e){for(var t,r=[],n=r,a=[],i=0,o=e.length;i<o;++i)switch((t=e[i])[0]){case"#":case"^":n.push(t),a.push(t),n=t[4]=[];break;case"/":a.pop()[5]=t[2],n=a.length>0?a[a.length-1][4]:r;break;default:n.push(t)}return r}(function(e){for(var t,r,n=[],a=0,i=e.length;a<i;++a)(t=e[a])&&("text"===t[0]&&r&&"text"===r[0]?(r[1]+=t[1],r[3]=t[3]):(n.push(t),r=t));return n}(l))}(e,t),a&&r.set(n,i)),i},Rt.prototype.render=function(e,t,r,n){var a=this.getConfigTags(n),i=this.parse(e,a),o=t instanceof Tt?t:new Tt(t,void 0);return this.renderTokens(i,o,r,e,n)},Rt.prototype.renderTokens=function(e,t,r,n,a){for(var i,o,s,l="",u=0,c=e.length;u<c;++u)s=void 0,"#"===(o=(i=e[u])[0])?s=this.renderSection(i,t,r,n,a):"^"===o?s=this.renderInverted(i,t,r,n,a):">"===o?s=this.renderPartial(i,t,r,a):"&"===o?s=this.unescapedValue(i,t):"name"===o?s=this.escapedValue(i,t,a):"text"===o&&(s=this.rawValue(i)),void 0!==s&&(l+=s);return l},Rt.prototype.renderSection=function(e,t,r,n,a){var i=this,o="",s=t.lookup(e[1]);if(s){if(mt(s))for(var l=0,u=s.length;l<u;++l)o+=this.renderTokens(e[4],t.push(s[l]),r,n,a);else if("object"==typeof s||"string"==typeof s||"number"==typeof s)o+=this.renderTokens(e[4],t.push(s),r,n,a);else if(yt(s)){if("string"!=typeof n)throw new Error("Cannot use higher-order sections without the original template");null!=(s=s.call(t.view,n.slice(e[3],e[5]),(function(e){return i.render(e,t,r,a)})))&&(o+=s)}else o+=this.renderTokens(e[4],t,r,n,a);return o}},Rt.prototype.renderInverted=function(e,t,r,n,a){var i=t.lookup(e[1]);if(!i||mt(i)&&0===i.length)return this.renderTokens(e[4],t,r,n,a)},Rt.prototype.indentPartial=function(e,t,r){for(var n=t.replace(/[^ \t]/g,""),a=e.split("\n"),i=0;i<a.length;i++)a[i].length&&(i>0||!r)&&(a[i]=n+a[i]);return a.join("\n")},Rt.prototype.renderPartial=function(e,t,r,n){if(r){var a=this.getConfigTags(n),i=yt(r)?r(e[1]):r[e[1]];if(null!=i){var o=e[6],s=e[5],l=e[4],u=i;0==s&&l&&(u=this.indentPartial(i,l,o));var c=this.parse(u,a);return this.renderTokens(c,t,r,u,n)}}},Rt.prototype.unescapedValue=function(e,t){var r=t.lookup(e[1]);if(null!=r)return r},Rt.prototype.escapedValue=function(e,t,r){var n=this.getConfigEscape(r)||Ot.escape,a=t.lookup(e[1]);if(null!=a)return"number"==typeof a&&n===Ot.escape?String(a):n(a)},Rt.prototype.rawValue=function(e){return e[1]},Rt.prototype.getConfigTags=function(e){return mt(e)?e:e&&"object"==typeof e?e.tags:void 0},Rt.prototype.getConfigEscape=function(e){return e&&"object"==typeof e&&!mt(e)?e.escape:void 0};var Ot={name:"mustache.js",version:"4.2.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){It.templateCache=e},get templateCache(){return It.templateCache}},It=new Rt;Ot.clearCache=function(){return It.clearCache()},Ot.parse=function(e,t){return It.parse(e,t)},Ot.render=function(e,t,r,n){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(mt(a=e)?"array":typeof a)+'" was given as the first argument for mustache#render(template, view, partials)');var a;return It.render(e,t,r,n)},Ot.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return wt[e]}))},Ot.Scanner=Ct,Ot.Context=Tt,Ot.Writer=Rt;const Ft=Ot;var Dt,Lt,Mt,Nt,jt,Bt,Ut,qt,zt,Wt,Gt,Ht,Vt=function(){var e=(0,n.useContext)(rt).state.language,t=Ue.en;return{t:(0,n.useCallback)((function(r,n){var a=Ue[e];return a[r]?Ft.render(a[r],n):t[r]?Ft.render(t[r],n):r}),[e,t])}},Yt=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Zt=function(){var e=(0,n.useContext)(rt),t=e.state,r=t.currentDocument,i=t.currentFileNo,o=t.documents,s=e.dispatch,l=Vt().t;if(o.length<=1||!r)return null;var u=r.uri||"",c=u.split("/");return c.length&&(u=c[c.length-1]),a().createElement(Xt,{id:"doc-nav"},a().createElement("p",{id:"doc-nav-info"},l("documentNavInfo",{currentFileNo:i+1,allFilesCount:o.length})),a().createElement(Kt,{id:"doc-nav-prev",onClick:function(){return s(Ye())},disabled:0===i},a().createElement(ft,{color:"#fff",size:"60%"})),a().createElement(Jt,{id:"doc-nav-next",onClick:function(){return s(He())},disabled:i>=o.length-1},a().createElement(dt,{color:"#fff",size:"60%"})))},Xt=Fe.div(Dt||(Dt=Yt(["\n  min-width: 150px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 0 10px;\n  color: ",";\n"],["\n  min-width: 150px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 0 10px;\n  color: ",";\n"])),(function(e){return e.theme.textPrimary})),Kt=Fe(ut)(Lt||(Lt=Yt(["\n  width: 30px;\n  height: 30px;\n  margin: 0 5px 0 10px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"],["\n  width: 30px;\n  height: 30px;\n  margin: 0 5px 0 10px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"]))),Jt=Fe(Kt)(Mt||(Mt=Yt(["\n  margin: 0 5px;\n"],["\n  margin: 0 5px;\n"]))),Qt=function(e,t){if(!e)return"";var r="";if(e.fileName)r=e.fileName;else{r=e.uri||"",r=decodeURI(r),t||(r=r.split("?")[0]);var n=r.split("/");n.length&&(r=n[n.length-1])}return r},$t=function(){var e,t,r=(0,n.useContext)(rt).state,i=r.config,o=r.currentDocument;if(!o||(null===(e=null==i?void 0:i.header)||void 0===e?void 0:e.disableFileName))return null;var s=Qt(o,(null===(t=null==i?void 0:i.header)||void 0===t?void 0:t.retainURLParams)||!1);return a().createElement(er,{id:"file-name","data-testid":"file-name"},s)},er=Fe.div(Nt||(Gt=["\n  flex: 1;\n  text-align: left;\n  color: ",";\n  font-weight: bold;\n  margin: 0 10px;\n  overflow: hidden;\n"],Ht=["\n  flex: 1;\n  text-align: left;\n  color: ",";\n  font-weight: bold;\n  margin: 0 10px;\n  overflow: hidden;\n"],Object.defineProperty?Object.defineProperty(Gt,"raw",{value:Ht}):Gt.raw=Ht,Nt=Gt),(function(e){return e.theme.textPrimary})),tr=function(){var e,t,r,i=(0,n.useContext)(rt),o=i.state,s=i.dispatch,l=o.config;return(null===(e=null==l?void 0:l.header)||void 0===e?void 0:e.disableHeader)?null:(null===(r=null===(t=null==l?void 0:l.header)||void 0===t?void 0:t.overrideComponent)||void 0===r?void 0:r.call(t,o,(function(){return s(Ye())}),(function(){return s(He())})))||a().createElement(rr,{id:"header-bar","data-testid":"header-bar"},a().createElement($t,null),a().createElement(Zt,null))},rr=Fe.div(jt||(jt=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  z-index: 1;\n  padding: 0 10px;\n  background-color: ",";\n  font-size: 16px;\n  min-height: 50px;\n\n  @media (max-width: 768px) {\n    min-height: 30px;\n    padding: 5px;\n    font-size: 10px;\n  }\n"],["\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  z-index: 1;\n  padding: 0 10px;\n  background-color: ",";\n  font-size: 16px;\n  min-height: 50px;\n\n  @media (max-width: 768px) {\n    min-height: 30px;\n    padding: 5px;\n    font-size: 10px;\n  }\n"])),(function(e){return e.theme.primary})),nr=function(){return nr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},nr.apply(this,arguments)},ar=function(e){var t=e.documentURI,r=e.signal,n=e.fileLoaderComplete,a=e.readerTypeFunction,i=e.headers;return fetch(t,{signal:r,headers:i}).then((function(e){return function(e,t,r,n){return new(r||(r=Promise))((function(a,i){function o(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))}(void 0,void 0,void 0,(function(){var t,r;return function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(i){switch(i.label){case 0:return[4,e.blob()];case 1:switch(t=i.sent(),(r=new FileReader).addEventListener("loadend",(function(){return n(r)})),a){case"arrayBuffer":r.readAsArrayBuffer(t);break;case"binaryString":r.readAsBinaryString(t);break;case"dataURL":r.readAsDataURL(t);break;case"text":r.readAsText(t)}return[2]}}))}))})).catch((function(e){return e}))},ir=function(e){return ar(nr(nr({},e),{readerTypeFunction:"arrayBuffer"}))},or=function(e){return ar(nr(nr({},e),{readerTypeFunction:"dataURL"}))},sr=function(e){return ar(nr(nr({},e),{readerTypeFunction:"text"}))},lr=function(e){return ar(nr(nr({},e),{readerTypeFunction:"binaryString"}))},ur=or,cr=function(){return cr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},cr.apply(this,arguments)},fr=function(e){var t,r,i=e.children,o=(0,n.useContext)(rt).state.config,s=(0,n.useState)(!1===(null===(t=null==o?void 0:o.loadingRenderer)||void 0===t?void 0:t.showLoadingTimeout)),l=s[0],u=s[1];return(0,n.useEffect)((function(){var e;setTimeout((function(){u(!0)}),"number"==typeof(null===(e=null==o?void 0:o.loadingRenderer)||void 0===e?void 0:e.showLoadingTimeout)?o.loadingRenderer.showLoadingTimeout:500)}),[null===(r=null==o?void 0:o.loadingRenderer)||void 0===r?void 0:r.showLoadingTimeout]),l?a().createElement(a().Fragment,null,i):null},dr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},hr=function(){var e,t=function(){var e=(0,n.useContext)(rt),t=e.state,r=e.dispatch,a=t.currentFileNo,i=t.currentDocument,o=t.prefetchMethod,s=function(){var e=(0,n.useContext)(rt).state,t=e.currentDocument,r=e.pluginRenderers,a=(0,n.useState)(),i=a[0],o=a[1];return(0,n.useEffect)((function(){if(t)if(t.fileType){var e=[];null==r||r.forEach((function(r){void 0!==t.fileType&&r.fileTypes.indexOf(t.fileType)>=0&&e.push(r)}));var n=e.sort((function(e,t){return t.weight-e.weight}))[0];o(n&&void 0!==n?function(){return n}:null)}else o(void 0)}),[t,r]),{CurrentRenderer:i}}().CurrentRenderer,l=(null==i?void 0:i.uri)||"";return(0,n.useEffect)((function(){if(i&&void 0===i.fileType){var e=new AbortController,n=e.signal;return fetch(l,{method:o||l.startsWith("blob:")?"GET":"HEAD",signal:n,headers:null==t?void 0:t.requestHeaders}).then((function(e){var t=e.headers.get("content-type"),n=(null==t?void 0:t.split(";"))||[],a=n.length?n[0]:void 0;r(Xe(cr(cr({},i),{fileType:a||void 0})))})),function(){e.abort()}}}),[a,l,i]),(0,n.useEffect)((function(){var e;if(i&&void 0!==s){var n=new AbortController,a=n.signal,o={documentURI:l,signal:a,fileLoaderComplete:function(e){if(i&&e){var t=cr({},i);null!==e.result&&(t.fileData=e.result),r(Xe(t)),r(We(!1))}else r(We(!1))},headers:null==t?void 0:t.requestHeaders};return null===s?r(We(!1)):void 0!==s.fileLoader?null===(e=s.fileLoader)||void 0===e||e.call(s,o):ur(o),function(){n.abort()}}}),[s,a]),{state:t,dispatch:r,CurrentRenderer:s}}(),r=t.state,i=t.dispatch,o=t.CurrentRenderer,s=r.documents,l=r.documentLoading,u=r.currentDocument,c=r.config,f=function(){var e=(0,n.useState)({width:void 0,height:void 0}),t=e[0],r=e[1];return(0,n.useEffect)((function(){function e(){r({width:window.innerWidth,height:window.innerHeight})}return window.addEventListener("resize",e),e(),function(){return window.removeEventListener("resize",e)}}),[]),t}(),d=Vt().t,h=(0,n.useCallback)((function(e){var t;e&&i((t=null==e?void 0:e.getBoundingClientRect(),{type:Ke,rect:t}))}),[f]),p=Qt(u,(null===(e=null==c?void 0:c.header)||void 0===e?void 0:e.retainURLParams)||!1);return a().createElement(pr,{id:"proxy-renderer","data-testid":"proxy-renderer",ref:h},a().createElement((function(){var e,t,n;if(s.length){if(l){if(c&&(null===(e=null==c?void 0:c.loadingRenderer)||void 0===e?void 0:e.overrideComponent)){var i=c.loadingRenderer.overrideComponent;return a().createElement(fr,null,a().createElement(i,{document:u,fileName:p}))}return a().createElement(fr,null,a().createElement(vr,{id:"loading-renderer","data-testid":"loading-renderer"},a().createElement(yr,null,a().createElement(pt,{color:"#444",size:40}))))}return o?a().createElement(o,{mainState:r}):void 0===o?null:c&&(null===(t=null==c?void 0:c.noRenderer)||void 0===t?void 0:t.overrideComponent)?(i=c.noRenderer.overrideComponent,a().createElement(i,{document:u,fileName:p})):a().createElement("div",{id:"no-renderer","data-testid":"no-renderer"},d("noRendererMessage",{fileType:null!==(n=null==u?void 0:u.fileType)&&void 0!==n?n:""}),a().createElement(gr,{id:"no-renderer-download",href:null==u?void 0:u.uri,download:null==u?void 0:u.uri},d("downloadButtonLabel")))}return a().createElement("div",{id:"no-documents"})}),null))},pr=Fe.div(Bt||(Bt=dr(["\n  display: flex;\n  flex: 1;\n  overflow-y: auto;\n"],["\n  display: flex;\n  flex: 1;\n  overflow-y: auto;\n"]))),vr=Fe.div(Ut||(Ut=dr(["\n  display: flex;\n  flex: 1;\n  height: 75px;\n  align-items: center;\n  justify-content: center;\n"],["\n  display: flex;\n  flex: 1;\n  height: 75px;\n  align-items: center;\n  justify-content: center;\n"]))),mr=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=ye.apply(void 0,[e].concat(r)).join(""),i=Se(a);return new le(i,a)}(qt||(qt=dr(["\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n"],["\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n"]))),yr=Fe.div(zt||(zt=dr(["\n  animation-name: ",";\n  animation-duration: 4s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n"],["\n  animation-name: ",";\n  animation-duration: 4s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n"])),mr),gr=Fe(lt)(Wt||(Wt=dr(["\n  width: 130px;\n  height: 30px;\n  background-color: ",";\n  @media (max-width: 768px) {\n    width: 125px;\n    height: 25px;\n  }\n"],["\n  width: 130px;\n  height: 30px;\n  background-color: ",";\n  @media (max-width: 768px) {\n    width: 125px;\n    height: 25px;\n  }\n"])),(function(e){return e.theme.primary})),br={primary:"#fff",secondary:"#000",tertiary:"#ffffff99",textPrimary:"#000",textSecondary:"#fff",textTertiary:"#00000044",disableThemeScrollbar:!1},_r="undefined"!=typeof window,Sr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},wr=function(){return wr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},wr.apply(this,arguments)},Ar=function(e){var t=e.mainState.currentDocument,r=e.children;return t?a().createElement(Pr,wr({id:"image-renderer"},e),r||a().createElement(Cr,{id:"image-img",src:t.fileData})):null};const kr=Ar;Ar.fileTypes=[],Ar.weight=0;var xr,Er,Pr=Fe.div(xr||(xr=Sr(["\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: #fff;\n"],["\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: #fff;\n"]))),Cr=Fe.img(Er||(Er=Sr(["\n  max-width: 95%;\n  max-height: 95%;\n"],["\n  max-width: 95%;\n  max-height: 95%;\n"]))),Tr=function(){return Tr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Tr.apply(this,arguments)},Rr=function(e){return a().createElement(kr,Tr({},e))};Rr.fileTypes=["bmp","image/bmp"],Rr.weight=0;const Or=Rr;var Ir=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Fr=function(e){var t=e.mainState.currentDocument;return(0,n.useEffect)((function(){var e=null==t?void 0:t.fileData,r=(null==e?void 0:e.replace("data:text/html;base64,",""))||"",n=window.atob(r),a=document.getElementById("html-body"),i=(null==a?void 0:a.contentWindow)&&a.contentWindow;if(i){var o=i.document;o.open(),o.write("".concat(n)),o.close()}}),[t]),a().createElement(Nr,{id:"html-renderer"},a().createElement(jr,{id:"html-body",sandbox:"allow-same-origin"}))};const Dr=Fr;Fr.fileTypes=["htm","html","text/htm","text/html"],Fr.weight=0,Fr.fileLoader=or;var Lr,Mr,Nr=Fe.div(Lr||(Lr=Ir(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 30px;\n"],["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 30px;\n"]))),jr=Fe.iframe(Mr||(Mr=Ir(["\n  height: 100%;\n  padding: 15px;\n  margin: 20px 0 20px 0;\n  border: 1px solid ",";\n"],["\n  height: 100%;\n  padding: 15px;\n  margin: 20px 0 20px 0;\n  border: 1px solid ",";\n"])),(function(e){return e.theme.secondary})),Br=function(){return Br=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Br.apply(this,arguments)},Ur=function(e){return a().createElement(kr,Br({},e))};Ur.fileTypes=["jpg","jpeg","image/jpg","image/jpeg"],Ur.weight=0;const qr=Ur;var zr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Wr=function(e,t,r){if(r||2===arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))},Gr=function(e){var t=e.mainState.currentDocument;return t?a().createElement(Zr,{id:"msdoc-renderer"},a().createElement(Xr,{id:"msdoc-iframe",title:"msdoc-iframe",src:"https://view.officeapps.live.com/op/embed.aspx?src=".concat(encodeURIComponent(t.uri)),frameBorder:"0"})):null};const Hr=Gr;Gr.fileTypes=Wr(Wr(Wr(Wr(Wr(Wr([],["doc","application/msword"],!0),["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document","application/octet-stream"],!0),["xls","application/vnd.ms-excel"],!0),["xlsx","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],!0),["ppt","application/vnd.ms-powerpoint"],!0),["pptx","application/vnd.openxmlformats-officedocument.presentationml.presentation"],!0),Gr.weight=0,Gr.fileLoader=function(e){return(0,e.fileLoaderComplete)()};var Vr,Yr,Zr=Fe.div(Vr||(Vr=zr(["\n  width: 100%;\n"],["\n  width: 100%;\n"]))),Xr=Fe.iframe(Yr||(Yr=zr(["\n  width: 100%;\n  height: 100%;\n  border: 0;\n"],["\n  width: 100%;\n  height: 100%;\n  border: 0;\n"]))),Kr=r(51116),Jr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Qr=function(e){var t=e.mainState.currentDocument,r=(0,n.useState)(),i=r[0],o=r[1],s=Vt().t;if((0,n.useEffect)((function(){if(t&&t.fileData){var e=new Kr.MSGReader(t.fileData).getFileData();o(e)}}),[null==t?void 0:t.fileData]),(0,n.useEffect)((function(){if(i&&!i.hasOwnProperty("error")){var e=document.getElementById("msg-body"),t=(null==e?void 0:e.contentWindow)&&e.contentWindow;if(t){var r=t.document,n=i.body.replace(/(\r\n|\n|\r)/gm,"<br />");r.open(),r.write("".concat(n)),r.close()}}}),[i]),!i||i.hasOwnProperty("error"))return a().createElement("span",null,null==i?void 0:i.error);var l=i,u=l.recipients,c=l.subject,f=l.senderEmail,d=l.senderName;return a().createElement(on,{id:"msg-renderer"},a().createElement("h2",{id:"msg-subject-title",style:{marginBottom:0}},c),a().createElement($r,{name:d,email:f}),a().createElement(ln,{id:"msg-recipient"},a().createElement("h3",{id:"msg-recipient-title"},s("msgPluginRecipients")),a().createElement("ul",{id:"msg-recipient-ul"},u.map((function(e,t){return a().createElement("li",{key:t,id:"msg-recipient-li"},a().createElement("span",{id:"msg-recipient-name"},e.name),e.hasOwnProperty("email")&&a().createElement("span",{id:"msg-recipient-email"}," - ",e.email))})))),a().createElement(un,{id:"msg-body",sandbox:"allow-same-origin"}))},$r=function(e){var t=e.name,r=e.email,n=Vt().t;return t||r?a().createElement(sn,{id:"msg-sender"},a().createElement("h3",{id:"msg-sender-title"},n("msgPluginSender")),void 0!==t&&a().createElement("div",{id:"msg-sender-name"},t),void 0!==r&&a().createElement("div",{id:"msg-sender-email"},r)):null};const en=Qr;Qr.fileTypes=["msg","application/vnd.ms-outlook"],Qr.weight=0,Qr.fileLoader=ir;var tn,rn,nn,an,on=Fe.div(tn||(tn=Jr(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 30px;\n"],["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 30px;\n"]))),sn=Fe.div(rn||(rn=Jr(["\n  padding: 0 15px 15px 15px;\n  margin-top: 20px;\n  border: 1px solid ",";\n"],["\n  padding: 0 15px 15px 15px;\n  margin-top: 20px;\n  border: 1px solid ",";\n"])),(function(e){return e.theme.secondary})),ln=Fe.div(nn||(nn=Jr(["\n  padding: 0 15px;\n  margin-top: 20px;\n  border: 1px solid ",";\n"],["\n  padding: 0 15px;\n  margin-top: 20px;\n  border: 1px solid ",";\n"])),(function(e){return e.theme.secondary})),un=Fe.iframe(an||(an=Jr(["\n  height: 100%;\n  padding: 15px;\n  margin: 20px 0 20px 0;\n  border: 1px solid ",";\n"],["\n  height: 100%;\n  padding: 15px;\n  margin: 20px 0 20px 0;\n  border: 1px solid ",";\n"])),(function(e){return e.theme.secondary})),cn=r(22649),fn=r(87462),dn=r(45987),hn=r(71002),pn=r(15671),vn=r(43144),mn=r(97326),yn=r(79340),gn=r(82963),bn=r(61120),_n=r(4942),Sn=r(45697),wn=r.n(Sn),An=["onKeyDown","onKeyPress","onKeyUp"],kn=["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],xn=["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"],En=[].concat(["onCopy","onCut","onPaste"],["onCompositionEnd","onCompositionStart","onCompositionUpdate"],An,["onFocus","onBlur"],["onChange","onInput","onInvalid","onReset","onSubmit"],["onError","onLoad"],kn,["onPointerDown","onPointerMove","onPointerUp","onPointerCancel","onGotPointerCapture","onLostPointerCapture","onPointerEnter","onPointerLeave","onPointerOver","onPointerOut"],["onSelect"],xn,["onScroll"],["onWheel"],["onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onError","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting"],["onLoad","onError"],["onAnimationStart","onAnimationEnd","onAnimationIteration"],["onTransitionEnd"],["onToggle"]);const Pn=function(e,t){var r={};return En.forEach((function(n){n in e&&(r[n]=t?function(r){return e[n](r,t(n))}:e[n])})),r};function Cn(e){var t=!1,r=new Promise((function(r,n){e.then((function(){return!t&&r.apply(void 0,arguments)})).catch((function(e){return!t&&n(e)}))}));return{promise:r,cancel:function(){t=!0}}}function Tn(){return Array.prototype.slice.call(arguments).reduce((function(e,t){return e.concat(t)}),[]).filter((function(e){return"string"==typeof e})).join(" ")}function Rn(e,t){if(!e)throw new Error("Invariant failed")}const On=(0,n.createContext)(null);function In(e){var t=e.children,r=e.type;return a().createElement("div",{className:"react-pdf__message react-pdf__message--".concat(r)},t)}In.propTypes={children:wn().node,type:wn().oneOf(["error","loading","no-data"]).isRequired};var Fn=function(){function e(){(0,pn.Z)(this,e),this.externalLinkTarget=null,this.externalLinkRel=null}return(0,vn.Z)(e,[{key:"setDocument",value:function(e){this.pdfDocument=e}},{key:"setViewer",value:function(e){this.pdfViewer=e}},{key:"setExternalLinkRel",value:function(e){this.externalLinkRel=e}},{key:"setExternalLinkTarget",value:function(e){this.externalLinkTarget=e}},{key:"setHistory",value:function(){}},{key:"pagesCount",get:function(){return this.pdfDocument?this.pdfDocument.numPages:0}},{key:"page",get:function(){return this.pdfViewer.currentPageNumber},set:function(e){this.pdfViewer.currentPageNumber=e}},{key:"rotation",get:function(){return 0},set:function(e){}},{key:"goToDestination",value:function(e){var t=this;new Promise((function(r){"string"==typeof e?t.pdfDocument.getDestination(e).then(r):Array.isArray(e)?r(e):e.then(r)})).then((function(r){Rn(Array.isArray(r),'"'.concat(r,'" is not a valid destination array.'));var n=r[0];new Promise((function(e){n instanceof Object?t.pdfDocument.getPageIndex(n).then((function(t){e(t)})).catch((function(){Rn(!1,'"'.concat(n,'" is not a valid page reference.'))})):"number"==typeof n?e(n):Rn(!1,'"'.concat(n,'" is not a valid destination reference.'))})).then((function(r){var n=r+1;Rn(n>=1&&n<=t.pagesCount,'"'.concat(n,'" is not a valid page number.')),t.pdfViewer.scrollPageIntoView({dest:e,pageIndex:r,pageNumber:n})}))}))}},{key:"navigateTo",value:function(e){this.goToDestination(e)}},{key:"goToPage",value:function(){}},{key:"addLinkAttributes",value:function(e,t,r){e.href=t,e.rel=this.externalLinkRel||"noopener noreferrer nofollow",e.target=r?"_blank":this.externalLinkTarget||""}},{key:"getDestinationHash",value:function(){return"#"}},{key:"getAnchorUrl",value:function(){return"#"}},{key:"setHash",value:function(){}},{key:"executeNamedAction",value:function(){}},{key:"cachePageRef",value:function(){}},{key:"isPageVisible",value:function(){return!0}},{key:"isPageCached",value:function(){return!0}}]),e}();const Dn=1,Ln=2;var Mn=r(29439),Nn="undefined"!=typeof window;Nn&&window.location.protocol;function jn(e){return void 0!==e}function Bn(e){return jn(e)&&null!==e}function Un(e){return e instanceof ArrayBuffer}function qn(e){return Rn(Nn),e instanceof Blob}function zn(e){return Rn(Nn),e instanceof File}function Wn(e){return"string"==typeof e&&/^data:/.test(e)}function Gn(e){Rn(Wn(e));var t=e.split(","),r=(0,Mn.Z)(t,2),n=r[0],a=r[1];return-1!==n.split(";").indexOf("base64")?atob(a):unescape(a)}var Hn="On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.";function Vn(){"Loading PDF as base64 strings/URLs may not work on protocols other than HTTP/HTTPS. ".concat(Hn)}function Yn(e){e&&e.cancel&&e.cancel()}function Zn(e,t){return Object.defineProperty(e,"width",{get:function(){return this.view[2]*t},configurable:!0}),Object.defineProperty(e,"height",{get:function(){return this.view[3]*t},configurable:!0}),Object.defineProperty(e,"originalWidth",{get:function(){return this.view[2]},configurable:!0}),Object.defineProperty(e,"originalHeight",{get:function(){return this.view[3]},configurable:!0}),e}function Xn(e){return"RenderingCancelledException"===e.name}function Kn(e){return new Promise((function(t,r){var n=new FileReader;return n.onload=function(){return t(new Uint8Array(n.result))},n.onerror=function(e){switch(e.target.error.code){case e.target.error.NOT_FOUND_ERR:return r(new Error("Error while reading a file: File not found."));case e.target.error.NOT_READABLE_ERR:return r(new Error("Error while reading a file: File not readable."));case e.target.error.SECURITY_ERR:return r(new Error("Error while reading a file: Security error."));case e.target.error.ABORT_ERR:return r(new Error("Error while reading a file: Aborted."));default:return r(new Error("Error while reading a file."))}},n.readAsArrayBuffer(e),null}))}var Jn,Qn=r(93433),$n=(Jn={},[].concat((0,Qn.Z)(kn),(0,Qn.Z)(xn),(0,Qn.Z)(An)).forEach((function(e){Jn[e]=wn().func})),Jn),ea=[wn().string,wn().instanceOf(ArrayBuffer),wn().shape({data:wn().oneOfType([wn().object,wn().string]),httpHeaders:wn().object,range:wn().object,url:wn().string,withCredentials:wn().bool})];"undefined"!=typeof File&&ea.push(wn().instanceOf(File)),"undefined"!=typeof Blob&&ea.push(wn().instanceOf(Blob));var ta=wn().oneOfType([wn().string,wn().arrayOf(wn().string)]),ra=wn().oneOfType(ea),na=wn().instanceOf(Fn),aa=(wn().oneOf(["_self","_blank","_parent","_top"]),wn().shape({_transport:wn().shape({fontLoader:wn().object.isRequired}).isRequired,commonObjs:wn().shape({_objs:wn().object.isRequired}).isRequired,getAnnotations:wn().func.isRequired,getTextContent:wn().func.isRequired,getViewport:wn().func.isRequired,render:wn().func.isRequired})),ia=wn().oneOfType([wn().shape({getDestination:wn().func.isRequired,getOutline:wn().func.isRequired,getPage:wn().func.isRequired,numPages:wn().number.isRequired}),wn().bool]),oa=wn().oneOfType([wn().func,wn().shape({current:wn().any})]),sa=wn().oneOf(["canvas","none","svg"]),la=wn().oneOf([0,90,180,270]),ua=["url"];function ca(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function fa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ca(Object(r),!0).forEach((function(t){(0,_n.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ca(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var da=cn.PDFDataRangeTransport,ha=function(e){(0,yn.Z)(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function i(){var e;(0,pn.Z)(this,i);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=n.call.apply(n,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{pdf:null}),(0,_n.Z)((0,mn.Z)(e),"viewer",{scrollPageIntoView:function(t){var r=t.dest,n=t.pageIndex,a=t.pageNumber,i=e.props.onItemClick;if(i)i({dest:r,pageIndex:n,pageNumber:a});else{var o=e.pages[n];o?o.scrollIntoView():"An internal link leading to page ".concat(a," was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>.")}}}),(0,_n.Z)((0,mn.Z)(e),"linkService",new Fn),(0,_n.Z)((0,mn.Z)(e),"loadDocument",(function(){Yn(e.runningTask),e.loadingTask&&e.loadingTask.destroy();var t=Cn(e.findDocumentSource());e.runningTask=t,t.promise.then((function(t){if(e.onSourceSuccess(),t){e.setState((function(e){return e.pdf?{pdf:null}:null}));var r=e.props,n=r.options,a=r.onLoadProgress,i=r.onPassword;e.loadingTask=cn.getDocument(fa(fa({},t),n)),e.loadingTask.onPassword=i,a&&(e.loadingTask.onProgress=a);var o=Cn(e.loadingTask.promise);e.runningTask=o,o.promise.then((function(t){e.setState((function(e){return e.pdf&&e.pdf.fingerprint===t.fingerprint?null:{pdf:t}}),e.onLoadSuccess)})).catch((function(t){e.onLoadError(t)}))}})).catch((function(t){e.onSourceError(t)}))})),(0,_n.Z)((0,mn.Z)(e),"setupLinkService",(function(){var t=e.props,r=t.externalLinkRel,n=t.externalLinkTarget;e.linkService.setViewer(e.viewer),e.linkService.setExternalLinkRel(r),e.linkService.setExternalLinkTarget(n)})),(0,_n.Z)((0,mn.Z)(e),"onSourceSuccess",(function(){var t=e.props.onSourceSuccess;t&&t()})),(0,_n.Z)((0,mn.Z)(e),"onSourceError",(function(t){var r=e.props.onSourceError;r&&r(t)})),(0,_n.Z)((0,mn.Z)(e),"onLoadSuccess",(function(){var t=e.props.onLoadSuccess,r=e.state.pdf;t&&t(r),e.pages=new Array(r.numPages),e.linkService.setDocument(r)})),(0,_n.Z)((0,mn.Z)(e),"onLoadError",(function(t){e.setState({pdf:!1});var r=e.props.onLoadError;r&&r(t)})),(0,_n.Z)((0,mn.Z)(e),"findDocumentSource",(function(){return new Promise((function(t){var r=e.props.file;if(r||t(null),"string"==typeof r){if(Wn(r)){var n=Gn(r);t({data:n})}Vn(),t({url:r})}if(r instanceof da&&t({range:r}),Un(r)&&t({data:r}),Nn&&(qn(r)||zn(r)))Kn(r).then((function(e){t({data:e})}));else{if(Rn("object"===(0,hn.Z)(r)),Rn(r.url||r.data||r.range),"string"==typeof r.url){if(Wn(r.url)){var a=r.url,i=(0,dn.Z)(r,ua),o=Gn(a);t(fa({data:o},i))}Vn()}t(r)}}))})),(0,_n.Z)((0,mn.Z)(e),"registerPage",(function(t,r){e.pages[t]=r})),(0,_n.Z)((0,mn.Z)(e),"unregisterPage",(function(t){delete e.pages[t]})),e}return(0,vn.Z)(i,[{key:"componentDidMount",value:function(){this.loadDocument(),this.setupLinkService()}},{key:"componentDidUpdate",value:function(e){this.props.file!==e.file&&this.loadDocument()}},{key:"componentWillUnmount",value:function(){Yn(this.runningTask),this.loadingTask&&this.loadingTask.destroy()}},{key:"childContext",get:function(){var e=this.linkService,t=this.registerPage,r=this.unregisterPage,n=this.props,a=n.imageResourcesPath,i=n.renderMode,o=n.rotate;return{imageResourcesPath:a,linkService:e,pdf:this.state.pdf,registerPage:t,renderMode:i,rotate:o,unregisterPage:r}}},{key:"eventProps",get:function(){var e=this;return Pn(this.props,(function(){return e.state.pdf}))}},{key:"renderChildren",value:function(){var e=this.props.children;return a().createElement(On.Provider,{value:this.childContext},e)}},{key:"renderContent",value:function(){var e=this.props.file,t=this.state.pdf;if(!e){var r=this.props.noData;return a().createElement(In,{type:"no-data"},"function"==typeof r?r():r)}if(null===t){var n=this.props.loading;return a().createElement(In,{type:"loading"},"function"==typeof n?n():n)}if(!1===t){var i=this.props.error;return a().createElement(In,{type:"error"},"function"==typeof i?i():i)}return this.renderChildren()}},{key:"render",value:function(){var e=this.props,t=e.className,r=e.inputRef;return a().createElement("div",(0,fn.Z)({className:Tn("react-pdf__Document",t),ref:r},this.eventProps),this.renderContent())}}]),i}(n.PureComponent);ha.defaultProps={error:"Failed to load PDF file.",loading:"Loading PDF…",noData:"No PDF file specified.",onPassword:function(e,t){switch(t){case Dn:e(prompt("Enter the password to open this PDF file."));break;case Ln:e(prompt("Invalid password. Please try again."))}}};var pa=wn().oneOfType([wn().func,wn().node]);ha.propTypes=fa(fa({},$n),{},{children:wn().node,className:ta,error:pa,externalLinkRel:wn().string,externalLinkTarget:wn().string,file:ra,imageResourcesPath:wn().string,inputRef:oa,loading:pa,noData:pa,onItemClick:wn().func,onLoadError:wn().func,onLoadProgress:wn().func,onLoadSuccess:wn().func,onPassword:wn().func,onSourceError:wn().func,onSourceSuccess:wn().func,rotate:wn().number});const va=(0,n.createContext)(null);var ma=function(){function e(t){var r=t.num,n=t.gen;(0,pn.Z)(this,e),this.num=r,this.gen=n}return(0,vn.Z)(e,[{key:"toString",value:function(){var e="".concat(this.num,"R");return 0!==this.gen&&(e+=this.gen),e}}]),e}(),ya=["item"];var ga=function(e){(0,yn.Z)(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function i(){var e;(0,pn.Z)(this,i);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=n.call.apply(n,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"getDestination",(function(){return new Promise((function(t,r){var n=e.props,a=n.item,i=n.pdf;return jn(e.destination)||("string"==typeof a.dest?i.getDestination(a.dest).then(t).catch(r):t(a.dest)),e.destination})).then((function(t){return e.destination=t,t}))})),(0,_n.Z)((0,mn.Z)(e),"getPageIndex",(function(){return new Promise((function(t,r){var n=e.props.pdf;jn(e.pageIndex)&&t(e.pageIndex),e.getDestination().then((function(e){if(e){var a=(0,Mn.Z)(e,1)[0];n.getPageIndex(new ma(a)).then(t).catch(r)}}))})).then((function(t){return e.pageIndex=t,e.pageIndex}))})),(0,_n.Z)((0,mn.Z)(e),"getPageNumber",(function(){return new Promise((function(t,r){jn(e.pageNumber)&&t(e.pageNumber),e.getPageIndex().then((function(e){t(e+1)})).catch(r)})).then((function(t){return e.pageNumber=t,t}))})),(0,_n.Z)((0,mn.Z)(e),"onClick",(function(t){var r=e.props.onClick;return t.preventDefault(),!!r&&Promise.all([e.getDestination(),e.getPageIndex(),e.getPageNumber()]).then((function(e){var t=(0,Mn.Z)(e,3),n=t[0],a=t[1],i=t[2];r({dest:n,pageIndex:a,pageNumber:i})}))})),e}return(0,vn.Z)(i,[{key:"renderSubitems",value:function(){var e=this.props,t=e.item,r=(0,dn.Z)(e,ya);if(!t.items||!t.items.length)return null;var n=t.items;return a().createElement("ul",null,n.map((function(e,t){return a().createElement(i,(0,fn.Z)({key:"string"==typeof e.destination?e.destination:t,item:e},r))})))}},{key:"render",value:function(){var e=this.props.item;return a().createElement("li",null,a().createElement("a",{href:"#",onClick:this.onClick},e.title),this.renderSubitems())}}]),i}(n.PureComponent),ba=wn().oneOfType([wn().string,wn().arrayOf(wn().any)]);ga.propTypes={item:wn().shape({dest:ba,items:wn().arrayOf(wn().shape({dest:ba,title:wn().string})),title:wn().string}).isRequired,onClick:wn().func,pdf:ia.isRequired};const _a=function(e){return a().createElement(On.Consumer,null,(function(t){return a().createElement(va.Consumer,null,(function(r){return a().createElement(ga,(0,fn.Z)({},t,r,e))}))}))};function Sa(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}var wa=function(e){(0,yn.Z)(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function i(){var e;(0,pn.Z)(this,i);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=n.call.apply(n,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{outline:null}),(0,_n.Z)((0,mn.Z)(e),"loadOutline",(function(){var t=e.props.pdf;e.setState((function(e){return e.outline?{outline:null}:null}));var r=Cn(t.getOutline());e.runningTask=r,r.promise.then((function(t){e.setState({outline:t},e.onLoadSuccess)})).catch((function(t){e.onLoadError(t)}))})),(0,_n.Z)((0,mn.Z)(e),"onLoadSuccess",(function(){var t=e.props.onLoadSuccess,r=e.state.outline;t&&t(r)})),(0,_n.Z)((0,mn.Z)(e),"onLoadError",(function(t){e.setState({outline:!1});var r=e.props.onLoadError;r&&r(t)})),(0,_n.Z)((0,mn.Z)(e),"onItemClick",(function(t){var r=t.dest,n=t.pageIndex,a=t.pageNumber,i=e.props.onItemClick;i&&i({dest:r,pageIndex:n,pageNumber:a})})),e}return(0,vn.Z)(i,[{key:"componentDidMount",value:function(){Rn(this.props.pdf),this.loadOutline()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;e.pdf&&t!==e.pdf&&this.loadOutline()}},{key:"componentWillUnmount",value:function(){Yn(this.runningTask)}},{key:"childContext",get:function(){return{onClick:this.onItemClick}}},{key:"eventProps",get:function(){var e=this;return Pn(this.props,(function(){return e.state.outline}))}},{key:"renderOutline",value:function(){var e=this.state.outline;return a().createElement("ul",null,e.map((function(e,t){return a().createElement(_a,{key:"string"==typeof e.destination?e.destination:t,item:e})})))}},{key:"render",value:function(){var e=this.props.pdf,t=this.state.outline;if(!e||!t)return null;var r=this.props,n=r.className,i=r.inputRef;return a().createElement("div",(0,fn.Z)({className:Tn("react-pdf__Outline",n),ref:i},this.eventProps),a().createElement(va.Provider,{value:this.childContext},this.renderOutline()))}}]),i}(n.PureComponent);function Aa(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=t.filter(Boolean);return n.length<=1?n[0]:function(e){n.forEach((function(t){"function"==typeof t?t(e):t.current=e}))}}wa.propTypes=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Sa(Object(r),!0).forEach((function(t){(0,_n.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Sa(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({className:ta,inputRef:oa,onItemClick:wn().func,onLoadError:wn().func,onLoadSuccess:wn().func,pdf:ia},$n);const ka=(0,n.createContext)(null);var xa=cn.AnnotationMode,Ea=function(e){(0,yn.Z)(o,e);var t,r,i=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function o(){var e;(0,pn.Z)(this,o);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=i.call.apply(i,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"canvasElement",(0,n.createRef)()),(0,_n.Z)((0,mn.Z)(e),"onRenderSuccess",(function(){e.renderer=null;var t=e.props,r=t.onRenderSuccess,n=t.page,a=t.scale;r&&r(Zn(n,a))})),(0,_n.Z)((0,mn.Z)(e),"onRenderError",(function(t){if(!Xn(t)){var r=e.props.onRenderError;r&&r(t)}})),(0,_n.Z)((0,mn.Z)(e),"drawPageOnCanvas",(function(){var t=e.canvasElement.current;if(!t)return null;var r=(0,mn.Z)(e),n=r.renderViewport,a=r.viewport,i=e.props,o=i.canvasBackground,s=i.page,l=i.renderForms;t.width=n.width,t.height=n.height,t.style.width="".concat(Math.floor(a.width),"px"),t.style.height="".concat(Math.floor(a.height),"px");var u={annotationMode:l?xa.ENABLE_FORMS:xa.ENABLE,get canvasContext(){return t.getContext("2d")},viewport:n};return o&&(u.background=o),e.cancelRenderingTask(),e.renderer=s.render(u),e.renderer.promise.then(e.onRenderSuccess).catch(e.onRenderError)})),e}return(0,vn.Z)(o,[{key:"componentDidMount",value:function(){this.drawPageOnCanvas()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.canvasBackground,n=t.page,a=t.renderForms;r===e.canvasBackground&&a===e.renderForms||(n.cleanup(),this.drawPageOnCanvas())}},{key:"componentWillUnmount",value:function(){this.cancelRenderingTask();var e=this.canvasElement.current;e&&(e.width=0,e.height=0)}},{key:"cancelRenderingTask",value:function(){this.renderer&&(this.renderer.cancel(),this.renderer=null)}},{key:"renderViewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale,a=Nn&&window.devicePixelRatio||1;return t.getViewport({scale:n*a,rotation:r})}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}},{key:"render",value:function(){var e=this.props.canvasRef;return a().createElement("canvas",{className:"react-pdf__Page__canvas",dir:"ltr",ref:Aa(e,this.canvasElement),style:{display:"block",userSelect:"none"}})}}]),o}(n.PureComponent);function Pa(e){return a().createElement(ka.Consumer,null,(function(t){return a().createElement(Ea,(0,fn.Z)({},t,e))}))}Ea.propTypes={canvasBackground:wn().string,canvasRef:oa,onRenderError:wn().func,onRenderSuccess:wn().func,page:aa.isRequired,renderForms:wn().bool,rotate:la,scale:wn().number.isRequired};var Ca=function(e){(0,yn.Z)(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function i(){var e;(0,pn.Z)(this,i);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=n.call.apply(n,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{svg:null}),(0,_n.Z)((0,mn.Z)(e),"onRenderSuccess",(function(){e.renderer=null;var t=e.props,r=t.onRenderSuccess,n=t.page,a=t.scale;r&&r(Zn(n,a))})),(0,_n.Z)((0,mn.Z)(e),"onRenderError",(function(t){if(!Xn(t)){var r=e.props.onRenderError;r&&r(t)}})),(0,_n.Z)((0,mn.Z)(e),"renderSVG",(function(){var t=e.props.page;return e.renderer=t.getOperatorList(),e.renderer.then((function(r){var n=new cn.SVGGraphics(t.commonObjs,t.objs);e.renderer=n.getSVG(r,e.viewport).then((function(t){e.setState({svg:t},e.onRenderSuccess)})).catch(e.onRenderError)})).catch(e.onRenderError)})),(0,_n.Z)((0,mn.Z)(e),"drawPageOnContainer",(function(t){var r=e.state.svg;if(t&&r){t.firstElementChild||t.appendChild(r);var n=e.viewport,a=n.width,i=n.height;r.setAttribute("width",a),r.setAttribute("height",i)}})),e}return(0,vn.Z)(i,[{key:"componentDidMount",value:function(){this.renderSVG()}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}},{key:"render",value:function(){var e=this,t=this.viewport,r=t.width,n=t.height;return a().createElement("div",{className:"react-pdf__Page__svg",ref:function(t){return e.drawPageOnContainer(t)},style:{display:"block",backgroundColor:"white",overflow:"hidden",width:r,height:n,userSelect:"none"}})}}]),i}(n.PureComponent);function Ta(e){return a().createElement(ka.Consumer,null,(function(t){return a().createElement(Ca,(0,fn.Z)({},t,e))}))}Ca.propTypes={onRenderError:wn().func,onRenderSuccess:wn().func,page:aa.isRequired,rotate:la,scale:wn().number.isRequired};var Ra=function(e){(0,yn.Z)(o,e);var t,r,i=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function o(){var e;(0,pn.Z)(this,o);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=i.call.apply(i,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"itemElement",(0,n.createRef)()),(0,_n.Z)((0,mn.Z)(e),"getElementWidth",(function(t){var r=(0,mn.Z)(e).sideways;return t.getBoundingClientRect()[r?"height":"width"]})),e}return(0,vn.Z)(o,[{key:"componentDidMount",value:function(){this.alignTextItem()}},{key:"componentDidUpdate",value:function(){this.alignTextItem()}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}},{key:"sideways",get:function(){return this.rotate%180!=0}},{key:"defaultSideways",get:function(){return this.unrotatedViewport.rotation%180!=0}},{key:"fontSize",get:function(){var e=this.props.transform,t=this.defaultSideways,r=(0,Mn.Z)(e,2),n=r[0],a=r[1];return t?a:n}},{key:"top",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=(0,Mn.Z)(e,6),a=n[2],i=n[3],o=n[4],s=n[5],l=(0,Mn.Z)(t.viewBox,4),u=l[1],c=l[3];return r?o+a+u:c-(s+i)}},{key:"left",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=(0,Mn.Z)(e,6),a=n[4],i=n[5],o=(0,Mn.Z)(t.viewBox,1)[0];return r?i-o:a-o}},{key:"getFontData",value:function(e){var t=this.props.page;return new Promise((function(r){t.commonObjs.get(e,r)}))}},{key:"alignTextItem",value:function(){var e=this,t=this.itemElement.current;if(t){t.style.transform="";var r=this.props,n=r.fontName,a=r.scale,i=r.width;t.style.fontFamily="".concat(n,", sans-serif"),this.getFontData(n).then((function(r){var o=r?r.fallbackName:"sans-serif";t.style.fontFamily="".concat(n,", ").concat(o);var s=i*a,l=e.getElementWidth(t),u="scaleX(".concat(s/l,")"),c=r?r.ascent:0;c&&(u+=" translateY(".concat(100*(1-c),"%)")),t.style.transform=u,t.style.WebkitTransform=u}))}}},{key:"render",value:function(){var e=this.fontSize,t=this.top,r=this.left,n=this.props,i=n.customTextRenderer,o=n.scale,s=n.str;return a().createElement("span",{ref:this.itemElement,style:{height:"1em",fontFamily:"sans-serif",fontSize:"".concat(e*o,"px"),position:"absolute",top:"".concat(t*o,"px"),left:"".concat(r*o,"px"),transformOrigin:"left bottom",whiteSpace:"pre",pointerEvents:"all"}},i?i(this.props):s)}}]),o}(n.PureComponent);function Oa(e){return a().createElement(ka.Consumer,null,(function(t){return a().createElement(Ra,(0,fn.Z)({},t,e))}))}Ra.propTypes={customTextRenderer:wn().func,fontName:wn().string.isRequired,itemIndex:wn().number.isRequired,page:aa.isRequired,rotate:la,scale:wn().number,str:wn().string.isRequired,transform:wn().arrayOf(wn().number).isRequired,width:wn().number.isRequired};var Ia=function(e){(0,yn.Z)(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function i(){var e;(0,pn.Z)(this,i);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=n.call.apply(n,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{textItems:null}),(0,_n.Z)((0,mn.Z)(e),"loadTextItems",(function(){var t=Cn(e.props.page.getTextContent());e.runningTask=t,t.promise.then((function(t){var r=t.items;e.setState({textItems:r},e.onLoadSuccess)})).catch((function(t){e.onLoadError(t)}))})),(0,_n.Z)((0,mn.Z)(e),"onLoadSuccess",(function(){var t=e.props.onGetTextSuccess,r=e.state.textItems;t&&t(r)})),(0,_n.Z)((0,mn.Z)(e),"onLoadError",(function(t){e.setState({textItems:!1});var r=e.props.onGetTextError;r&&r(t)})),e}return(0,vn.Z)(i,[{key:"componentDidMount",value:function(){Rn(this.props.page),this.loadTextItems()}},{key:"componentDidUpdate",value:function(e){var t=this.props.page;e.page&&t!==e.page&&this.loadTextItems()}},{key:"componentWillUnmount",value:function(){Yn(this.runningTask)}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}},{key:"renderTextItems",value:function(){var e=this.state.textItems;return e?e.map((function(e,t){return a().createElement(Oa,(0,fn.Z)({key:t,itemIndex:t},e))})):null}},{key:"render",value:function(){var e=this.unrotatedViewport,t=this.rotate;return a().createElement("div",{className:"react-pdf__Page__textContent",style:{position:"absolute",top:"50%",left:"50%",width:"".concat(e.width,"px"),height:"".concat(e.height,"px"),color:"transparent",transform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),WebkitTransform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),pointerEvents:"none"}},this.renderTextItems())}}]),i}(n.PureComponent);function Fa(e){return a().createElement(ka.Consumer,null,(function(t){return a().createElement(Ia,(0,fn.Z)({},t,e))}))}Ia.propTypes={onGetTextError:wn().func,onGetTextSuccess:wn().func,page:aa.isRequired,rotate:la,scale:wn().number};var Da=function(e){(0,yn.Z)(o,e);var t,r,i=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function o(){var e;(0,pn.Z)(this,o);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=i.call.apply(i,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{annotations:null}),(0,_n.Z)((0,mn.Z)(e),"layerElement",(0,n.createRef)()),(0,_n.Z)((0,mn.Z)(e),"loadAnnotations",(function(){var t=Cn(e.props.page.getAnnotations());e.runningTask=t,t.promise.then((function(t){e.setState({annotations:t},e.onLoadSuccess)})).catch((function(t){e.onLoadError(t)}))})),(0,_n.Z)((0,mn.Z)(e),"onLoadSuccess",(function(){var t=e.props.onGetAnnotationsSuccess,r=e.state.annotations;t&&t(r)})),(0,_n.Z)((0,mn.Z)(e),"onLoadError",(function(t){e.setState({annotations:!1});var r=e.props.onGetAnnotationsError;r&&r(t)})),(0,_n.Z)((0,mn.Z)(e),"onRenderSuccess",(function(){var t=e.props.onRenderAnnotationLayerSuccess;t&&t()})),(0,_n.Z)((0,mn.Z)(e),"onRenderError",(function(t){var r=e.props.onRenderAnnotationLayerError;r&&r(t)})),e}return(0,vn.Z)(o,[{key:"componentDidMount",value:function(){Rn(this.props.page),this.loadAnnotations()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.page,n=t.renderForms;(e.page&&r!==e.page||n!==e.renderForms)&&this.loadAnnotations()}},{key:"componentWillUnmount",value:function(){Yn(this.runningTask)}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}},{key:"renderAnnotationLayer",value:function(){var e=this.state.annotations;if(e){var t=this.props,r=t.imageResourcesPath,n=t.linkService,a=t.page,i=t.renderForms,o=this.viewport.clone({dontFlip:!0}),s={annotations:e,div:this.layerElement.current,imageResourcesPath:r,linkService:n,page:a,renderForms:i,viewport:o};this.layerElement.current.innerHTML="";try{cn.AnnotationLayer.render(s),this.onRenderSuccess()}catch(e){this.onRenderError(e)}}}},{key:"render",value:function(){return a().createElement("div",{className:"react-pdf__Page__annotations annotationLayer",ref:this.layerElement},this.renderAnnotationLayer())}}]),o}(n.PureComponent);Da.propTypes={imageResourcesPath:wn().string,linkService:na.isRequired,onGetAnnotationsError:wn().func,onGetAnnotationsSuccess:wn().func,onRenderAnnotationLayerError:wn().func,onRenderAnnotationLayerSuccess:wn().func,page:aa,renderForms:wn().bool,rotate:la,scale:wn().number};const La=function(e){return a().createElement(On.Consumer,null,(function(t){return a().createElement(ka.Consumer,null,(function(r){return a().createElement(Da,(0,fn.Z)({},t,r,e))}))}))};function Ma(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Na(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ma(Object(r),!0).forEach((function(t){(0,_n.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ma(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var ja=function(e){(0,yn.Z)(o,e);var t,r,i=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,bn.Z)(t);if(r){var a=(0,bn.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,gn.Z)(this,e)});function o(){var e;(0,pn.Z)(this,o);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return e=i.call.apply(i,[this].concat(r)),(0,_n.Z)((0,mn.Z)(e),"state",{page:null}),(0,_n.Z)((0,mn.Z)(e),"pageElement",(0,n.createRef)()),(0,_n.Z)((0,mn.Z)(e),"onLoadSuccess",(function(){var t=e.props,r=t.onLoadSuccess,n=t.registerPage,a=e.state.page;r&&r(Zn(a,e.scale)),n&&n(e.pageIndex,e.pageElement.current)})),(0,_n.Z)((0,mn.Z)(e),"onLoadError",(function(t){e.setState({page:!1});var r=e.props.onLoadError;r&&r(t)})),(0,_n.Z)((0,mn.Z)(e),"loadPage",(function(){var t=e.props.pdf,r=e.getPageNumber();if(r){e.setState((function(e){return e.page?{page:null}:null}));var n=Cn(t.getPage(r));e.runningTask=n,n.promise.then((function(t){e.setState({page:t},e.onLoadSuccess)})).catch((function(t){e.onLoadError(t)}))}})),e}return(0,vn.Z)(o,[{key:"componentDidMount",value:function(){Rn(this.props.pdf),this.loadPage()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;if(e.pdf&&t!==e.pdf||this.getPageNumber()!==this.getPageNumber(e)){var r=this.props.unregisterPage;r&&r(this.getPageIndex(e)),this.loadPage()}}},{key:"componentWillUnmount",value:function(){var e=this.props.unregisterPage;e&&e(this.pageIndex),Yn(this.runningTask)}},{key:"childContext",get:function(){var e=this.state.page;if(!e)return{};var t=this.props,r=t.canvasBackground,n=t.customTextRenderer,a=t.onGetAnnotationsError,i=t.onGetAnnotationsSuccess,o=t.onGetTextError,s=t.onGetTextSuccess,l=t.onRenderAnnotationLayerError,u=t.onRenderAnnotationLayerSuccess,c=t.onRenderError,f=t.onRenderSuccess,d=t.renderForms,h=t.renderInteractiveForms;return{canvasBackground:r,customTextRenderer:n,onGetAnnotationsError:a,onGetAnnotationsSuccess:i,onGetTextError:o,onGetTextSuccess:s,onRenderAnnotationLayerError:l,onRenderAnnotationLayerSuccess:u,onRenderError:c,onRenderSuccess:f,page:e,renderForms:null!=d?d:h,rotate:this.rotate,scale:this.scale}}},{key:"getPageIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return Bn(e.pageNumber)?e.pageNumber-1:Bn(e.pageIndex)?e.pageIndex:null}},{key:"getPageNumber",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return Bn(e.pageNumber)?e.pageNumber:Bn(e.pageIndex)?e.pageIndex+1:null}},{key:"pageIndex",get:function(){return this.getPageIndex()}},{key:"pageNumber",get:function(){return this.getPageNumber()}},{key:"rotate",get:function(){var e=this.props.rotate;if(Bn(e))return e;var t=this.state.page;return t?t.rotate:null}},{key:"scale",get:function(){var e=this.state.page;if(!e)return null;var t=this.props,r=t.scale,n=t.width,a=t.height,i=this.rotate,o=1,s=null===r?1:r;if(n||a){var l=e.getViewport({scale:1,rotation:i});o=n?n/l.width:a/l.height}return s*o}},{key:"eventProps",get:function(){var e=this;return Pn(this.props,(function(){var t=e.state.page;return t?Zn(t,e.scale):t}))}},{key:"pageKey",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"@").concat(this.scale,"/").concat(this.rotate)}},{key:"pageKeyNoScale",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"/").concat(this.rotate)}},{key:"renderMainLayer",value:function(){var e=this.props,t=e.canvasRef;switch(e.renderMode){case"none":return null;case"svg":return a().createElement(Ta,{key:"".concat(this.pageKeyNoScale,"_svg")});default:return a().createElement(Pa,{key:"".concat(this.pageKey,"_canvas"),canvasRef:t})}}},{key:"renderTextLayer",value:function(){return this.props.renderTextLayer?a().createElement(Fa,{key:"".concat(this.pageKey,"_text")}):null}},{key:"renderAnnotationLayer",value:function(){return this.props.renderAnnotationLayer?a().createElement(La,{key:"".concat(this.pageKey,"_annotations")}):null}},{key:"renderChildren",value:function(){var e=this.props.children;return a().createElement(ka.Provider,{value:this.childContext},this.renderMainLayer(),this.renderTextLayer(),this.renderAnnotationLayer(),e)}},{key:"renderContent",value:function(){var e=this.pageNumber,t=this.props.pdf,r=this.state.page;if(!e){var n=this.props.noData;return a().createElement(In,{type:"no-data"},"function"==typeof n?n():n)}if(null===t||null===r){var i=this.props.loading;return a().createElement(In,{type:"loading"},"function"==typeof i?i():i)}if(!1===t||!1===r){var o=this.props.error;return a().createElement(In,{type:"error"},"function"==typeof o?o():o)}return this.renderChildren()}},{key:"render",value:function(){var e=this.pageNumber,t=this.props,r=t.className,n=t.inputRef;return a().createElement("div",(0,fn.Z)({className:Tn("react-pdf__Page",r),"data-page-number":e,ref:Aa(n,this.pageElement),style:{position:"relative"}},this.eventProps),this.renderContent())}}]),o}(n.PureComponent);ja.defaultProps={error:"Failed to load the page.",loading:"Loading page…",noData:"No page specified.",renderAnnotationLayer:!0,renderForms:!1,renderMode:"canvas",renderTextLayer:!0,scale:1};var Ba=wn().oneOfType([wn().func,wn().node]);function Ua(e,t){return a().createElement(On.Consumer,null,(function(r){return a().createElement(ja,(0,fn.Z)({ref:t},r,e))}))}ja.propTypes=Na(Na({},$n),{},{canvasBackground:wn().string,children:wn().node,className:ta,customTextRenderer:wn().func,error:Ba,height:wn().number,imageResourcesPath:wn().string,inputRef:oa,loading:Ba,noData:Ba,onGetTextError:wn().func,onGetTextSuccess:wn().func,onLoadError:wn().func,onLoadSuccess:wn().func,onRenderError:wn().func,onRenderSuccess:wn().func,pageIndex:function(e,t,r){var n=e[t],a=e.pageNumber,i=e.pdf;if(!jn(i))return null;if(jn(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat((0,hn.Z)(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<0)return new Error("Expected `".concat(t,"` to be greater or equal to 0."));var o=i.numPages;if(n+1>o)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(o-1,"."))}else if(!jn(a))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null},pageNumber:function(e,t,r){var n=e[t],a=e.pageIndex,i=e.pdf;if(!jn(i))return null;if(jn(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat((0,hn.Z)(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<1)return new Error("Expected `".concat(t,"` to be greater or equal to 1."));var o=i.numPages;if(n>o)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(o,"."))}else if(!jn(a))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null},pdf:ia,registerPage:wn().func,renderAnnotationLayer:wn().bool,renderForms:wn().bool,renderInteractiveForms:wn().bool,renderMode:sa,renderTextLayer:wn().bool,rotate:la,scale:wn().number,unregisterPage:wn().func,width:wn().number});const qa=a().forwardRef(Ua);"Loading PDF.js worker may not work on protocols other than HTTP/HTTPS. ".concat(Hn),cn.GlobalWorkerOptions.workerSrc="pdf.worker.js";var za="SET_ZOOM_LEVEL",Wa=function(e){return{type:za,value:e}},Ga="SET_PDF_PAGINATED",Ha="SET_NUM_PAGES",Va=function(e){return{type:Ha,value:e}},Ya="SET_CURRENT_PAGE",Za=function(e){return{type:Ya,value:e}},Xa=function(){return Xa=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Xa.apply(this,arguments)},Ka={defaultZoomLevel:1,zoomLevel:1,zoomJump:.1,paginated:!0,numPages:0,currentPage:1},Ja=function(e,t){switch(void 0===e&&(e=Ka),t.type){case za:var r=t.value;return Xa(Xa({},e),{zoomLevel:r});case Ga:return r=t.value,Xa(Xa({},e),{paginated:r});case Ha:return r=t.value,Xa(Xa({},e),{numPages:r});case Ya:return r=t.value,Xa(Xa({},e),{currentPage:r});default:return e}},Qa=function(){return Qa=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Qa.apply(this,arguments)},$a=(0,n.createContext)({state:Ka,dispatch:function(){return null}}),ei=function(e){var t,r,i,o,s,l,u,c,f,d=e.children,h=e.mainState,p=(0,n.useReducer)(Ja,Qa(Qa({},Ka),{defaultZoomLevel:null!==(i=null===(r=null===(t=h.config)||void 0===t?void 0:t.pdfZoom)||void 0===r?void 0:r.defaultZoom)&&void 0!==i?i:Ka.defaultZoomLevel,zoomLevel:null!==(l=null===(s=null===(o=h.config)||void 0===o?void 0:o.pdfZoom)||void 0===s?void 0:s.defaultZoom)&&void 0!==l?l:Ka.zoomLevel,zoomJump:null!==(f=null===(c=null===(u=h.config)||void 0===u?void 0:u.pdfZoom)||void 0===c?void 0:c.zoomJump)&&void 0!==f?f:Ka.zoomJump,mainState:h})),v=p[0],m=p[1];return a().createElement($a.Provider,{value:{state:v,dispatch:m}},d)},ti=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};const ri=function(e){var t=e.pageNum,r=(0,n.useContext)($a).state,i=r.mainState,o=r.paginated,s=r.zoomLevel,l=r.numPages,u=r.currentPage,c=Vt().t,f=(null==i?void 0:i.rendererRect)||null,d=t||u;return a().createElement(ii,{id:"pdf-page-wrapper",last:d>=l},!o&&a().createElement(oi,{id:"pdf-page-info"},c("pdfPluginPageNumber",{currentPage:d,allPagesCount:l})),a().createElement(qa,{pageNumber:d||u,scale:s,height:((null==f?void 0:f.height)||100)-100,width:((null==f?void 0:f.width)||100)-100,loading:c("pdfPluginLoading")}))};var ni,ai,ii=Fe.div(ni||(ni=ti(["\n  margin: 20px 0;\n"],["\n  margin: 20px 0;\n"]))),oi=Fe.div(ai||(ai=ti(["\n  padding: 0 0 10px 10px;\n  color: ",";\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n"],["\n  padding: 0 0 10px 10px;\n  color: ",";\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n"])),(function(e){return e.theme.textTertiary})),si=function(){for(var e=(0,n.useContext)($a).state.numPages,t=[],r=0;r<e;r++)t.push(a().createElement(ri,{key:r+1,pageNum:r+1}));return a().createElement(a().Fragment,null,t)},li=Fe(ha)(ci||(ci=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n"],["\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n"])));const ui=function(){var e=(0,n.useContext)($a),t=e.state,r=t.mainState,i=t.paginated,o=e.dispatch,s=Vt().t,l=(null==r?void 0:r.currentDocument)||null;return(0,n.useEffect)((function(){o(Va(Ka.numPages))}),[l]),l&&void 0!==l.fileData?a().createElement(li,{file:l.fileData,onLoadSuccess:function(e){var t=e.numPages;return o(Va(t))},loading:a().createElement("span",null,s("pdfPluginLoading"))},i?a().createElement(ri,null):a().createElement(si,null)):null};var ci,fi=function(){return fi=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},fi.apply(this,arguments)},di=function(e){return a().createElement(pi,fi({},e,{reverse:!0}))},hi=function(e){return a().createElement(pi,fi({},e))},pi=function(e){var t=e.color,r=e.size,n=e.reverse;return a().createElement("svg",{width:r||"100%",height:r||"100%",style:{transform:"".concat(n?"rotate(180deg)":"")},viewBox:"0 0 12 12",version:"1.1"},a().createElement("g",{id:"Icons",stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd"},a().createElement("g",{id:"Rounded",transform:"translate(-548.000000, -1000.000000)"},a().createElement("g",{id:"AV",transform:"translate(100.000000, 852.000000)"},a().createElement("g",{id:"-Round-/-AV-/-skip_next",transform:"translate(442.000000, 142.000000)"},a().createElement("g",null,a().createElement("rect",{id:"Rectangle-Copy-52",x:"0",y:"0",width:"24",height:"24"}),a().createElement("path",{d:"M7.58,16.89 L13.35,12.82 C13.91,12.42 13.91,11.58 13.35,11.19 L7.58,7.11 C6.91,6.65 6,7.12 6,7.93 L6,16.07 C6,16.88 6.91,17.35 7.58,16.89 Z M16,7 L16,17 C16,17.55 16.45,18 17,18 C17.55,18 18,17.55 18,17 L18,7 C18,6.45 17.55,6 17,6 C16.45,6 16,6.45 16,7 Z",id:"icon_color",fill:t||"#aaa"})))))))},vi=function(e){var t=e.color,r=e.size,n=e.reverse;return a().createElement("svg",{width:r||"100%",height:r||"100%",style:{transform:"".concat(n?"rotate(180deg)":"")},id:"Layer_1",viewBox:"0 0 24 24"},a().createElement("path",{d:"M20.57,9.43A8,8,0,0,0,5.26,10,5,5,0,1,0,5,20h5V18H5a3,3,0,0,1,0-6,3.1,3.1,0,0,1,.79.12l1.12.31.14-1.15a6,6,0,0,1,11.74-.82l.15.54.54.16A3.46,3.46,0,0,1,22,14.5,3.5,3.5,0,0,1,18.5,18H16v2h2.5A5.48,5.48,0,0,0,20.57,9.43Z",fill:t||"#aaa"}),a().createElement("polygon",{points:"12 11 12 15.59 10.71 14.29 9.29 15.71 13 19.41 16.71 15.71 15.29 14.29 14 15.59 14 11 12 11",fill:t||"#aaa"}))},mi=function(e){return a().createElement(gi,fi({},e))},yi=function(e){return a().createElement(gi,fi({},e,{reverse:!0}))},gi=function(e){var t=e.color,r=e.size,n=e.reverse;return a().createElement("svg",{width:r||"100%",height:r||"100%",viewBox:"0 0 32 32",version:"1.1"},a().createElement("g",{id:"Page-1",stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd"},a().createElement("g",{id:"search-plus-icon",fill:t||"#aaa"},a().createElement("path",{id:"search-plus",d:n?"M 13 13 L 16 13 L 19 13 L 19 16 L 16 16 L 13 16 L 10 16 L 10 13 Z M 19.4271 21.4271 C 18.0372 22.4175 16.3367 23 14.5 23 C 9.8056 23 6 19.1944 6 14.5 C 6 9.8056 9.8056 6 14.5 6 C 19.1944 6 23 9.8056 23 14.5 C 23 16.3367 22.4175 18.0372 21.4271 19.4271 L 27.0119 25.0119 C 27.5621 25.5621 27.5575 26.4425 27.0117 26.9883 L 26.9883 27.0117 C 26.4439 27.5561 25.5576 27.5576 25.0119 27.0119 L 19.4271 21.4271 L 19.4271 21.4271 L 19.4271 21.4271 Z M 14.5 21 C 18.0899 21 21 18.0899 21 14.5 C 21 10.9101 18.0899 8 14.5 8 C 10.9101 8 8 10.9101 8 14.5 C 8 18.0899 10.9101 21 14.5 21 L 14.5 21 Z":"M 13 13 L 13 10 L 16 10 L 16 13 L 19 13 L 19 16 L 16 16 L 16 19 L 13 19 L 13 16 L 10 16 L 10 13 Z M 19.4271 21.4271 C 18.0372 22.4175 16.3367 23 14.5 23 C 9.8056 23 6 19.1944 6 14.5 C 6 9.8056 9.8056 6 14.5 6 C 19.1944 6 23 9.8056 23 14.5 C 23 16.3367 22.4175 18.0372 21.4271 19.4271 L 27.0119 25.0119 C 27.5621 25.5621 27.5575 26.4425 27.0117 26.9883 L 26.9883 27.0117 C 26.4439 27.5561 25.5576 27.5576 25.0119 27.0119 L 19.4271 21.4271 L 19.4271 21.4271 L 19.4271 21.4271 Z M 14.5 21 C 18.0899 21 21 18.0899 21 14.5 C 21 10.9101 18.0899 8 14.5 8 C 10.9101 8 8 10.9101 8 14.5 C 8 18.0899 10.9101 21 14.5 21 L 14.5 21 Z"}))))},bi=function(e){var t=e.color,r=e.size;return a().createElement("svg",{width:r||"100%",height:r||"100%",viewBox:"0 0 24 24"},a().createElement("path",{fill:t||"#aaa",d:"M9.29,13.29,4,18.59V17a1,1,0,0,0-2,0v4a1,1,0,0,0,.08.38,1,1,0,0,0,.54.54A1,1,0,0,0,3,22H7a1,1,0,0,0,0-2H5.41l5.3-5.29a1,1,0,0,0-1.42-1.42ZM5.41,4H7A1,1,0,0,0,7,2H3a1,1,0,0,0-.38.08,1,1,0,0,0-.54.54A1,1,0,0,0,2,3V7A1,1,0,0,0,4,7V5.41l5.29,5.3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42ZM21,16a1,1,0,0,0-1,1v1.59l-5.29-5.3a1,1,0,0,0-1.42,1.42L18.59,20H17a1,1,0,0,0,0,2h4a1,1,0,0,0,.38-.08,1,1,0,0,0,.54-.54A1,1,0,0,0,22,21V17A1,1,0,0,0,21,16Zm.92-13.38a1,1,0,0,0-.54-.54A1,1,0,0,0,21,2H17a1,1,0,0,0,0,2h1.59l-5.3,5.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0L20,5.41V7a1,1,0,0,0,2,0V3A1,1,0,0,0,21.92,2.62Z"}))},_i=function(e){var t=e.color,r=e.size,n=e.reverse;return a().createElement("svg",{width:r||"100%",height:r||"100%",style:{transform:"".concat(n?"rotate(90deg)":"")},version:"1.1",id:"Scroll_1",viewBox:"0 0 297 297",xmlSpace:"preserve"},a().createElement("path",{fill:t||"#aaa",d:"M206.004,200.723h-31.231V96.277h31.231c0.005,0,0.014,0,0.019,0c5.289,0,9.575-4.287,9.575-9.574\n  c0-2.342-0.841-4.488-2.236-6.151L156.168,3.851C154.36,1.428,151.515,0,148.492,0c-3.023,0-5.868,1.428-7.675,3.851L83.302,80.98\n  c-2.166,2.902-2.507,6.779-0.883,10.017c1.624,3.236,4.936,5.28,8.559,5.28h31.231v104.445H90.978c-3.623,0-6.934,2.044-8.559,5.28\n  c-1.624,3.237-1.283,7.114,0.883,10.017l57.513,77.129c1.808,2.424,4.652,3.852,7.675,3.852c3.023,0,5.868-1.428,7.676-3.852\n  l57.514-77.129c2.164-2.902,2.507-6.779,0.883-10.017C212.938,202.767,209.627,200.723,206.004,200.723z"}))},Si=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};const wi=function(){var e=(0,n.useContext)($a),t=e.state,r=t.currentPage,i=t.numPages,o=e.dispatch,s=Vt().t;return a().createElement(Pi,{id:"pdf-pagination"},a().createElement(Ci,{id:"pdf-pagination-prev",onClick:function(){return o(Za(r-1))},disabled:1===r},a().createElement(di,{color:"#000",size:"50%"})),a().createElement(Ri,{id:"pdf-pagination-info"},s("pdfPluginPageNumber",{currentPage:r,allPagesCount:i})),a().createElement(Ti,{id:"pdf-pagination-next",onClick:function(){return o(Za(r+1))},disabled:r>=i},a().createElement(hi,{color:"#000",size:"50%"})))};var Ai,ki,xi,Ei,Pi=Fe.div(Ai||(Ai=Si(["\n  display: flex;\n  align-items: center;\n"],["\n  display: flex;\n  align-items: center;\n"]))),Ci=Fe(st)(ki||(ki=Si(["\n  width: 30px;\n  height: 30px;\n  margin: 0 5px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"],["\n  width: 30px;\n  height: 30px;\n  margin: 0 5px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"]))),Ti=Fe(Ci)(xi||(xi=Si(["\n  margin: 0 20px 0 5px;\n"],["\n  margin: 0 20px 0 5px;\n"]))),Ri=Fe.div(Ei||(Ei=Si(["\n  color: ",";\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n"],["\n  color: ",";\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n"])),(function(e){return e.theme.textPrimary})),Oi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};const Ii=function(){var e=Vt().t,t=(0,n.useContext)($a),r=t.state,i=r.mainState,o=r.paginated,s=r.zoomLevel,l=r.numPages,u=r.zoomJump,c=r.defaultZoomLevel,f=t.dispatch,d=(null==i?void 0:i.currentDocument)||null;return a().createElement(Mi,{id:"pdf-controls"},o&&l>1&&a().createElement(wi,null),(null==d?void 0:d.fileData)&&a().createElement(ji,{id:"pdf-download",href:null==d?void 0:d.fileData,download:(null==d?void 0:d.fileName)||(null==d?void 0:d.uri),title:e("downloadButtonLabel")},a().createElement(vi,{color:"#000",size:"75%"})),a().createElement(Ni,{id:"pdf-zoom-out",onMouseDown:function(){return f(Wa(s-u))}},a().createElement(yi,{color:"#000",size:"80%"})),a().createElement(Ni,{id:"pdf-zoom-in",onMouseDown:function(){return f(Wa(s+u))}},a().createElement(mi,{color:"#000",size:"80%"})),a().createElement(Ni,{id:"pdf-zoom-reset",onMouseDown:function(){return f(Wa(c))},disabled:s===c},a().createElement(bi,{color:"#000",size:"70%"})),l>1&&a().createElement(Ni,{id:"pdf-toggle-pagination",onMouseDown:function(){return f({type:Ga,value:!o})}},a().createElement(_i,{color:"#000",size:"70%",reverse:o})))};var Fi,Di,Li,Mi=Fe.div(Fi||(Fi=Oi(["\n  display: flex;\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  justify-content: flex-end;\n  padding: 8px;\n  background-color: ",";\n  box-shadow: 0px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    padding: 6px;\n  }\n"],["\n  display: flex;\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  justify-content: flex-end;\n  padding: 8px;\n  background-color: ",";\n  box-shadow: 0px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    padding: 6px;\n  }\n"])),(function(e){return e.theme.tertiary})),Ni=Fe(st)(Di||(Di=Oi(["\n  width: 30px;\n  height: 30px;\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"],["\n  width: 30px;\n  height: 30px;\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"]))),ji=Fe(lt)(Li||(Li=Oi(["\n  width: 30px;\n  height: 30px;\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"],["\n  width: 30px;\n  height: 30px;\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n"])));cn.GlobalWorkerOptions.workerSrc="https://unpkg.com/pdfjs-dist@".concat(cn.version,"/legacy/build/pdf.worker.min.js");var Bi=function(e){var t=e.mainState;return a().createElement(ei,{mainState:t},a().createElement(zi,{id:"pdf-renderer","data-testid":"pdf-renderer"},a().createElement(Ii,null),a().createElement(ui,null)))};const Ui=Bi;Bi.fileTypes=["pdf","application/pdf"],Bi.weight=0;var qi,zi=Fe.div(qi||(qi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow-y: auto;\n\n  /* width */\n  &::-webkit-scrollbar {\n    ",";\n  }\n  /* Track */\n  &::-webkit-scrollbar-track {\n    /* background: ","; */\n  }\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: ",";\n  }\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: ",";\n  }\n"],["\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow-y: auto;\n\n  /* width */\n  &::-webkit-scrollbar {\n    ",";\n  }\n  /* Track */\n  &::-webkit-scrollbar-track {\n    /* background: ","; */\n  }\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: ",";\n  }\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: ",";\n  }\n"])),(function(e){return e.theme.disableThemeScrollbar?"":"width: 10px"}),(function(e){return e.theme.secondary}),(function(e){return e.theme.tertiary}),(function(e){return e.theme.primary})),Wi=function(){return Wi=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Wi.apply(this,arguments)},Gi=Fe(kr)(Yi||(Yi=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  background-color: white;\n  background-image: linear-gradient(45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(-45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, #e0e0e0 75%),\n    linear-gradient(-45deg, transparent 75%, #e0e0e0 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n"],["\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  background-color: white;\n  background-image: linear-gradient(45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(-45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, #e0e0e0 75%),\n    linear-gradient(-45deg, transparent 75%, #e0e0e0 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n"]))),Hi=function(e){return a().createElement(Gi,Wi({},e))};Hi.fileTypes=["png","image/png"],Hi.weight=0;const Vi=Hi;var Yi,Zi=void 0,Xi=void 0,Ki=[],Ji=function(e){var t={315:"Artist",258:"BitsPerSample",265:"CellLength",264:"CellWidth",320:"ColorMap",259:"Compression",33432:"Copyright",306:"DateTime",338:"ExtraSamples",266:"FillOrder",289:"FreeByteCounts",288:"FreeOffsets",291:"GrayResponseCurve",290:"GrayResponseUnit",316:"HostComputer",270:"ImageDescription",257:"ImageLength",256:"ImageWidth",271:"Make",281:"MaxSampleValue",280:"MinSampleValue",272:"Model",254:"NewSubfileType",274:"Orientation",262:"PhotometricInterpretation",284:"PlanarConfiguration",296:"ResolutionUnit",278:"RowsPerStrip",277:"SamplesPerPixel",305:"Software",279:"StripByteCounts",273:"StripOffsets",255:"SubfileType",263:"Threshholding",282:"XResolution",283:"YResolution",326:"BadFaxLines",327:"CleanFaxData",343:"ClipPath",328:"ConsecutiveBadFaxLines",433:"Decode",434:"DefaultImageColor",269:"DocumentName",336:"DotRange",321:"HalftoneHints",346:"Indexed",347:"JPEGTables",285:"PageName",297:"PageNumber",317:"Predictor",319:"PrimaryChromaticities",532:"ReferenceBlackWhite",339:"SampleFormat",559:"StripRowCounts",330:"SubIFDs",292:"T4Options",293:"T6Options",325:"TileByteCounts",323:"TileLength",324:"TileOffsets",322:"TileWidth",301:"TransferFunction",318:"WhitePoint",344:"XClipPathUnits",286:"XPosition",529:"YCbCrCoefficients",531:"YCbCrPositioning",530:"YCbCrSubSampling",345:"YClipPathUnits",287:"YPosition",37378:"ApertureValue",40961:"ColorSpace",36868:"DateTimeDigitized",36867:"DateTimeOriginal",34665:"Exif IFD",36864:"ExifVersion",33434:"ExposureTime",41728:"FileSource",37385:"Flash",40960:"FlashpixVersion",33437:"FNumber",42016:"ImageUniqueID",37384:"LightSource",37500:"MakerNote",37377:"ShutterSpeedValue",37510:"UserComment",33723:"IPTC",34675:"ICC Profile",700:"XMP",42112:"GDAL_METADATA",42113:"GDAL_NODATA",34377:"Photoshop"};return e in t?t[e]:"Tag"+e},Qi=function(e){var t,r={1:"BYTE",2:"ASCII",3:"SHORT",4:"LONG",5:"RATIONAL",6:"SBYTE",7:"UNDEFINED",8:"SSHORT",9:"SLONG",10:"SRATIONAL",11:"FLOAT",12:"DOUBLE"};return e in r&&(t=r[e]),t},$i=function(e,t,r){r=r||0;var n=t+Math.floor(r/8),a=r+e,i=32-e;if(a<=0)throw RangeError("No bits requested");if(a<=8)var o=24+r,s=Zi.getUint8(n,Xi);else if(a<=16)o=16+r,s=Zi.getUint16(n,Xi);else{if(!(a<=32))throw RangeError("Too many bits requested");o=r,s=Zi.getUint32(n,Xi)}return{bits:s<<o>>>i,byteOffset:n+Math.floor(a/8),bitOffset:a%8}},eo=function(e,t){if(e<=0)throw RangeError("No bytes requested");if(e<=1)return Zi.getUint8(t,Xi);if(e<=2)return Zi.getUint16(t,Xi);if(e<=3)return Zi.getUint32(t,Xi)>>>8;if(e<=4)return Zi.getUint32(t,Xi);throw RangeError("Too many bytes requested")},to=function(e,t,r,n){var a=[],i=function(e){var t;return-1!==["BYTE","ASCII","SBYTE","UNDEFINED"].indexOf(e)?t=1:-1!==["SHORT","SSHORT"].indexOf(e)?t=2:-1!==["LONG","SLONG","FLOAT"].indexOf(e)?t=4:-1!==["RATIONAL","SRATIONAL","DOUBLE"].indexOf(e)&&(t=8),t}(t);if(i*r<=4){if(!1===Xi)var o=n>>>8*(4-i);else o=n;a.push(o)}else for(var s=0;s<r;s++){var l=i*s;if(i>=8){if(-1===["RATIONAL","SRATIONAL"].indexOf(t))throw TypeError("Can't handle this field type or size");a.push(eo(4,n+l)),a.push(eo(4,n+l+4))}else a.push(eo(i,n+l))}return"ASCII"===t&&a.forEach((function(e,t,r){r[t]=String.fromCharCode(e)})),a},ro=function(e,t){var r=Math.pow(2,8-t);return Math.floor(e*r+(r-1))},no=function(e,t,r,n){return void 0===n&&(n=1),"rgba("+e+", "+t+", "+r+", "+n+")"},ao=function(e){for(var t=eo(2,e),r=[],n=e+2,a=0;a<t;n+=12,a++){var i=eo(2,n),o=eo(2,n+2),s=eo(4,n+4),l=eo(4,n+8),u=Ji(i),c=Qi(o),f=to(0,c,s,l);r[u]={type:c,values:f}}Ki.push(r);var d=eo(4,n);return 0===d?Ki:ao(d)},io=function(){return io=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},io.apply(this,arguments)},oo=function(e){var t=e.mainState.currentDocument,r=Vt().t,i=(0,n.useState)(!1),o=i[0],s=i[1],l=(0,n.useState)(!1),u=l[0],c=l[1];return(0,n.useEffect)((function(){if(t&&!o){var e=document.getElementById("tiff-img");try{e&&function(e,t){var r=t||document.createElement("canvas");if(e&&(Zi=new DataView(e),Xi=function(){var e=eo(2,0);if(18761===e)Xi=!0;else{if(19789!==e)throw TypeError("Invalid byte order value.");Xi=!1}return Xi}(),function(){if(42!==eo(2,2))throw RangeError("You forgot your towel!");return!0}())){var n=eo(4,4),a=(Ki=ao(n))[0],i=a.ImageWidth.values[0],o=a.ImageLength.values[0];r.width=i,r.height=o;var s=[],l=a.Compression?a.Compression.values[0]:1,u=a.SamplesPerPixel.values[0],c=[],f=0,d=!1;if(a.BitsPerSample.values.forEach((function(e,t,r){c[t]={bitsPerSample:e,hasBytesPerSample:!1,bytesPerSample:void 0},e%8==0&&(c[t].hasBytesPerSample=!0,c[t].bytesPerSample=e/8),f+=e}),void 0),f%8==0){d=!0;var h=f/8}var p=a.StripOffsets.values,v=p.length;if(a.StripByteCounts)var m=a.StripByteCounts.values;else{if(1!==v)throw Error("Cannot recover from missing StripByteCounts");m=[Math.ceil(i*o*f/8)]}for(var y=0;y<v;y++){var g=p[y];s[y]=[];for(var b=m[y],_=0,S=0,w=1,A=!0,k=[],x=0,E=0,P=0;_<b;_+=w)switch(l){case 1:var C=0;for(k=[];C<u;C++){if(!c[C].hasBytesPerSample){var T=$i(c[C].bitsPerSample,g+_,S);throw k.push(T.bits),_=T.byteOffset-g,S=T.bitOffset,RangeError("Cannot handle sub-byte bits per sample")}var R=c[C].bytesPerSample*C;k.push(eo(c[C].bytesPerSample,g+_+R))}if(s[y].push(k),!d)throw w=0,RangeError("Cannot handle sub-byte bits per pixel");w=h;break;case 2:case 3:case 4:case 5:case 6:case 7:default:break;case 32773:if(A){A=!1;var O=1,I=1,F=Zi.getInt8(g+_,Xi);F>=0&&F<=127?O=F+1:F>=-127&&F<=-1?I=1-F:A=!0}else{var D=eo(1,g+_);for(C=0;C<I;C++){if(!c[E].hasBytesPerSample)throw RangeError("Cannot handle sub-byte bits per sample");P=P<<8*x|D,++x===c[E].bytesPerSample&&(k.push(P),P=x=0,E++),E===u&&(s[y].push(k),k=[],E=0)}0==--O&&(A=!0)}w=1}}if(r.getContext){var L=r.getContext("2d");if(L.fillStyle=no(255,255,255,0),a.RowsPerStrip)var M=a.RowsPerStrip.values[0];else M=o;var N=s.length,j=o%M,B=0===j?M:j,U=M,q=0,z=a.PhotometricInterpretation.values[0],W=[],G=0;if(a.ExtraSamples&&(G=(W=a.ExtraSamples.values).length),a.ColorMap)var H=a.ColorMap.values,V=Math.pow(2,c[0].bitsPerSample);for(y=0;y<N;y++){y+1===N&&(U=B);for(var Y=s[y].length,Z=q*y,X=0,K=0;K<Y;X++)for(var J=0;J<i;J++,K++){var Q=s[y][K],$=0,ee=0,te=0,re=1;if(G>0)for(var ne=0;ne<G;ne++)if(1===W[ne]||2===W[ne]){re=Q[3+ne]/256;break}switch(z){case 0:if(c[0].hasBytesPerSample)var ae=Math.pow(16,2*c[0].bytesPerSample);Q.forEach((function(e,t,r){r[t]=ae-e}));case 1:$=ee=te=ro(Q[0],c[0].bitsPerSample);break;case 2:$=ro(Q[0],c[0].bitsPerSample),ee=ro(Q[1],c[1].bitsPerSample),te=ro(Q[2],c[2].bitsPerSample);break;case 3:if(void 0===H)throw Error("Palette image missing color map");var ie=Q[0];$=ro(H[ie],16),ee=ro(H[V+ie],16),te=ro(H[2*V+ie],16);break;case 4:throw RangeError("Not Yet Implemented: Transparency mask");case 5:throw RangeError("Not Yet Implemented: CMYK");case 6:throw RangeError("Not Yet Implemented: YCbCr");case 8:throw RangeError("Not Yet Implemented: CIELab");default:throw RangeError("Unknown Photometric Interpretation:",z)}L.fillStyle=no($,ee,te,re),L.fillRect(J,Z+X,1,1)}q=U}}}}(t.fileData,e),s(!0)}catch(e){c(!0)}}}),[t,o]),u?a().createElement(kr,io({},e),a().createElement("div",null,r("brokenFile"))):a().createElement(kr,io({},e),a().createElement(uo,{id:"tiff-img"}))};oo.fileTypes=["tif","tiff","image/tif","image/tiff"],oo.weight=0,oo.fileLoader=ir;const so=oo;var lo,uo=Fe.canvas(lo||(lo=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  max-width: 95%;\n  max-height: 95%;\n"],["\n  max-width: 95%;\n  max-height: 95%;\n"]))),co=function(e){var t=e.mainState.currentDocument;return a().createElement(po,{id:"txt-renderer"},null==t?void 0:t.fileData)};const fo=co;co.fileTypes=["txt","text/plain"],co.weight=0,co.fileLoader=sr;var ho,po=Fe.div(ho||(ho=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 30px;\n"],["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 30px;\n"]))),vo=r(57460),mo=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},yo=function(e){var t=e.mainState,r=t.currentDocument,i=t.config,o=(0,n.useState)([]),s=o[0],l=o[1];return(0,n.useEffect)((function(){var e,t;if(null==r?void 0:r.fileData){var n=(0,vo.parse)(r.fileData,{delimiter:null!==(e=null==i?void 0:i.csvDelimiter)&&void 0!==e?e:","});!(null===(t=n.errors)||void 0===t?void 0:t.length)&&n.data&&l(n.data)}}),[r,null==i?void 0:i.csvDelimiter]),s.length?a().createElement(So,null,a().createElement(wo,null,a().createElement("thead",null,a().createElement("tr",null,s[0].map((function(e){return a().createElement("th",{key:e},e)})))),a().createElement("tbody",null,s.slice(1,s.length).map((function(e){return a().createElement("tr",{key:e.join("")},e.map((function(e){return a().createElement("td",{key:e},e)})))}))))):null};const go=yo;yo.fileTypes=["csv","text/csv"],yo.weight=0,yo.fileLoader=sr;var bo,_o,So=Fe.div(bo||(bo=mo(["\n  width: 100%;\n"],["\n  width: 100%;\n"]))),wo=Fe.table(_o||(_o=mo(["\n  width: 100%;\n  text-align: left;\n\n  th,\n  td {\n    padding: 5px 10px;\n\n    &:empty {\n      display: none;\n    }\n  }\n"],["\n  width: 100%;\n  text-align: left;\n\n  th,\n  td {\n    padding: 5px 10px;\n\n    &:empty {\n      display: none;\n    }\n  }\n"]))),Ao=function(){return Ao=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Ao.apply(this,arguments)},ko=function(e){return a().createElement(kr,Ao({},e))};ko.fileTypes=["gif","image/gif"],ko.weight=0;var xo=[Or,Dr,qr,Hr,en,Ui,Vi,so,fo,go,ko],Eo=function(){return Eo=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Eo.apply(this,arguments)};_r&&(window.DataStream=null);const Po=(0,n.memo)((function(e){var t=e.documents,r=e.theme;if(!t)throw new Error("Please provide an array of documents to DocViewer!");return a().createElement(nt,Eo({},e),a().createElement(Ce,{theme:r?Eo(Eo({},br),r):br},a().createElement(To,Eo({id:"react-doc-viewer","data-testid":"react-doc-viewer"},e),a().createElement(tr,null),a().createElement(hr,null))))}));var Co,To=Fe.div(Co||(Co=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: #ffffff;\n  width: 100%;\n  height: 100%;\n"],["\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: #ffffff;\n  width: 100%;\n  height: 100%;\n"])))},22649:function(module,__unused_webpack_exports,__webpack_require__){var factory;factory=function(){return(()=>{var __webpack_modules__=[,(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.StatTimer=t.RenderingCancelledException=t.PixelsPerInch=t.PageViewport=t.PDFDateString=t.LinkTarget=t.DOMStandardFontDataFactory=t.DOMSVGFactory=t.DOMCanvasFactory=t.DOMCMapReaderFactory=void 0,t.addLinkAttributes=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.url,n=t.target,a=t.rel,i=t.enabled,s=void 0===i||i;(0,o.assert)(r&&"string"==typeof r,'addLinkAttributes: A valid "url" parameter must provided.');var l=(0,o.removeNullCharacters)(r);s?e.href=e.title=l:(e.href="",e.title="Disabled: ".concat(l),e.onclick=function(){return!1});var u="";switch(n){case R.NONE:break;case R.SELF:u="_self";break;case R.BLANK:u="_blank";break;case R.PARENT:u="_parent";break;case R.TOP:u="_top"}e.target=u,e.rel="string"==typeof a?a:_},t.deprecated=function(e){console.log("Deprecated API usage: "+e)},t.getFilenameFromUrl=function(e){var t=e.indexOf("#"),r=e.indexOf("?"),n=Math.min(t>0?t:e.length,r>0?r:e.length);return e.substring(e.lastIndexOf("/",n)+1,n)},t.getPdfFilenameFromUrl=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"document.pdf";if("string"!=typeof e)return t;if(O(e))return(0,o.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),t;var r=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,n=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,a=r.exec(e),i=n.exec(a[1])||n.exec(a[2])||n.exec(a[3]);if(i&&(i=i[0]).includes("%"))try{i=n.exec(decodeURIComponent(i))[0]}catch(e){}return i||t},t.getXfaPageViewport=function(e,t){var r=t.scale,n=void 0===r?1:r,a=t.rotation,i=void 0===a?0:a,o=e.attributes.style,s=o.width,l=o.height,u=[0,0,parseInt(s),parseInt(l)];return new C({viewBox:u,scale:n,rotation:i})},t.isDataScheme=O,t.isPdfFile=function(e){return"string"==typeof e&&/\.pdf$/i.test(e)},t.isValidFetchUrl=D,t.loadScript=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return new Promise((function(r,n){var a=document.createElement("script");a.src=e,a.onload=function(e){t&&a.remove(),r(e)},a.onerror=function(){n(new Error("Cannot load script at: ".concat(a.src)))},(document.head||document.documentElement).appendChild(a)}))};var a,i=(a=r(2))&&a.__esModule?a:{default:a},o=r(4),s=r(135);function l(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function f(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){c(i,n,a,o,s,"next",e)}function s(e){c(i,n,a,o,s,"throw",e)}o(void 0)}))}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),e}function v(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},m(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=b(e);if(t){var a=b(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return g(this,r)}}function g(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}var _="noopener noreferrer nofollow",S={CSS:96,PDF:72,get PDF_TO_CSS_UNITS(){return(0,o.shadow)(this,"PDF_TO_CSS_UNITS",this.CSS/this.PDF)}};t.PixelsPerInch=S;var w=function(e){v(r,e);var t=y(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=n.ownerDocument,i=void 0===a?globalThis.document:a;return d(this,r),(e=t.call(this))._document=i,e}return p(r,[{key:"_createCanvas",value:function(e,t){var r=this._document.createElement("canvas");return r.width=e,r.height=t,r}}]),r}(s.BaseCanvasFactory);function A(e){return k.apply(this,arguments)}function k(){return k=f(i.default.mark((function e(t){var r,n,a=arguments;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=a.length>1&&void 0!==a[1]&&a[1],!D(t,document.baseURI)){e.next=21;break}return e.next=4,fetch(t);case 4:if((n=e.sent).ok){e.next=7;break}throw new Error(n.statusText);case 7:if(!r){e.next=15;break}return e.t1=Uint8Array,e.next=11,n.arrayBuffer();case 11:e.t2=e.sent,e.t0=new e.t1(e.t2),e.next=20;break;case 15:return e.t3=o.stringToBytes,e.next=18,n.text();case 18:e.t4=e.sent,e.t0=(0,e.t3)(e.t4);case 20:return e.abrupt("return",e.t0);case 21:return e.abrupt("return",new Promise((function(e,n){var a=new XMLHttpRequest;a.open("GET",t,!0),r&&(a.responseType="arraybuffer"),a.onreadystatechange=function(){if(a.readyState===XMLHttpRequest.DONE){var t;if((200===a.status||0===a.status)&&(r&&a.response?t=new Uint8Array(a.response):!r&&a.responseText&&(t=(0,o.stringToBytes)(a.responseText)),t))return void e(t);n(new Error(a.statusText))}},a.send(null)})));case 22:case"end":return e.stop()}}),e)}))),k.apply(this,arguments)}t.DOMCanvasFactory=w;var x=function(e){v(r,e);var t=y(r);function r(){return d(this,r),t.apply(this,arguments)}return p(r,[{key:"_fetchData",value:function(e,t){return A(e,this.isCompressed).then((function(e){return{cMapData:e,compressionType:t}}))}}]),r}(s.BaseCMapReaderFactory);t.DOMCMapReaderFactory=x;var E=function(e){v(r,e);var t=y(r);function r(){return d(this,r),t.apply(this,arguments)}return p(r,[{key:"_fetchData",value:function(e){return A(e,!0)}}]),r}(s.BaseStandardFontDataFactory);t.DOMStandardFontDataFactory=E;var P=function(e){v(r,e);var t=y(r);function r(){return d(this,r),t.apply(this,arguments)}return p(r,[{key:"_createSVG",value:function(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}}]),r}(s.BaseSVGFactory);t.DOMSVGFactory=P;var C=function(){function e(t){var r=t.viewBox,n=t.scale,a=t.rotation,i=t.offsetX,o=void 0===i?0:i,s=t.offsetY,l=void 0===s?0:s,u=t.dontFlip,c=void 0!==u&&u;d(this,e),this.viewBox=r,this.scale=n,this.rotation=a,this.offsetX=o,this.offsetY=l;var f,h,p,v,m,y,g,b,_=(r[2]+r[0])/2,S=(r[3]+r[1])/2;switch((a%=360)<0&&(a+=360),a){case 180:f=-1,h=0,p=0,v=1;break;case 90:f=0,h=1,p=1,v=0;break;case 270:f=0,h=-1,p=-1,v=0;break;case 0:f=1,h=0,p=0,v=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}c&&(p=-p,v=-v),0===f?(m=Math.abs(S-r[1])*n+o,y=Math.abs(_-r[0])*n+l,g=Math.abs(r[3]-r[1])*n,b=Math.abs(r[2]-r[0])*n):(m=Math.abs(_-r[0])*n+o,y=Math.abs(S-r[1])*n+l,g=Math.abs(r[2]-r[0])*n,b=Math.abs(r[3]-r[1])*n),this.transform=[f*n,h*n,p*n,v*n,m-f*n*_-p*n*S,y-h*n*_-v*n*S],this.width=g,this.height=b}return p(e,[{key:"clone",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.scale,n=void 0===r?this.scale:r,a=t.rotation,i=void 0===a?this.rotation:a,o=t.offsetX,s=void 0===o?this.offsetX:o,l=t.offsetY,u=void 0===l?this.offsetY:l,c=t.dontFlip,f=void 0!==c&&c;return new e({viewBox:this.viewBox.slice(),scale:n,rotation:i,offsetX:s,offsetY:u,dontFlip:f})}},{key:"convertToViewportPoint",value:function(e,t){return o.Util.applyTransform([e,t],this.transform)}},{key:"convertToViewportRectangle",value:function(e){var t=o.Util.applyTransform([e[0],e[1]],this.transform),r=o.Util.applyTransform([e[2],e[3]],this.transform);return[t[0],t[1],r[0],r[1]]}},{key:"convertToPdfPoint",value:function(e,t){return o.Util.applyInverseTransform([e,t],this.transform)}}]),e}();t.PageViewport=C;var T=function(e){v(r,e);var t=y(r);function r(e,n){var a;return d(this,r),(a=t.call(this,e,"RenderingCancelledException")).type=n,a}return r}(o.BaseException);t.RenderingCancelledException=T;var R={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};function O(e){for(var t=e.length,r=0;r<t&&""===e[r].trim();)r++;return"data:"===e.substring(r,r+5).toLowerCase()}t.LinkTarget=R;var I,F=function(){function e(){d(this,e),this.started=Object.create(null),this.times=[]}return p(e,[{key:"time",value:function(e){e in this.started&&(0,o.warn)("Timer is already running for ".concat(e)),this.started[e]=Date.now()}},{key:"timeEnd",value:function(e){e in this.started||(0,o.warn)("Timer has not been started for ".concat(e)),this.times.push({name:e,start:this.started[e],end:Date.now()}),delete this.started[e]}},{key:"toString",value:function(){var e,t=[],r=0,n=l(this.times);try{for(n.s();!(e=n.n()).done;){var a=e.value.name;a.length>r&&(r=a.length)}}catch(e){n.e(e)}finally{n.f()}var i,o=l(this.times);try{for(o.s();!(i=o.n()).done;){var s=i.value,u=s.end-s.start;t.push("".concat(s.name.padEnd(r)," ").concat(u,"ms\n"))}}catch(e){o.e(e)}finally{o.f()}return t.join("")}}]),e}();function D(e,t){try{var r=(t?new URL(e,t):new URL(e)).protocol;return"http:"===r||"https:"===r}catch(e){return!1}}t.StatTimer=F;var L=function(){function e(){d(this,e)}return p(e,null,[{key:"toDateObject",value:function(e){if(!e||!(0,o.isString)(e))return null;I||(I=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));var t=I.exec(e);if(!t)return null;var r=parseInt(t[1],10),n=parseInt(t[2],10);n=n>=1&&n<=12?n-1:0;var a=parseInt(t[3],10);a=a>=1&&a<=31?a:1;var i=parseInt(t[4],10);i=i>=0&&i<=23?i:0;var s=parseInt(t[5],10);s=s>=0&&s<=59?s:0;var l=parseInt(t[6],10);l=l>=0&&l<=59?l:0;var u=t[7]||"Z",c=parseInt(t[8],10);c=c>=0&&c<=23?c:0;var f=parseInt(t[9],10)||0;return f=f>=0&&f<=59?f:0,"-"===u?(i+=c,s+=f):"+"===u&&(i-=c,s-=f),new Date(Date.UTC(r,n,a,i,s,l))}}]),e}();t.PDFDateString=L},(e,t,r)=>{"use strict";e.exports=r(3)},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var a=function(e){var t,r=Object.prototype,a=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),o=new T(n||[]);return i._invoke=function(e,t,r){var n=d;return function(a,i){if(n===p)throw new Error("Generator is already running");if(n===v){if("throw"===a)throw i;return O()}for(r.method=a,r.arg=i;;){var o=r.delegate;if(o){var s=E(o,r);if(s){if(s===m)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===d)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var l=f(e,t,r);if("normal"===l.type){if(n=r.done?v:h,l.arg===m)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n=v,r.method="throw",r.arg=l.arg)}}}(e,r,o),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var d="suspendedStart",h="suspendedYield",p="executing",v="completed",m={};function y(){}function g(){}function b(){}var _={};u(_,o,(function(){return this}));var S=Object.getPrototypeOf,w=S&&S(S(R([])));w&&w!==r&&a.call(w,o)&&(_=w);var A=b.prototype=y.prototype=Object.create(_);function k(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(i,o,s,l){var u=f(e[i],e,o);if("throw"!==u.type){var c=u.arg,d=c.value;return d&&"object"===n(d)&&a.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,s,l)}),(function(e){r("throw",e,s,l)})):t.resolve(d).then((function(e){c.value=e,s(c)}),(function(e){return r("throw",e,s,l)}))}l(u.arg)}var i;this._invoke=function(e,n){function a(){return new t((function(t,a){r(e,n,t,a)}))}return i=i?i.then(a,a):a()}}function E(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,E(e,r),"throw"===r.method))return m;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var a=f(n,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,m;var i=a.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,m):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function R(e){if(e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function r(){for(;++n<e.length;)if(a.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:O}}function O(){return{value:t,done:!0}}return g.prototype=b,u(A,"constructor",b),u(b,"constructor",g),g.displayName=u(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,l,"GeneratorFunction")),e.prototype=Object.create(A),e},e.awrap=function(e){return{__await:e}},k(x.prototype),u(x.prototype,s,(function(){return this})),e.AsyncIterator=x,e.async=function(t,r,n,a,i){void 0===i&&(i=Promise);var o=new x(c(t,r,n,a),i);return e.isGeneratorFunction(r)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},k(A),u(A,l,"Generator"),u(A,o,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=R,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&a.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(n,a){return s.type="throw",s.arg=e,r.next=n,a&&(r.method="next",r.arg=t),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var l=a.call(o,"catchLoc"),u=a.call(o,"finallyLoc");if(l&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&a.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=e,o.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;C(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:R(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),m}},e}("object"===n(e=r.nmd(e))?e.exports:{});try{regeneratorRuntime=a}catch(e){"object"===("undefined"==typeof globalThis?"undefined":n(globalThis))?globalThis.regeneratorRuntime=a:Function("r","regeneratorRuntime = r")(a)}},(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function c(e,t){return c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},c(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var a=h(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return d(this,r)}}function d(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.VerbosityLevel=t.Util=t.UnknownErrorException=t.UnexpectedResponseException=t.UNSUPPORTED_FEATURES=t.TextRenderingMode=t.StreamType=t.RenderingIntentFlag=t.PermissionFlag=t.PasswordResponses=t.PasswordException=t.PageActionEventType=t.OPS=t.MissingPDFException=t.IsLittleEndianCached=t.IsEvalSupportedCached=t.InvalidPDFException=t.ImageKind=t.IDENTITY_MATRIX=t.FormatError=t.FontType=t.FONT_IDENTITY_MATRIX=t.DocumentActionEventType=t.CMapCompressionType=t.BaseException=t.AnnotationType=t.AnnotationStateModelType=t.AnnotationReviewState=t.AnnotationReplyType=t.AnnotationMode=t.AnnotationMarkedState=t.AnnotationFlag=t.AnnotationFieldFlag=t.AnnotationBorderStyleType=t.AnnotationActionEventType=t.AbortException=void 0,t.arrayByteLength=I,t.arraysToBytes=function(e){var t=e.length;if(1===t&&e[0]instanceof Uint8Array)return e[0];for(var r=0,n=0;n<t;n++)r+=I(e[n]);for(var a=0,i=new Uint8Array(r),o=0;o<t;o++){var s=e[o];s instanceof Uint8Array||(s="string"==typeof s?O(s):new Uint8Array(s));var l=s.byteLength;i.set(s,a),a+=l}return i},t.assert=g,t.bytesToString=function(e){g(null!==e&&"object"===s(e)&&void 0!==e.length,"Invalid argument for bytesToString");var t=e.length,r=8192;if(t<r)return String.fromCharCode.apply(null,e);for(var n=[],a=0;a<t;a+=r){var i=Math.min(a+r,t),o=e.subarray(a,i);n.push(String.fromCharCode.apply(null,o))}return n.join("")},t.createObjectURL=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(URL.createObjectURL&&"undefined"!=typeof Blob&&!r)return URL.createObjectURL(new Blob([e],{type:t}));for(var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",a="data:".concat(t,";base64,"),i=0,o=e.length;i<o;i+=3){var s=255&e[i],l=255&e[i+1],u=255&e[i+2],c=s>>2,f=(3&s)<<4|l>>4,d=i+1<o?(15&l)<<2|u>>6:64,h=i+2<o?63&u:64;a+=n[c]+n[f]+n[d]+n[h]}return a},t.createPromiseCapability=function(){var e=Object.create(null),t=!1;return Object.defineProperty(e,"settled",{get:function(){return t}}),e.promise=new Promise((function(r,n){e.resolve=function(e){t=!0,r(e)},e.reject=function(e){t=!0,n(e)}})),e},t.createValidAbsoluteUrl=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!e)return null;try{if(r&&"string"==typeof e){if(r.addDefaultProtocol&&e.startsWith("www.")){var n=e.match(/\./g);n&&n.length>=2&&(e="http://".concat(e))}if(r.tryConvertEncoding)try{e=j(e)}catch(e){}}var a=t?new URL(e,t):new URL(e);if(b(a))return a}catch(e){}return null},t.escapeString=function(e){return e.replace(/([()\\\n\r])/g,(function(e){return"\n"===e?"\\n":"\r"===e?"\\r":"\\".concat(e)}))},t.getModificationDate=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=[e.getUTCFullYear().toString(),(e.getUTCMonth()+1).toString().padStart(2,"0"),e.getUTCDate().toString().padStart(2,"0"),e.getUTCHours().toString().padStart(2,"0"),e.getUTCMinutes().toString().padStart(2,"0"),e.getUTCSeconds().toString().padStart(2,"0")];return t.join("")},t.getVerbosityLevel=function(){return v},t.info=function(e){v>=p.INFOS&&console.log("Info: ".concat(e))},t.isArrayBuffer=function(e){return"object"===s(e)&&null!==e&&void 0!==e.byteLength},t.isArrayEqual=function(e,t){if(e.length!==t.length)return!1;for(var r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0},t.isAscii=function(e){return/^[\x00-\x7F]*$/.test(e)},t.isBool=function(e){return"boolean"==typeof e},t.isNum=function(e){return"number"==typeof e},t.isSameOrigin=function(e,t){var r;try{if(!(r=new URL(e)).origin||"null"===r.origin)return!1}catch(e){return!1}var n=new URL(t,r);return r.origin===n.origin},t.isString=function(e){return"string"==typeof e},t.objectFromMap=function(e){var t,r,n=Object.create(null),a=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=i(e))){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw o}}}}(e);try{for(a.s();!(t=a.n()).done;){var o=(r=t.value,2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),2!==i.length);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(r)||i(r,2)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];n[s]=l}}catch(e){a.e(e)}finally{a.f()}return n},t.objectSize=function(e){return Object.keys(e).length},t.removeNullCharacters=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return"string"!=typeof e?(m("The argument for removeNullCharacters must be a string."),e):(t&&(e=e.replace(R," ")),e.replace(T,""))},t.setVerbosityLevel=function(e){Number.isInteger(e)&&(v=e)},t.shadow=_,t.string32=function(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)},t.stringToBytes=O,t.stringToPDFString=function(e){var t=e.length,r=[];if("þ"===e[0]&&"ÿ"===e[1])for(var n=2;n<t;n+=2)r.push(String.fromCharCode(e.charCodeAt(n)<<8|e.charCodeAt(n+1)));else if("ÿ"===e[0]&&"þ"===e[1])for(var a=2;a<t;a+=2)r.push(String.fromCharCode(e.charCodeAt(a+1)<<8|e.charCodeAt(a)));else for(var i=0;i<t;++i){var o=N[e.charCodeAt(i)];r.push(o?String.fromCharCode(o):e.charAt(i))}return r.join("")},t.stringToUTF16BEString=function(e){for(var t=["þÿ"],r=0,n=e.length;r<n;r++){var a=e.charCodeAt(r);t.push(String.fromCharCode(a>>8&255),String.fromCharCode(255&a))}return t.join("")},t.stringToUTF8String=j,t.unreachable=y,t.utf8StringToString=function(e){return unescape(encodeURIComponent(e))},t.warn=m,r(5),t.IDENTITY_MATRIX=[1,0,0,1,0,0],t.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],t.RenderingIntentFlag={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256},t.AnnotationMode={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},t.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},t.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},t.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},t.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},t.AnnotationStateModelType={MARKED:"Marked",REVIEW:"Review"},t.AnnotationMarkedState={MARKED:"Marked",UNMARKED:"Unmarked"},t.AnnotationReviewState={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"},t.AnnotationReplyType={GROUP:"Group",REPLY:"R"},t.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},t.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},t.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},t.AnnotationActionEventType={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"},t.DocumentActionEventType={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"},t.PageActionEventType={O:"PageOpen",C:"PageClose"},t.StreamType={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"},t.FontType={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1STANDARD:"TYPE1STANDARD",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};var p={ERRORS:0,WARNINGS:1,INFOS:5};t.VerbosityLevel=p,t.CMapCompressionType={NONE:0,BINARY:1,STREAM:2},t.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},t.UNSUPPORTED_FEATURES={unknown:"unknown",forms:"forms",javaScript:"javaScript",signatures:"signatures",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontBuildPath:"errorFontBuildPath",errorFontGetPath:"errorFontGetPath",errorMarkedContent:"errorMarkedContent",errorContentSubStream:"errorContentSubStream"},t.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};var v=p.WARNINGS;function m(e){v>=p.WARNINGS&&console.log("Warning: ".concat(e))}function y(e){throw new Error(e)}function g(e,t){e||y(t)}function b(e){if(!e)return!1;switch(e.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function _(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!1}),r}var S=function(){function e(t,r){this.constructor===e&&y("Cannot initialize BaseException."),this.message=t,this.name=r}return e.prototype=new Error,e.constructor=e,e}();t.BaseException=S;var w=function(e){u(r,e);var t=f(r);function r(e,n){var a;return l(this,r),(a=t.call(this,e,"PasswordException")).code=n,a}return r}(S);t.PasswordException=w;var A=function(e){u(r,e);var t=f(r);function r(e,n){var a;return l(this,r),(a=t.call(this,e,"UnknownErrorException")).details=n,a}return r}(S);t.UnknownErrorException=A;var k=function(e){u(r,e);var t=f(r);function r(e){return l(this,r),t.call(this,e,"InvalidPDFException")}return r}(S);t.InvalidPDFException=k;var x=function(e){u(r,e);var t=f(r);function r(e){return l(this,r),t.call(this,e,"MissingPDFException")}return r}(S);t.MissingPDFException=x;var E=function(e){u(r,e);var t=f(r);function r(e,n){var a;return l(this,r),(a=t.call(this,e,"UnexpectedResponseException")).status=n,a}return r}(S);t.UnexpectedResponseException=E;var P=function(e){u(r,e);var t=f(r);function r(e){return l(this,r),t.call(this,e,"FormatError")}return r}(S);t.FormatError=P;var C=function(e){u(r,e);var t=f(r);function r(e){return l(this,r),t.call(this,e,"AbortException")}return r}(S);t.AbortException=C;var T=/\x00+/g,R=/[\x01-\x1F]/g;function O(e){g("string"==typeof e,"Invalid argument for stringToBytes");for(var t=e.length,r=new Uint8Array(t),n=0;n<t;++n)r[n]=255&e.charCodeAt(n);return r}function I(e){return void 0!==e.length?e.length:(g(void 0!==e.byteLength,"arrayByteLength - invalid argument."),e.byteLength)}var F={get value(){return _(this,"value",((e=new Uint8Array(4))[0]=1,1===new Uint32Array(e.buffer,0,1)[0]));var e}};t.IsLittleEndianCached=F;var D={get value(){return _(this,"value",function(){try{return new Function(""),!0}catch(e){return!1}}())}};t.IsEvalSupportedCached=D;var L=a(Array(256).keys()).map((function(e){return e.toString(16).padStart(2,"0")})),M=function(){function e(){l(this,e)}var t,r;return t=e,r=[{key:"makeHexColor",value:function(e,t,r){return"#".concat(L[e]).concat(L[t]).concat(L[r])}},{key:"transform",value:function(e,t){return[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]]}},{key:"applyTransform",value:function(e,t){return[e[0]*t[0]+e[1]*t[2]+t[4],e[0]*t[1]+e[1]*t[3]+t[5]]}},{key:"applyInverseTransform",value:function(e,t){var r=t[0]*t[3]-t[1]*t[2];return[(e[0]*t[3]-e[1]*t[2]+t[2]*t[5]-t[4]*t[3])/r,(-e[0]*t[1]+e[1]*t[0]+t[4]*t[1]-t[5]*t[0])/r]}},{key:"getAxialAlignedBoundingBox",value:function(t,r){var n=e.applyTransform(t,r),a=e.applyTransform(t.slice(2,4),r),i=e.applyTransform([t[0],t[3]],r),o=e.applyTransform([t[2],t[1]],r);return[Math.min(n[0],a[0],i[0],o[0]),Math.min(n[1],a[1],i[1],o[1]),Math.max(n[0],a[0],i[0],o[0]),Math.max(n[1],a[1],i[1],o[1])]}},{key:"inverseTransform",value:function(e){var t=e[0]*e[3]-e[1]*e[2];return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[4]*e[3])/t,(e[4]*e[1]-e[5]*e[0])/t]}},{key:"apply3dTransform",value:function(e,t){return[e[0]*t[0]+e[1]*t[1]+e[2]*t[2],e[3]*t[0]+e[4]*t[1]+e[5]*t[2],e[6]*t[0]+e[7]*t[1]+e[8]*t[2]]}},{key:"singularValueDecompose2dScale",value:function(e){var t=[e[0],e[2],e[1],e[3]],r=e[0]*t[0]+e[1]*t[2],n=e[0]*t[1]+e[1]*t[3],a=e[2]*t[0]+e[3]*t[2],i=e[2]*t[1]+e[3]*t[3],o=(r+i)/2,s=Math.sqrt(Math.pow(r+i,2)-4*(r*i-a*n))/2,l=o+s||1,u=o-s||1;return[Math.sqrt(l),Math.sqrt(u)]}},{key:"normalizeRect",value:function(e){var t=e.slice(0);return e[0]>e[2]&&(t[0]=e[2],t[2]=e[0]),e[1]>e[3]&&(t[1]=e[3],t[3]=e[1]),t}},{key:"intersect",value:function(t,r){function n(e,t){return e-t}var a=[t[0],t[2],r[0],r[2]].sort(n),i=[t[1],t[3],r[1],r[3]].sort(n),o=[];return t=e.normalizeRect(t),r=e.normalizeRect(r),a[0]===t[0]&&a[1]===r[0]||a[0]===r[0]&&a[1]===t[0]?(o[0]=a[1],o[2]=a[2],i[0]===t[1]&&i[1]===r[1]||i[0]===r[1]&&i[1]===t[1]?(o[1]=i[1],o[3]=i[2],o):null):null}},{key:"bezierBoundingBox",value:function(e,t,r,n,i,o,s,l){for(var u,c,f,d,h,p,v,m,y=[],g=[[],[]],b=0;b<2;++b)if(0===b?(c=6*e-12*r+6*i,u=-3*e+9*r-9*i+3*s,f=3*r-3*e):(c=6*t-12*n+6*o,u=-3*t+9*n-9*o+3*l,f=3*n-3*t),Math.abs(u)<1e-12){if(Math.abs(c)<1e-12)continue;0<(d=-f/c)&&d<1&&y.push(d)}else v=c*c-4*f*u,m=Math.sqrt(v),v<0||(0<(h=(-c+m)/(2*u))&&h<1&&y.push(h),0<(p=(-c-m)/(2*u))&&p<1&&y.push(p));for(var _,S=y.length,w=S;S--;)_=1-(d=y[S]),g[0][S]=_*_*_*e+3*_*_*d*r+3*_*d*d*i+d*d*d*s,g[1][S]=_*_*_*t+3*_*_*d*n+3*_*d*d*o+d*d*d*l;return g[0][w]=e,g[1][w]=t,g[0][w+1]=s,g[1][w+1]=l,g[0].length=g[1].length=w+2,[Math.min.apply(Math,a(g[0])),Math.min.apply(Math,a(g[1])),Math.max.apply(Math,a(g[0])),Math.max.apply(Math,a(g[1]))]}}],null&&n(t.prototype,null),r&&n(t,r),e}();t.Util=M;var N=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function j(e){return decodeURIComponent(escape(e))}},(e,t,r)=>{"use strict";var n=r(6);"undefined"!=typeof globalThis&&globalThis._pdfjsCompatibilityChecked||("undefined"!=typeof globalThis&&globalThis.Math===Math||(globalThis=r(7)),globalThis._pdfjsCompatibilityChecked=!0,!globalThis.btoa&&n.isNodeJS&&(globalThis.btoa=function(e){return Buffer.from(e,"binary").toString("base64")}),!globalThis.atob&&n.isNodeJS&&(globalThis.atob=function(e){return Buffer.from(e,"base64").toString("binary")}),!globalThis.DOMMatrix&&n.isNodeJS&&(globalThis.DOMMatrix=r(69)),Object.fromEntries||r(70),globalThis.Promise.allSettled||(globalThis.Promise=r(97)),!globalThis.ReadableStream&&n.isNodeJS&&(globalThis.ReadableStream=r(134).ReadableStream))},(e,t)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.isNodeJS=void 0;var n=!("object"!==("undefined"==typeof process?"undefined":r(process))||process+""!="[object process]"||process.versions.nw||process.versions.electron&&process.type&&"browser"!==process.type);t.isNodeJS=n},(e,t,r)=>{r(8),e.exports=r(10)},(e,t,r)=>{r(9)({global:!0},{globalThis:r(10)})},(e,t,r)=>{var n=r(10),a=r(11).f,i=r(47),o=r(50),s=r(41),l=r(57),u=r(68);e.exports=function(e,t){var r,c,f,d,h,p=e.target,v=e.global,m=e.stat;if(r=v?n:m?n[p]||s(p,{}):(n[p]||{}).prototype)for(c in t){if(d=t[c],f=e.noTargetGet?(h=a(r,c))&&h.value:r[c],!u(v?c:p+(m?".":"#")+c,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),o(r,c,d,e)}}},e=>{var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof __webpack_require__.g&&__webpack_require__.g)||function(){return this}()||Function("return this")()},(e,t,r)=>{var n=r(12),a=r(14),i=r(15),o=r(16),s=r(17),l=r(22),u=r(42),c=r(45),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=s(e),t=l(t),c)try{return f(e,t)}catch(e){}if(u(e,t))return o(!a(i.f,e,t),e[t])}},(e,t,r)=>{var n=r(13);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},e=>{var t=Function.prototype.call;e.exports=t.bind?t.bind(t):function(){return t.apply(t,arguments)}},(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,a=n&&!r.call({1:2},1);t.f=a?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},(e,t,r)=>{var n=r(18),a=r(21);e.exports=function(e){return n(a(e))}},(e,t,r)=>{var n=r(10),a=r(19),i=r(13),o=r(20),s=n.Object,l=a("".split);e.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?l(e,""):s(e)}:s},e=>{var t=Function.prototype,r=t.bind,n=t.call,a=r&&r.bind(n);e.exports=r?function(e){return e&&a(n,e)}:function(e){return e&&function(){return n.apply(e,arguments)}}},(e,t,r)=>{var n=r(19),a=n({}.toString),i=n("".slice);e.exports=function(e){return i(a(e),8,-1)}},(e,t,r)=>{var n=r(10).TypeError;e.exports=function(e){if(null==e)throw n("Can't call method on "+e);return e}},(e,t,r)=>{var n=r(23),a=r(26);e.exports=function(e){var t=n(e,"string");return a(t)?t:t+""}},(e,t,r)=>{var n=r(10),a=r(14),i=r(24),o=r(26),s=r(33),l=r(36),u=r(37),c=n.TypeError,f=u("toPrimitive");e.exports=function(e,t){if(!i(e)||o(e))return e;var r,n=s(e,f);if(n){if(void 0===t&&(t="default"),r=a(n,e,t),!i(r)||o(r))return r;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),l(e,t)}},(e,t,r)=>{var n=r(25);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},e=>{e.exports=function(e){return"function"==typeof e}},(e,t,r)=>{var n=r(10),a=r(27),i=r(25),o=r(28),s=r(29),l=n.Object;e.exports=s?function(e){return"symbol"==typeof e}:function(e){var t=a("Symbol");return i(t)&&o(t.prototype,l(e))}},(e,t,r)=>{var n=r(10),a=r(25),i=function(e){return a(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(n[e]):n[e]&&n[e][t]}},(e,t,r)=>{var n=r(19);e.exports=n({}.isPrototypeOf)},(e,t,r)=>{var n=r(30);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},(e,t,r)=>{var n=r(31),a=r(13);e.exports=!!Object.getOwnPropertySymbols&&!a((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},(e,t,r)=>{var n,a,i=r(10),o=r(32),s=i.process,l=i.Deno,u=s&&s.versions||l&&l.version,c=u&&u.v8;c&&(a=(n=c.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!a&&o&&(!(n=o.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=o.match(/Chrome\/(\d+)/))&&(a=+n[1]),e.exports=a},(e,t,r)=>{var n=r(27);e.exports=n("navigator","userAgent")||""},(e,t,r)=>{var n=r(34);e.exports=function(e,t){var r=e[t];return null==r?void 0:n(r)}},(e,t,r)=>{var n=r(10),a=r(25),i=r(35),o=n.TypeError;e.exports=function(e){if(a(e))return e;throw o(i(e)+" is not a function")}},(e,t,r)=>{var n=r(10).String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},(e,t,r)=>{var n=r(10),a=r(14),i=r(25),o=r(24),s=n.TypeError;e.exports=function(e,t){var r,n;if("string"===t&&i(r=e.toString)&&!o(n=a(r,e)))return n;if(i(r=e.valueOf)&&!o(n=a(r,e)))return n;if("string"!==t&&i(r=e.toString)&&!o(n=a(r,e)))return n;throw s("Can't convert object to primitive value")}},(e,t,r)=>{var n=r(10),a=r(38),i=r(42),o=r(44),s=r(30),l=r(29),u=a("wks"),c=n.Symbol,f=c&&c.for,d=l?c:c&&c.withoutSetter||o;e.exports=function(e){if(!i(u,e)||!s&&"string"!=typeof u[e]){var t="Symbol."+e;s&&i(c,e)?u[e]=c[e]:u[e]=l&&f?f(t):d(t)}return u[e]}},(e,t,r)=>{var n=r(39),a=r(40);(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},e=>{e.exports=!1},(e,t,r)=>{var n=r(10),a=r(41),i="__core-js_shared__",o=n[i]||a(i,{});e.exports=o},(e,t,r)=>{var n=r(10),a=Object.defineProperty;e.exports=function(e,t){try{a(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},(e,t,r)=>{var n=r(19),a=r(43),i=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(a(e),t)}},(e,t,r)=>{var n=r(10),a=r(21),i=n.Object;e.exports=function(e){return i(a(e))}},(e,t,r)=>{var n=r(19),a=0,i=Math.random(),o=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+o(++a+i,36)}},(e,t,r)=>{var n=r(12),a=r(13),i=r(46);e.exports=!n&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},(e,t,r)=>{var n=r(10),a=r(24),i=n.document,o=a(i)&&a(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},(e,t,r)=>{var n=r(12),a=r(48),i=r(16);e.exports=n?function(e,t,r){return a.f(e,t,i(1,r))}:function(e,t,r){return e[t]=r,e}},(e,t,r)=>{var n=r(10),a=r(12),i=r(45),o=r(49),s=r(22),l=n.TypeError,u=Object.defineProperty;t.f=a?u:function(e,t,r){if(o(e),t=s(t),o(r),i)try{return u(e,t,r)}catch(e){}if("get"in r||"set"in r)throw l("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},(e,t,r)=>{var n=r(10),a=r(24),i=n.String,o=n.TypeError;e.exports=function(e){if(a(e))return e;throw o(i(e)+" is not an object")}},(e,t,r)=>{var n=r(10),a=r(25),i=r(42),o=r(47),s=r(41),l=r(51),u=r(52),c=r(56).CONFIGURABLE,f=u.get,d=u.enforce,h=String(String).split("String");(e.exports=function(e,t,r,l){var u,f=!!l&&!!l.unsafe,p=!!l&&!!l.enumerable,v=!!l&&!!l.noTargetGet,m=l&&void 0!==l.name?l.name:t;a(r)&&("Symbol("===String(m).slice(0,7)&&(m="["+String(m).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||c&&r.name!==m)&&o(r,"name",m),(u=d(r)).source||(u.source=h.join("string"==typeof m?m:""))),e!==n?(f?!v&&e[t]&&(p=!0):delete e[t],p?e[t]=r:o(e,t,r)):p?e[t]=r:s(t,r)})(Function.prototype,"toString",(function(){return a(this)&&f(this).source||l(this)}))},(e,t,r)=>{var n=r(19),a=r(25),i=r(40),o=n(Function.toString);a(i.inspectSource)||(i.inspectSource=function(e){return o(e)}),e.exports=i.inspectSource},(e,t,r)=>{var n,a,i,o=r(53),s=r(10),l=r(19),u=r(24),c=r(47),f=r(42),d=r(40),h=r(54),p=r(55),v="Object already initialized",m=s.TypeError,y=s.WeakMap;if(o||d.state){var g=d.state||(d.state=new y),b=l(g.get),_=l(g.has),S=l(g.set);n=function(e,t){if(_(g,e))throw new m(v);return t.facade=e,S(g,e,t),t},a=function(e){return b(g,e)||{}},i=function(e){return _(g,e)}}else{var w=h("state");p[w]=!0,n=function(e,t){if(f(e,w))throw new m(v);return t.facade=e,c(e,w,t),t},a=function(e){return f(e,w)?e[w]:{}},i=function(e){return f(e,w)}}e.exports={set:n,get:a,has:i,enforce:function(e){return i(e)?a(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=a(t)).type!==e)throw m("Incompatible receiver, "+e+" required");return r}}}},(e,t,r)=>{var n=r(10),a=r(25),i=r(51),o=n.WeakMap;e.exports=a(o)&&/native code/.test(i(o))},(e,t,r)=>{var n=r(38),a=r(44),i=n("keys");e.exports=function(e){return i[e]||(i[e]=a(e))}},e=>{e.exports={}},(e,t,r)=>{var n=r(12),a=r(42),i=Function.prototype,o=n&&Object.getOwnPropertyDescriptor,s=a(i,"name"),l=s&&"something"===function(){}.name,u=s&&(!n||n&&o(i,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:u}},(e,t,r)=>{var n=r(42),a=r(58),i=r(11),o=r(48);e.exports=function(e,t){for(var r=a(t),s=o.f,l=i.f,u=0;u<r.length;u++){var c=r[u];n(e,c)||s(e,c,l(t,c))}}},(e,t,r)=>{var n=r(27),a=r(19),i=r(59),o=r(67),s=r(49),l=a([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(s(e)),r=o.f;return r?l(t,r(e)):t}},(e,t,r)=>{var n=r(60),a=r(66).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,a)}},(e,t,r)=>{var n=r(19),a=r(42),i=r(17),o=r(61).indexOf,s=r(55),l=n([].push);e.exports=function(e,t){var r,n=i(e),u=0,c=[];for(r in n)!a(s,r)&&a(n,r)&&l(c,r);for(;t.length>u;)a(n,r=t[u++])&&(~o(c,r)||l(c,r));return c}},(e,t,r)=>{var n=r(17),a=r(62),i=r(64),o=function(e){return function(t,r,o){var s,l=n(t),u=i(l),c=a(o,u);if(e&&r!=r){for(;u>c;)if((s=l[c++])!=s)return!0}else for(;u>c;c++)if((e||c in l)&&l[c]===r)return e||c||0;return!e&&-1}};e.exports={includes:o(!0),indexOf:o(!1)}},(e,t,r)=>{var n=r(63),a=Math.max,i=Math.min;e.exports=function(e,t){var r=n(e);return r<0?a(r+t,0):i(r,t)}},e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?r:t)(n)}},(e,t,r)=>{var n=r(65);e.exports=function(e){return n(e.length)}},(e,t,r)=>{var n=r(63),a=Math.min;e.exports=function(e){return e>0?a(n(e),9007199254740991):0}},e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},(e,t)=>{t.f=Object.getOwnPropertySymbols},(e,t,r)=>{var n=r(13),a=r(25),i=/#|\.prototype\./,o=function(e,t){var r=l[s(e)];return r==c||r!=u&&(a(t)?n(t):!!t)},s=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},l=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},(e,t,r)=>{"use strict";var n,a,i;function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}i=function(){function e(e){var t=new f,r=Array.from(e);if(!r.every((function(e){return!Number.isNaN(e)})))throw TypeError('CSSMatrix: "'+e+'" must only have numbers.');if(16===r.length){var n=r[0],a=r[1],i=r[2],o=r[3],s=r[4],l=r[5],u=r[6],c=r[7],d=r[8],h=r[9],p=r[10],v=r[11],m=r[12],y=r[13],g=r[14],b=r[15];t.m11=n,t.a=n,t.m21=s,t.c=s,t.m31=d,t.m41=m,t.e=m,t.m12=a,t.b=a,t.m22=l,t.d=l,t.m32=h,t.m42=y,t.f=y,t.m13=i,t.m23=u,t.m33=p,t.m43=g,t.m14=o,t.m24=c,t.m34=v,t.m44=b}else{if(6!==r.length)throw new TypeError("CSSMatrix: expecting an Array of 6/16 values.");var _=r[0],S=r[1],w=r[2],A=r[3],k=r[4],x=r[5];t.m11=_,t.a=_,t.m12=S,t.b=S,t.m21=w,t.c=w,t.m22=A,t.d=A,t.m41=k,t.e=k,t.m42=x,t.f=x}return t}function t(t){var r=Object.keys(new f);if("object"===o(t)&&r.every((function(e){return e in t})))return e([t.m11,t.m12,t.m13,t.m14,t.m21,t.m22,t.m23,t.m24,t.m31,t.m32,t.m33,t.m34,t.m41,t.m42,t.m43,t.m44]);throw TypeError('CSSMatrix: "'+t+'" is not a DOMMatrix / CSSMatrix / JSON compatible object.')}function r(t){if("string"!=typeof t)throw TypeError('CSSMatrix: "'+t+'" is not a string.');var r=String(t).replace(/\s/g,""),n=new f,a='CSSMatrix: invalid transform string "'+t+'"';return r.split(")").filter((function(e){return e})).forEach((function(t){var r=t.split("("),i=r[0],o=r[1];if(!o)throw TypeError(a);var s=o.split(",").map((function(e){return e.includes("rad")?parseFloat(e)*(180/Math.PI):parseFloat(e)})),l=s[0],u=s[1],c=s[2],f=s[3],d=[l,u,c],h=[l,u,c,f];if("perspective"===i&&l&&[u,c].every((function(e){return void 0===e})))n.m34=-1/l;else if(i.includes("matrix")&&[6,16].includes(s.length)&&s.every((function(e){return!Number.isNaN(+e)}))){var p=s.map((function(e){return Math.abs(e)<1e-6?0:e}));n=n.multiply(e(p))}else if("translate3d"===i&&d.every((function(e){return!Number.isNaN(+e)})))n=n.translate(l,u,c);else if("translate"===i&&l&&void 0===c)n=n.translate(l,u||0,0);else if("rotate3d"===i&&h.every((function(e){return!Number.isNaN(+e)}))&&f)n=n.rotateAxisAngle(l,u,c,f);else if("rotate"===i&&l&&[u,c].every((function(e){return void 0===e})))n=n.rotate(0,0,l);else if("scale3d"===i&&d.every((function(e){return!Number.isNaN(+e)}))&&d.some((function(e){return 1!==e})))n=n.scale(l,u,c);else if("scale"!==i||Number.isNaN(l)||1===l||void 0!==c)if("skew"===i&&l&&void 0===c)n=n.skewX(l),n=u?n.skewY(u):n;else{if(!(/[XYZ]/.test(i)&&l&&[u,c].every((function(e){return void 0===e}))&&["translate","rotate","scale","skew"].some((function(e){return i.includes(e)}))))throw TypeError(a);if(["skewX","skewY"].includes(i))n=n[i](l);else{var v=i.replace(/[XYZ]/,""),m=i.replace(v,""),y=["X","Y","Z"].indexOf(m),g=[0===y?l:0,1===y?l:0,2===y?l:0];n=n[v].apply(n,g)}}else{var b=Number.isNaN(+u)?l:u;n=n.scale(l,b,1)}})),n}function n(e,t,r){var n=new f;return n.m41=e,n.e=e,n.m42=t,n.f=t,n.m43=r,n}function a(e,t,r){var n=new f,a=Math.PI/180,i=e*a,o=t*a,s=r*a,l=Math.cos(i),u=-Math.sin(i),c=Math.cos(o),d=-Math.sin(o),h=Math.cos(s),p=-Math.sin(s),v=c*h,m=-c*p;n.m11=v,n.a=v,n.m12=m,n.b=m,n.m13=d;var y=u*d*h+l*p;n.m21=y,n.c=y;var g=l*h-u*d*p;return n.m22=g,n.d=g,n.m23=-u*c,n.m31=u*p-l*d*h,n.m32=u*h+l*d*p,n.m33=l*c,n}function i(e,t,r,n){var a=new f,i=n*(Math.PI/360),o=Math.sin(i),s=Math.cos(i),l=o*o,u=Math.sqrt(e*e+t*t+r*r),c=e,d=t,h=r;0===u?(c=0,d=0,h=1):(c/=u,d/=u,h/=u);var p=c*c,v=d*d,m=h*h,y=1-2*(v+m)*l;a.m11=y,a.a=y;var g=2*(c*d*l+h*o*s);a.m12=g,a.b=g,a.m13=2*(c*h*l-d*o*s);var b=2*(d*c*l-h*o*s);a.m21=b,a.c=b;var _=1-2*(m+p)*l;return a.m22=_,a.d=_,a.m23=2*(d*h*l+c*o*s),a.m31=2*(h*c*l+d*o*s),a.m32=2*(h*d*l-c*o*s),a.m33=1-2*(p+v)*l,a}function s(e,t,r){var n=new f;return n.m11=e,n.a=e,n.m22=t,n.d=t,n.m33=r,n}function l(e){var t=new f,r=e*Math.PI/180,n=Math.tan(r);return t.m21=n,t.c=n,t}function u(e){var t=new f,r=e*Math.PI/180,n=Math.tan(r);return t.m12=n,t.b=n,t}function c(t,r){return e([r.m11*t.m11+r.m12*t.m21+r.m13*t.m31+r.m14*t.m41,r.m11*t.m12+r.m12*t.m22+r.m13*t.m32+r.m14*t.m42,r.m11*t.m13+r.m12*t.m23+r.m13*t.m33+r.m14*t.m43,r.m11*t.m14+r.m12*t.m24+r.m13*t.m34+r.m14*t.m44,r.m21*t.m11+r.m22*t.m21+r.m23*t.m31+r.m24*t.m41,r.m21*t.m12+r.m22*t.m22+r.m23*t.m32+r.m24*t.m42,r.m21*t.m13+r.m22*t.m23+r.m23*t.m33+r.m24*t.m43,r.m21*t.m14+r.m22*t.m24+r.m23*t.m34+r.m24*t.m44,r.m31*t.m11+r.m32*t.m21+r.m33*t.m31+r.m34*t.m41,r.m31*t.m12+r.m32*t.m22+r.m33*t.m32+r.m34*t.m42,r.m31*t.m13+r.m32*t.m23+r.m33*t.m33+r.m34*t.m43,r.m31*t.m14+r.m32*t.m24+r.m33*t.m34+r.m34*t.m44,r.m41*t.m11+r.m42*t.m21+r.m43*t.m31+r.m44*t.m41,r.m41*t.m12+r.m42*t.m22+r.m43*t.m32+r.m44*t.m42,r.m41*t.m13+r.m42*t.m23+r.m43*t.m33+r.m44*t.m43,r.m41*t.m14+r.m42*t.m24+r.m43*t.m34+r.m44*t.m44])}var f=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var r=this;if(r.a=1,r.b=0,r.c=0,r.d=1,r.e=0,r.f=0,r.m11=1,r.m12=0,r.m13=0,r.m14=0,r.m21=0,r.m22=1,r.m23=0,r.m24=0,r.m31=0,r.m32=0,r.m33=1,r.m34=0,r.m41=0,r.m42=0,r.m43=0,r.m44=1,e&&e.length){var n=[16,6].some((function(t){return t===e.length}))?e:e[0];return r.setMatrixValue(n)}return r},d={isIdentity:{configurable:!0},is2D:{configurable:!0}};return d.isIdentity.set=function(e){this.isIdentity=e},d.isIdentity.get=function(){var e=this;return 1===e.m11&&0===e.m12&&0===e.m13&&0===e.m14&&0===e.m21&&1===e.m22&&0===e.m23&&0===e.m24&&0===e.m31&&0===e.m32&&1===e.m33&&0===e.m34&&0===e.m41&&0===e.m42&&0===e.m43&&1===e.m44},d.is2D.get=function(){var e=this;return 0===e.m31&&0===e.m32&&1===e.m33&&0===e.m34&&0===e.m43&&1===e.m44},d.is2D.set=function(e){this.is2D=e},f.prototype.setMatrixValue=function(n){return[Array,Float64Array,Float32Array].some((function(e){return n instanceof e}))?e(n):"string"==typeof n&&n.length&&"none"!==n?r(n):"object"===o(n)?t(n):this},f.prototype.toArray=function(){var e=this,t=Math.pow(10,6);return(e.is2D?[e.a,e.b,e.c,e.d,e.e,e.f]:[e.m11,e.m12,e.m13,e.m14,e.m21,e.m22,e.m23,e.m24,e.m31,e.m32,e.m33,e.m34,e.m41,e.m42,e.m43,e.m44]).map((function(e){return Math.abs(e)<1e-6?0:(e*t>>0)/t}))},f.prototype.toString=function(){var e=this.toArray();return(this.is2D?"matrix":"matrix3d")+"("+e+")"},f.prototype.toJSON=function(){var e=this,t=e.is2D,r=e.isIdentity;return Object.assign({},e,{is2D:t,isIdentity:r})},f.prototype.multiply=function(e){return c(this,e)},f.prototype.translate=function(e,t,r){var a=t,i=r;return void 0===i&&(i=0),void 0===a&&(a=0),c(this,n(e,a,i))},f.prototype.scale=function(e,t,r){var n=t,a=r;return void 0===n&&(n=e),void 0===a&&(a=1),c(this,s(e,n,a))},f.prototype.rotate=function(e,t,r){var n=e,i=t,o=r;return void 0===i&&(i=0),void 0===o&&(o=n,n=0),c(this,a(n,i,o))},f.prototype.rotateAxisAngle=function(e,t,r,n){if([e,t,r,n].some((function(e){return Number.isNaN(e)})))throw new TypeError("CSSMatrix: expecting 4 values");return c(this,i(e,t,r,n))},f.prototype.skewX=function(e){return c(this,l(e))},f.prototype.skewY=function(e){return c(this,u(e))},f.prototype.transformPoint=function(e){var t=n(e.x,e.y,e.z);return t.m44=e.w||1,{x:(t=this.multiply(t)).m41,y:t.m42,z:t.m43,w:t.m44}},f.prototype.transform=function(e){var t=this,r=t.m11*e.x+t.m12*e.y+t.m13*e.z+t.m14*e.w,n=t.m21*e.x+t.m22*e.y+t.m23*e.z+t.m24*e.w,a=t.m31*e.x+t.m32*e.y+t.m33*e.z+t.m34*e.w,i=t.m41*e.x+t.m42*e.y+t.m43*e.z+t.m44*e.w;return{x:r/i,y:n/i,z:a/i,w:i}},Object.defineProperties(f.prototype,d),Object.assign(f,{Translate:n,Rotate:a,RotateAxisAngle:i,Scale:s,SkewX:l,SkewY:u,Multiply:c,fromArray:e,fromMatrix:t,fromString:r}),Object.assign(f,{Version:"0.0.24"}),f},"object"===o(t)?e.exports=i():void 0===(a="function"==typeof(n=i)?n.call(t,r,t,e):n)||(e.exports=a)},(e,t,r)=>{r(71),r(86);var n=r(96);e.exports=n.Object.fromEntries},(e,t,r)=>{"use strict";var n=r(17),a=r(72),i=r(77),o=r(52),s=r(78),l="Array Iterator",u=o.set,c=o.getterFor(l);e.exports=s(Array,"Array",(function(e,t){u(this,{type:l,target:n(e),index:0,kind:t})}),(function(){var e=c(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},(e,t,r)=>{var n=r(37),a=r(73),i=r(48),o=n("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),e.exports=function(e){s[o][e]=!0}},(e,t,r)=>{var n,a=r(49),i=r(74),o=r(66),s=r(55),l=r(76),u=r(46),c=r(54)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},h=function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t},p=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t;p="undefined"!=typeof document?document.domain&&n?h(n):((t=u("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F):h(n);for(var r=o.length;r--;)delete p.prototype[o[r]];return p()};s[c]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=a(e),r=new f,f.prototype=null,r[c]=e):r=p(),void 0===t?r:i(r,t)}},(e,t,r)=>{var n=r(12),a=r(48),i=r(49),o=r(17),s=r(75);e.exports=n?Object.defineProperties:function(e,t){i(e);for(var r,n=o(t),l=s(t),u=l.length,c=0;u>c;)a.f(e,r=l[c++],n[r]);return e}},(e,t,r)=>{var n=r(60),a=r(66);e.exports=Object.keys||function(e){return n(e,a)}},(e,t,r)=>{var n=r(27);e.exports=n("document","documentElement")},e=>{e.exports={}},(e,t,r)=>{"use strict";var n=r(9),a=r(14),i=r(39),o=r(56),s=r(25),l=r(79),u=r(81),c=r(84),f=r(83),d=r(47),h=r(50),p=r(37),v=r(77),m=r(80),y=o.PROPER,g=o.CONFIGURABLE,b=m.IteratorPrototype,_=m.BUGGY_SAFARI_ITERATORS,S=p("iterator"),w="keys",A="values",k="entries",x=function(){return this};e.exports=function(e,t,r,o,p,m,E){l(r,t,o);var P,C,T,R=function(e){if(e===p&&L)return L;if(!_&&e in F)return F[e];switch(e){case w:case A:case k:return function(){return new r(this,e)}}return function(){return new r(this)}},O=t+" Iterator",I=!1,F=e.prototype,D=F[S]||F["@@iterator"]||p&&F[p],L=!_&&D||R(p),M="Array"==t&&F.entries||D;if(M&&(P=u(M.call(new e)))!==Object.prototype&&P.next&&(i||u(P)===b||(c?c(P,b):s(P[S])||h(P,S,x)),f(P,O,!0,!0),i&&(v[O]=x)),y&&p==A&&D&&D.name!==A&&(!i&&g?d(F,"name",A):(I=!0,L=function(){return a(D,this)})),p)if(C={values:R(A),keys:m?L:R(w),entries:R(k)},E)for(T in C)(_||I||!(T in F))&&h(F,T,C[T]);else n({target:t,proto:!0,forced:_||I},C);return i&&!E||F[S]===L||h(F,S,L,{name:p}),v[t]=L,C}},(e,t,r)=>{"use strict";var n=r(80).IteratorPrototype,a=r(73),i=r(16),o=r(83),s=r(77),l=function(){return this};e.exports=function(e,t,r,u){var c=t+" Iterator";return e.prototype=a(n,{next:i(+!u,r)}),o(e,c,!1,!0),s[c]=l,e}},(e,t,r)=>{"use strict";var n,a,i,o=r(13),s=r(25),l=r(73),u=r(81),c=r(50),f=r(37),d=r(39),h=f("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(a=u(u(i)))!==Object.prototype&&(n=a):p=!0),null==n||o((function(){var e={};return n[h].call(e)!==e}))?n={}:d&&(n=l(n)),s(n[h])||c(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},(e,t,r)=>{var n=r(10),a=r(42),i=r(25),o=r(43),s=r(54),l=r(82),u=s("IE_PROTO"),c=n.Object,f=c.prototype;e.exports=l?c.getPrototypeOf:function(e){var t=o(e);if(a(t,u))return t[u];var r=t.constructor;return i(r)&&t instanceof r?r.prototype:t instanceof c?f:null}},(e,t,r)=>{var n=r(13);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},(e,t,r)=>{var n=r(48).f,a=r(42),i=r(37)("toStringTag");e.exports=function(e,t,r){e&&!a(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},(e,t,r)=>{var n=r(19),a=r(49),i=r(85);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return a(r),i(n),t?e(r,n):r.__proto__=n,r}}():void 0)},(e,t,r)=>{var n=r(10),a=r(25),i=n.String,o=n.TypeError;e.exports=function(e){if("object"==typeof e||a(e))return e;throw o("Can't set "+i(e)+" as a prototype")}},(e,t,r)=>{var n=r(9),a=r(87),i=r(95);n({target:"Object",stat:!0},{fromEntries:function(e){var t={};return a(e,(function(e,r){i(t,e,r)}),{AS_ENTRIES:!0}),t}})},(e,t,r)=>{var n=r(10),a=r(88),i=r(14),o=r(49),s=r(35),l=r(89),u=r(64),c=r(28),f=r(90),d=r(91),h=r(94),p=n.TypeError,v=function(e,t){this.stopped=e,this.result=t},m=v.prototype;e.exports=function(e,t,r){var n,y,g,b,_,S,w,A=r&&r.that,k=!(!r||!r.AS_ENTRIES),x=!(!r||!r.IS_ITERATOR),E=!(!r||!r.INTERRUPTED),P=a(t,A),C=function(e){return n&&h(n,"normal",e),new v(!0,e)},T=function(e){return k?(o(e),E?P(e[0],e[1],C):P(e[0],e[1])):E?P(e,C):P(e)};if(x)n=e;else{if(!(y=d(e)))throw p(s(e)+" is not iterable");if(l(y)){for(g=0,b=u(e);b>g;g++)if((_=T(e[g]))&&c(m,_))return _;return new v(!1)}n=f(e,y)}for(S=n.next;!(w=i(S,n)).done;){try{_=T(w.value)}catch(e){h(n,"throw",e)}if("object"==typeof _&&_&&c(m,_))return _}return new v(!1)}},(e,t,r)=>{var n=r(19),a=r(34),i=n(n.bind);e.exports=function(e,t){return a(e),void 0===t?e:i?i(e,t):function(){return e.apply(t,arguments)}}},(e,t,r)=>{var n=r(37),a=r(77),i=n("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||o[i]===e)}},(e,t,r)=>{var n=r(10),a=r(14),i=r(34),o=r(49),s=r(35),l=r(91),u=n.TypeError;e.exports=function(e,t){var r=arguments.length<2?l(e):t;if(i(r))return o(a(r,e));throw u(s(e)+" is not iterable")}},(e,t,r)=>{var n=r(92),a=r(33),i=r(77),o=r(37)("iterator");e.exports=function(e){if(null!=e)return a(e,o)||a(e,"@@iterator")||i[n(e)]}},(e,t,r)=>{var n=r(10),a=r(93),i=r(25),o=r(20),s=r(37)("toStringTag"),l=n.Object,u="Arguments"==o(function(){return arguments}());e.exports=a?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=l(e),s))?r:u?o(t):"Object"==(n=o(t))&&i(t.callee)?"Arguments":n}},(e,t,r)=>{var n={};n[r(37)("toStringTag")]="z",e.exports="[object z]"===String(n)},(e,t,r)=>{var n=r(14),a=r(49),i=r(33);e.exports=function(e,t,r){var o,s;a(e);try{if(!(o=i(e,"return"))){if("throw"===t)throw r;return r}o=n(o,e)}catch(e){s=!0,o=e}if("throw"===t)throw r;if(s)throw o;return a(o),r}},(e,t,r)=>{"use strict";var n=r(22),a=r(48),i=r(16);e.exports=function(e,t,r){var o=n(t);o in e?a.f(e,o,i(0,r)):e[o]=r}},(e,t,r)=>{var n=r(10);e.exports=n},(e,t,r)=>{r(98),r(71),r(105),r(107),r(129),r(130),r(131),r(132);var n=r(96);e.exports=n.Promise},(e,t,r)=>{"use strict";var n=r(9),a=r(10),i=r(28),o=r(81),s=r(84),l=r(57),u=r(73),c=r(47),f=r(16),d=r(99),h=r(101),p=r(87),v=r(102),m=r(37),y=r(104),g=m("toStringTag"),b=a.Error,_=[].push,S=function(e,t){var r,n=arguments.length>2?arguments[2]:void 0,a=i(w,this);s?r=s(new b(void 0),a?o(this):w):(r=a?this:u(w),c(r,g,"Error")),c(r,"message",v(t,"")),y&&c(r,"stack",d(r.stack,1)),h(r,n);var l=[];return p(e,_,{that:l}),c(r,"errors",l),r};s?s(S,b):l(S,b);var w=S.prototype=u(b.prototype,{constructor:f(1,S),message:f(1,""),name:f(1,"AggregateError")});n({global:!0},{AggregateError:S})},(e,t,r)=>{var n=r(19),a=r(100),i=n("".replace),o=n("".split),s=n([].join),l=String(Error("zxcasd").stack),u=/\n\s*at [^:]*:[^\n]*/,c=u.test(l),f=/@[^\n]*\n/.test(l)&&!/zxcasd/.test(l);e.exports=function(e,t){if("string"!=typeof e)return e;if(c)for(;t--;)e=i(e,u,"");else if(f)return s(a(o(e,"\n"),t),"\n");return e}},(e,t,r)=>{var n=r(10),a=r(62),i=r(64),o=r(95),s=n.Array,l=Math.max;e.exports=function(e,t,r){for(var n=i(e),u=a(t,n),c=a(void 0===r?n:r,n),f=s(l(c-u,0)),d=0;u<c;u++,d++)o(f,d,e[u]);return f.length=d,f}},(e,t,r)=>{var n=r(24),a=r(47);e.exports=function(e,t){n(t)&&"cause"in t&&a(e,"cause",t.cause)}},(e,t,r)=>{var n=r(103);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:n(e)}},(e,t,r)=>{var n=r(10),a=r(92),i=n.String;e.exports=function(e){if("Symbol"===a(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},(e,t,r)=>{var n=r(13),a=r(16);e.exports=!n((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",a(1,7)),7!==e.stack)}))},(e,t,r)=>{var n=r(93),a=r(50),i=r(106);n||a(Object.prototype,"toString",i,{unsafe:!0})},(e,t,r)=>{"use strict";var n=r(93),a=r(92);e.exports=n?{}.toString:function(){return"[object "+a(this)+"]"}},(e,t,r)=>{"use strict";var n,a,i,o,s=r(9),l=r(39),u=r(10),c=r(27),f=r(14),d=r(108),h=r(50),p=r(109),v=r(84),m=r(83),y=r(110),g=r(34),b=r(25),_=r(24),S=r(111),w=r(51),A=r(87),k=r(112),x=r(113),E=r(116).set,P=r(121),C=r(124),T=r(126),R=r(125),O=r(127),I=r(52),F=r(68),D=r(37),L=r(128),M=r(120),N=r(31),j=D("species"),B="Promise",U=I.getterFor(B),q=I.set,z=I.getterFor(B),W=d&&d.prototype,G=d,H=W,V=u.TypeError,Y=u.document,Z=u.process,X=R.f,K=X,J=!!(Y&&Y.createEvent&&u.dispatchEvent),Q=b(u.PromiseRejectionEvent),$="unhandledrejection",ee=!1,te=F(B,(function(){var e=w(G),t=e!==String(G);if(!t&&66===N)return!0;if(l&&!H.finally)return!0;if(N>=51&&/native code/.test(e))return!1;var r=new G((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(r.constructor={})[j]=n,!(ee=r.then((function(){}))instanceof n)||!t&&L&&!Q})),re=te||!k((function(e){G.all(e).catch((function(){}))})),ne=function(e){var t;return!(!_(e)||!b(t=e.then))&&t},ae=function(e,t){if(!e.notified){e.notified=!0;var r=e.reactions;P((function(){for(var n=e.value,a=1==e.state,i=0;r.length>i;){var o,s,l,u=r[i++],c=a?u.ok:u.fail,d=u.resolve,h=u.reject,p=u.domain;try{c?(a||(2===e.rejection&&le(e),e.rejection=1),!0===c?o=n:(p&&p.enter(),o=c(n),p&&(p.exit(),l=!0)),o===u.promise?h(V("Promise-chain cycle")):(s=ne(o))?f(s,o,d,h):d(o)):h(n)}catch(e){p&&!l&&p.exit(),h(e)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&oe(e)}))}},ie=function(e,t,r){var n,a;J?((n=Y.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),u.dispatchEvent(n)):n={promise:t,reason:r},!Q&&(a=u["on"+e])?a(n):e===$&&T("Unhandled promise rejection",r)},oe=function(e){f(E,u,(function(){var t,r=e.facade,n=e.value;if(se(e)&&(t=O((function(){M?Z.emit("unhandledRejection",n,r):ie($,r,n)})),e.rejection=M||se(e)?2:1,t.error))throw t.value}))},se=function(e){return 1!==e.rejection&&!e.parent},le=function(e){f(E,u,(function(){var t=e.facade;M?Z.emit("rejectionHandled",t):ie("rejectionhandled",t,e.value)}))},ue=function(e,t,r){return function(n){e(t,n,r)}},ce=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,ae(e,!0))},fe=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw V("Promise can't be resolved itself");var n=ne(t);n?P((function(){var r={done:!1};try{f(n,t,ue(fe,r,e),ue(ce,r,e))}catch(t){ce(r,t,e)}})):(e.value=t,e.state=1,ae(e,!1))}catch(t){ce({done:!1},t,e)}}};if(te&&(H=(G=function(e){S(this,H),g(e),f(n,this);var t=U(this);try{e(ue(fe,t),ue(ce,t))}catch(e){ce(t,e)}}).prototype,(n=function(e){q(this,{type:B,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(H,{then:function(e,t){var r=z(this),n=r.reactions,a=X(x(this,G));return a.ok=!b(e)||e,a.fail=b(t)&&t,a.domain=M?Z.domain:void 0,r.parent=!0,n[n.length]=a,0!=r.state&&ae(r,!1),a.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new n,t=U(e);this.promise=e,this.resolve=ue(fe,t),this.reject=ue(ce,t)},R.f=X=function(e){return e===G||e===i?new a(e):K(e)},!l&&b(d)&&W!==Object.prototype)){o=W.then,ee||(h(W,"then",(function(e,t){var r=this;return new G((function(e,t){f(o,r,e,t)})).then(e,t)}),{unsafe:!0}),h(W,"catch",H.catch,{unsafe:!0}));try{delete W.constructor}catch(e){}v&&v(W,H)}s({global:!0,wrap:!0,forced:te},{Promise:G}),m(G,B,!1,!0),y(B),i=c(B),s({target:B,stat:!0,forced:te},{reject:function(e){var t=X(this);return f(t.reject,void 0,e),t.promise}}),s({target:B,stat:!0,forced:l||te},{resolve:function(e){return C(l&&this===i?G:this,e)}}),s({target:B,stat:!0,forced:re},{all:function(e){var t=this,r=X(t),n=r.resolve,a=r.reject,i=O((function(){var r=g(t.resolve),i=[],o=0,s=1;A(e,(function(e){var l=o++,u=!1;s++,f(r,t,e).then((function(e){u||(u=!0,i[l]=e,--s||n(i))}),a)})),--s||n(i)}));return i.error&&a(i.value),r.promise},race:function(e){var t=this,r=X(t),n=r.reject,a=O((function(){var a=g(t.resolve);A(e,(function(e){f(a,t,e).then(r.resolve,n)}))}));return a.error&&n(a.value),r.promise}})},(e,t,r)=>{var n=r(10);e.exports=n.Promise},(e,t,r)=>{var n=r(50);e.exports=function(e,t,r){for(var a in t)n(e,a,t[a],r);return e}},(e,t,r)=>{"use strict";var n=r(27),a=r(48),i=r(37),o=r(12),s=i("species");e.exports=function(e){var t=n(e),r=a.f;o&&t&&!t[s]&&r(t,s,{configurable:!0,get:function(){return this}})}},(e,t,r)=>{var n=r(10),a=r(28),i=n.TypeError;e.exports=function(e,t){if(a(t,e))return e;throw i("Incorrect invocation")}},(e,t,r)=>{var n=r(37)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[n]=function(){return this},Array.from(o,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},e(i)}catch(e){}return r}},(e,t,r)=>{var n=r(49),a=r(114),i=r(37)("species");e.exports=function(e,t){var r,o=n(e).constructor;return void 0===o||null==(r=n(o)[i])?t:a(r)}},(e,t,r)=>{var n=r(10),a=r(115),i=r(35),o=n.TypeError;e.exports=function(e){if(a(e))return e;throw o(i(e)+" is not a constructor")}},(e,t,r)=>{var n=r(19),a=r(13),i=r(25),o=r(92),s=r(27),l=r(51),u=function(){},c=[],f=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,h=n(d.exec),p=!d.exec(u),v=function(e){if(!i(e))return!1;try{return f(u,c,e),!0}catch(e){return!1}};e.exports=!f||a((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?function(e){if(!i(e))return!1;switch(o(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!h(d,l(e))}:v},(e,t,r)=>{var n,a,i,o,s=r(10),l=r(117),u=r(88),c=r(25),f=r(42),d=r(13),h=r(76),p=r(118),v=r(46),m=r(119),y=r(120),g=s.setImmediate,b=s.clearImmediate,_=s.process,S=s.Dispatch,w=s.Function,A=s.MessageChannel,k=s.String,x=0,E={};try{n=s.location}catch(e){}var P=function(e){if(f(E,e)){var t=E[e];delete E[e],t()}},C=function(e){return function(){P(e)}},T=function(e){P(e.data)},R=function(e){s.postMessage(k(e),n.protocol+"//"+n.host)};g&&b||(g=function(e){var t=p(arguments,1);return E[++x]=function(){l(c(e)?e:w(e),void 0,t)},a(x),x},b=function(e){delete E[e]},y?a=function(e){_.nextTick(C(e))}:S&&S.now?a=function(e){S.now(C(e))}:A&&!m?(o=(i=new A).port2,i.port1.onmessage=T,a=u(o.postMessage,o)):s.addEventListener&&c(s.postMessage)&&!s.importScripts&&n&&"file:"!==n.protocol&&!d(R)?(a=R,s.addEventListener("message",T,!1)):a="onreadystatechange"in v("script")?function(e){h.appendChild(v("script")).onreadystatechange=function(){h.removeChild(this),P(e)}}:function(e){setTimeout(C(e),0)}),e.exports={set:g,clear:b}},e=>{var t=Function.prototype,r=t.apply,n=t.bind,a=t.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(r):function(){return a.apply(r,arguments)})},(e,t,r)=>{var n=r(19);e.exports=n([].slice)},(e,t,r)=>{var n=r(32);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},(e,t,r)=>{var n=r(20),a=r(10);e.exports="process"==n(a.process)},(e,t,r)=>{var n,a,i,o,s,l,u,c,f=r(10),d=r(88),h=r(11).f,p=r(116).set,v=r(119),m=r(122),y=r(123),g=r(120),b=f.MutationObserver||f.WebKitMutationObserver,_=f.document,S=f.process,w=f.Promise,A=h(f,"queueMicrotask"),k=A&&A.value;k||(n=function(){var e,t;for(g&&(e=S.domain)&&e.exit();a;){t=a.fn,a=a.next;try{t()}catch(e){throw a?o():i=void 0,e}}i=void 0,e&&e.enter()},v||g||y||!b||!_?!m&&w&&w.resolve?((u=w.resolve(void 0)).constructor=w,c=d(u.then,u),o=function(){c(n)}):g?o=function(){S.nextTick(n)}:(p=d(p,f),o=function(){p(n)}):(s=!0,l=_.createTextNode(""),new b(n).observe(l,{characterData:!0}),o=function(){l.data=s=!s})),e.exports=k||function(e){var t={fn:e,next:void 0};i&&(i.next=t),a||(a=t,o()),i=t}},(e,t,r)=>{var n=r(32),a=r(10);e.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==a.Pebble},(e,t,r)=>{var n=r(32);e.exports=/web0s(?!.*chrome)/i.test(n)},(e,t,r)=>{var n=r(49),a=r(24),i=r(125);e.exports=function(e,t){if(n(e),a(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},(e,t,r)=>{"use strict";var n=r(34),a=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new a(e)}},(e,t,r)=>{var n=r(10);e.exports=function(e,t){var r=n.console;r&&r.error&&(1==arguments.length?r.error(e):r.error(e,t))}},e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},e=>{e.exports="object"==typeof window},(e,t,r)=>{"use strict";var n=r(9),a=r(14),i=r(34),o=r(125),s=r(127),l=r(87);n({target:"Promise",stat:!0},{allSettled:function(e){var t=this,r=o.f(t),n=r.resolve,u=r.reject,c=s((function(){var r=i(t.resolve),o=[],s=0,u=1;l(e,(function(e){var i=s++,l=!1;u++,a(r,t,e).then((function(e){l||(l=!0,o[i]={status:"fulfilled",value:e},--u||n(o))}),(function(e){l||(l=!0,o[i]={status:"rejected",reason:e},--u||n(o))}))})),--u||n(o)}));return c.error&&u(c.value),r.promise}})},(e,t,r)=>{"use strict";var n=r(9),a=r(34),i=r(27),o=r(14),s=r(125),l=r(127),u=r(87),c="No one promise resolved";n({target:"Promise",stat:!0},{any:function(e){var t=this,r=i("AggregateError"),n=s.f(t),f=n.resolve,d=n.reject,h=l((function(){var n=a(t.resolve),i=[],s=0,l=1,h=!1;u(e,(function(e){var a=s++,u=!1;l++,o(n,t,e).then((function(e){u||h||(h=!0,f(e))}),(function(e){u||h||(u=!0,i[a]=e,--l||d(new r(i,c)))}))})),--l||d(new r(i,c))}));return h.error&&d(h.value),n.promise}})},(e,t,r)=>{"use strict";var n=r(9),a=r(39),i=r(108),o=r(13),s=r(27),l=r(25),u=r(113),c=r(124),f=r(50);if(n({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=u(this,s("Promise")),r=l(e);return this.then(r?function(r){return c(t,e()).then((function(){return r}))}:e,r?function(r){return c(t,e()).then((function(){throw r}))}:e)}}),!a&&l(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&f(i.prototype,"finally",d,{unsafe:!0})}},(e,t,r)=>{"use strict";var n=r(133).charAt,a=r(103),i=r(52),o=r(78),s="String Iterator",l=i.set,u=i.getterFor(s);o(String,"String",(function(e){l(this,{type:s,string:a(e),index:0})}),(function(){var e,t=u(this),r=t.string,a=t.index;return a>=r.length?{value:void 0,done:!0}:(e=n(r,a),t.index+=e.length,{value:e,done:!1})}))},(e,t,r)=>{var n=r(19),a=r(63),i=r(103),o=r(21),s=n("".charAt),l=n("".charCodeAt),u=n("".slice),c=function(e){return function(t,r){var n,c,f=i(o(t)),d=a(r),h=f.length;return d<0||d>=h?e?"":void 0:(n=l(f,d))<55296||n>56319||d+1===h||(c=l(f,d+1))<56320||c>57343?e?s(f,d):n:e?u(f,d,d+2):c-56320+(n-55296<<10)+65536}};e.exports={codeAt:c(!1),charAt:c(!0)}},function(e,t){!function(e){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:function(e){return"Symbol("+e+")"};function r(){}var n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:void 0;function a(e){return"object"==typeof e&&null!==e||"function"==typeof e}var i=r,o=Promise,s=Promise.prototype.then,l=Promise.resolve.bind(o),u=Promise.reject.bind(o);function c(e){return new o(e)}function f(e){return l(e)}function d(e){return u(e)}function h(e,t,r){return s.call(e,t,r)}function p(e,t,r){h(h(e,t,r),void 0,i)}function v(e,t){p(e,t)}function m(e,t){p(e,void 0,t)}function y(e,t,r){return h(e,t,r)}function g(e){h(e,void 0,i)}var b=function(){var e=n&&n.queueMicrotask;if("function"==typeof e)return e;var t=f(void 0);return function(e){return h(t,e)}}();function _(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function S(e,t,r){try{return f(_(e,t,r))}catch(e){return d(e)}}var w=function(){function e(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}return Object.defineProperty(e.prototype,"length",{get:function(){return this._size},enumerable:!1,configurable:!0}),e.prototype.push=function(e){var t=this._back,r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size},e.prototype.shift=function(){var e=this._front,t=e,r=this._cursor,n=r+1,a=e._elements,i=a[r];return 16384===n&&(t=e._next,n=0),--this._size,this._cursor=n,e!==t&&(this._front=t),a[r]=void 0,i},e.prototype.forEach=function(e){for(var t=this._cursor,r=this._front,n=r._elements;!(t===n.length&&void 0===r._next||t===n.length&&(t=0,0===(n=(r=r._next)._elements).length));)e(n[t]),++t},e.prototype.peek=function(){var e=this._front,t=this._cursor;return e._elements[t]},e}();function A(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?P(e):"closed"===t._state?function(e){P(e),R(e)}(e):C(e,t._storedError)}function k(e,t){return kr(e._ownerReadableStream,t)}function x(e){"readable"===e._ownerReadableStream._state?T(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){C(e,t)}(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function E(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function P(e){e._closedPromise=c((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function C(e,t){P(e),T(e,t)}function T(e,t){void 0!==e._closedPromise_reject&&(g(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function R(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}var O=t("[[AbortSteps]]"),I=t("[[ErrorSteps]]"),F=t("[[CancelSteps]]"),D=t("[[PullSteps]]"),L=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},M=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function N(e,t){if(void 0!==e&&("object"!=typeof(r=e)&&"function"!=typeof r))throw new TypeError(t+" is not an object.");var r}function j(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function.")}function B(e,t){if(!function(e){return"object"==typeof e&&null!==e||"function"==typeof e}(e))throw new TypeError(t+" is not an object.")}function U(e,t,r){if(void 0===e)throw new TypeError("Parameter "+t+" is required in '"+r+"'.")}function q(e,t,r){if(void 0===e)throw new TypeError(t+" is required in '"+r+"'.")}function z(e){return Number(e)}function W(e){return 0===e?0:e}function G(e,t){var r=Number.MAX_SAFE_INTEGER,n=Number(e);if(n=W(n),!L(n))throw new TypeError(t+" is not a finite number");if((n=function(e){return W(M(e))}(n))<0||n>r)throw new TypeError(t+" is outside the accepted range of 0 to "+r+", inclusive");return L(n)&&0!==n?n:0}function H(e,t){if(!wr(e))throw new TypeError(t+" is not a ReadableStream.")}function V(e){return new $(e)}function Y(e,t){e._reader._readRequests.push(t)}function Z(e,t,r){var n=e._reader._readRequests.shift();r?n._closeSteps():n._chunkSteps(t)}function X(e){return e._reader._readRequests.length}function K(e){var t=e._reader;return void 0!==t&&!!ee(t)}var J,Q,$=function(){function e(e){if(U(e,1,"ReadableStreamDefaultReader"),H(e,"First parameter"),Ar(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");A(this,e),this._readRequests=new w}return Object.defineProperty(e.prototype,"closed",{get:function(){return ee(this)?this._closedPromise:d(re("closed"))},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),ee(this)?void 0===this._ownerReadableStream?d(E("cancel")):k(this,e):d(re("cancel"))},e.prototype.read=function(){if(!ee(this))return d(re("read"));if(void 0===this._ownerReadableStream)return d(E("read from"));var e,t,r=c((function(r,n){e=r,t=n}));return te(this,{_chunkSteps:function(t){return e({value:t,done:!1})},_closeSteps:function(){return e({value:void 0,done:!0})},_errorSteps:function(e){return t(e)}}),r},e.prototype.releaseLock=function(){if(!ee(this))throw re("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");x(this)}},e}();function ee(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")&&e instanceof $}function te(e,t){var r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[D](t)}function re(e){return new TypeError("ReadableStreamDefaultReader.prototype."+e+" can only be used on a ReadableStreamDefaultReader")}Object.defineProperties($.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty($.prototype,t.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0}),"symbol"==typeof t.asyncIterator&&((J={})[t.asyncIterator]=function(){return this},Q=J,Object.defineProperty(Q,t.asyncIterator,{enumerable:!1}));var ne=function(){function e(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}return e.prototype.next=function(){var e=this,t=function(){return e._nextSteps()};return this._ongoingPromise=this._ongoingPromise?y(this._ongoingPromise,t,t):t(),this._ongoingPromise},e.prototype.return=function(e){var t=this,r=function(){return t._returnSteps(e)};return this._ongoingPromise?y(this._ongoingPromise,r,r):r()},e.prototype._nextSteps=function(){var e=this;if(this._isFinished)return Promise.resolve({value:void 0,done:!0});var t,r,n=this._reader;if(void 0===n._ownerReadableStream)return d(E("iterate"));var a=c((function(e,n){t=e,r=n}));return te(n,{_chunkSteps:function(r){e._ongoingPromise=void 0,b((function(){return t({value:r,done:!1})}))},_closeSteps:function(){e._ongoingPromise=void 0,e._isFinished=!0,x(n),t({value:void 0,done:!0})},_errorSteps:function(t){e._ongoingPromise=void 0,e._isFinished=!0,x(n),r(t)}}),a},e.prototype._returnSteps=function(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;var t=this._reader;if(void 0===t._ownerReadableStream)return d(E("finish iterating"));if(!this._preventCancel){var r=k(t,e);return x(t),y(r,(function(){return{value:e,done:!0}}))}return x(t),f({value:e,done:!0})},e}(),ae={next:function(){return ie(this)?this._asyncIteratorImpl.next():d(oe("next"))},return:function(e){return ie(this)?this._asyncIteratorImpl.return(e):d(oe("return"))}};function ie(e){if(!a(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl"))return!1;try{return e._asyncIteratorImpl instanceof ne}catch(e){return!1}}function oe(e){return new TypeError("ReadableStreamAsyncIterator."+e+" can only be used on a ReadableSteamAsyncIterator")}void 0!==Q&&Object.setPrototypeOf(ae,Q);var se=Number.isNaN||function(e){return e!=e};function le(e){return e.slice()}function ue(e,t,r,n,a){new Uint8Array(e).set(new Uint8Array(r,n,a),t)}function ce(e,t,r){if(e.slice)return e.slice(t,r);var n=r-t,a=new ArrayBuffer(n);return ue(a,0,e,t,n),a}function fe(e){var t=ce(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function de(e){var t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function he(e,t,r){if("number"!=typeof(n=r)||se(n)||n<0||r===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var n;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function pe(e){e._queue=new w,e._queueTotalSize=0}var ve=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"view",{get:function(){if(!ge(this))throw Ue("view");return this._view},enumerable:!1,configurable:!0}),e.prototype.respond=function(e){if(!ge(this))throw Ue("respond");if(U(e,1,"respond"),e=G(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,Ne(this._associatedReadableByteStreamController,e)},e.prototype.respondWithNewView=function(e){if(!ge(this))throw Ue("respondWithNewView");if(U(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");e.buffer,je(this._associatedReadableByteStreamController,e)},e}();Object.defineProperties(ve.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(ve.prototype,t.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});var me=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"byobRequest",{get:function(){if(!ye(this))throw qe("byobRequest");return Le(this)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!ye(this))throw qe("desiredSize");return Me(this)},enumerable:!1,configurable:!0}),e.prototype.close=function(){if(!ye(this))throw qe("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError("The stream (in "+e+" state) is not in the readable state and cannot be closed");Ie(this)},e.prototype.enqueue=function(e){if(!ye(this))throw qe("enqueue");if(U(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");var t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError("The stream (in "+t+" state) is not in the readable state and cannot be enqueued to");Fe(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!ye(this))throw qe("error");De(this,e)},e.prototype[F]=function(e){_e(this),pe(this);var t=this._cancelAlgorithm(e);return Oe(this),t},e.prototype[D]=function(e){var t=this._controlledReadableByteStream;if(this._queueTotalSize>0){var r=this._queue.shift();this._queueTotalSize-=r.byteLength,Ee(this);var n=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);e._chunkSteps(n)}else{var a=this._autoAllocateChunkSize;if(void 0!==a){var i=void 0;try{i=new ArrayBuffer(a)}catch(t){return void e._errorSteps(t)}var o={buffer:i,bufferByteLength:a,byteOffset:0,byteLength:a,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(o)}Y(t,e),be(this)}},e}();function ye(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")&&e instanceof me}function ge(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")&&e instanceof ve}function be(e){(function(e){var t=e._controlledReadableByteStream;return"readable"===t._state&&!e._closeRequested&&!!e._started&&(!!(K(t)&&X(t)>0)||!!(He(t)&&Ge(t)>0)||Me(e)>0)})(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,p(e._pullAlgorithm(),(function(){e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,be(e))}),(function(t){De(e,t)}))))}function _e(e){Pe(e),e._pendingPullIntos=new w}function Se(e,t){var r=!1;"closed"===e._state&&(r=!0);var n=we(t);"default"===t.readerType?Z(e,n,r):function(e,t,r){var n=e._reader._readIntoRequests.shift();r?n._closeSteps(t):n._chunkSteps(t)}(e,n,r)}function we(e){var t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function Ae(e,t,r,n){e._queue.push({buffer:t,byteOffset:r,byteLength:n}),e._queueTotalSize+=n}function ke(e,t){var r=t.elementSize,n=t.bytesFilled-t.bytesFilled%r,a=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+a,o=i-i%r,s=a,l=!1;o>n&&(s=o-t.bytesFilled,l=!0);for(var u=e._queue;s>0;){var c=u.peek(),f=Math.min(s,c.byteLength),d=t.byteOffset+t.bytesFilled;ue(t.buffer,d,c.buffer,c.byteOffset,f),c.byteLength===f?u.shift():(c.byteOffset+=f,c.byteLength-=f),e._queueTotalSize-=f,xe(0,f,t),s-=f}return l}function xe(e,t,r){r.bytesFilled+=t}function Ee(e){0===e._queueTotalSize&&e._closeRequested?(Oe(e),xr(e._controlledReadableByteStream)):be(e)}function Pe(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Ce(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;var t=e._pendingPullIntos.peek();ke(e,t)&&(Re(e),Se(e._controlledReadableByteStream,t))}}function Te(e,t){var r=e._pendingPullIntos.peek();Pe(e),"closed"===e._controlledReadableByteStream._state?function(e,t){var r=e._controlledReadableByteStream;if(He(r))for(;Ge(r)>0;)Se(r,Re(e))}(e):function(e,t,r){if(xe(0,t,r),!(r.bytesFilled<r.elementSize)){Re(e);var n=r.bytesFilled%r.elementSize;if(n>0){var a=r.byteOffset+r.bytesFilled,i=ce(r.buffer,a-n,a);Ae(e,i,0,i.byteLength)}r.bytesFilled-=n,Se(e._controlledReadableByteStream,r),Ce(e)}}(e,t,r),be(e)}function Re(e){return e._pendingPullIntos.shift()}function Oe(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Ie(e){var t=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===t._state)if(e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos.peek().bytesFilled>0){var r=new TypeError("Insufficient bytes to fill elements in the given buffer");throw De(e,r),r}Oe(e),xr(t)}}function Fe(e,t){var r=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===r._state){var n=t.buffer,a=t.byteOffset,i=t.byteLength,o=n;if(e._pendingPullIntos.length>0){var s=e._pendingPullIntos.peek();s.buffer,s.buffer=s.buffer}Pe(e),K(r)?0===X(r)?Ae(e,o,a,i):(e._pendingPullIntos.length>0&&Re(e),Z(r,new Uint8Array(o,a,i),!1)):He(r)?(Ae(e,o,a,i),Ce(e)):Ae(e,o,a,i),be(e)}}function De(e,t){var r=e._controlledReadableByteStream;"readable"===r._state&&(_e(e),pe(e),Oe(e),Er(r,t))}function Le(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){var t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),n=Object.create(ve.prototype);(function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r})(n,e,r),e._byobRequest=n}return e._byobRequest}function Me(e){var t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Ne(e,t){var r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===t)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range")}r.buffer=r.buffer,Te(e,t)}function je(e,t){var r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===t.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");var n=t.byteLength;r.buffer=t.buffer,Te(e,n)}function Be(e,t,r,n,a,i,o){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,pe(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=i,t._pullAlgorithm=n,t._cancelAlgorithm=a,t._autoAllocateChunkSize=o,t._pendingPullIntos=new w,e._readableStreamController=t,p(f(r()),(function(){t._started=!0,be(t)}),(function(e){De(t,e)}))}function Ue(e){return new TypeError("ReadableStreamBYOBRequest.prototype."+e+" can only be used on a ReadableStreamBYOBRequest")}function qe(e){return new TypeError("ReadableByteStreamController.prototype."+e+" can only be used on a ReadableByteStreamController")}function ze(e){return new Ve(e)}function We(e,t){e._reader._readIntoRequests.push(t)}function Ge(e){return e._reader._readIntoRequests.length}function He(e){var t=e._reader;return void 0!==t&&!!Ye(t)}Object.defineProperties(me.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(me.prototype,t.toStringTag,{value:"ReadableByteStreamController",configurable:!0});var Ve=function(){function e(e){if(U(e,1,"ReadableStreamBYOBReader"),H(e,"First parameter"),Ar(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!ye(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");A(this,e),this._readIntoRequests=new w}return Object.defineProperty(e.prototype,"closed",{get:function(){return Ye(this)?this._closedPromise:d(Xe("closed"))},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),Ye(this)?void 0===this._ownerReadableStream?d(E("cancel")):k(this,e):d(Xe("cancel"))},e.prototype.read=function(e){if(!Ye(this))return d(Xe("read"));if(!ArrayBuffer.isView(e))return d(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return d(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return d(new TypeError("view's buffer must have non-zero byteLength"));if(e.buffer,void 0===this._ownerReadableStream)return d(E("read from"));var t,r,n=c((function(e,n){t=e,r=n}));return Ze(this,e,{_chunkSteps:function(e){return t({value:e,done:!1})},_closeSteps:function(e){return t({value:e,done:!0})},_errorSteps:function(e){return r(e)}}),n},e.prototype.releaseLock=function(){if(!Ye(this))throw Xe("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");x(this)}},e}();function Ye(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")&&e instanceof Ve}function Ze(e,t,r){var n=e._ownerReadableStream;n._disturbed=!0,"errored"===n._state?r._errorSteps(n._storedError):function(e,t,r){var n=e._controlledReadableByteStream,a=1;t.constructor!==DataView&&(a=t.constructor.BYTES_PER_ELEMENT);var i=t.constructor,o=t.buffer,s={buffer:o,bufferByteLength:o.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:a,viewConstructor:i,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(s),void We(n,r);if("closed"!==n._state){if(e._queueTotalSize>0){if(ke(e,s)){var l=we(s);return Ee(e),void r._chunkSteps(l)}if(e._closeRequested){var u=new TypeError("Insufficient bytes to fill elements in the given buffer");return De(e,u),void r._errorSteps(u)}}e._pendingPullIntos.push(s),We(n,r),be(e)}else{var c=new i(s.buffer,s.byteOffset,0);r._closeSteps(c)}}(n._readableStreamController,t,r)}function Xe(e){return new TypeError("ReadableStreamBYOBReader.prototype."+e+" can only be used on a ReadableStreamBYOBReader")}function Ke(e,t){var r=e.highWaterMark;if(void 0===r)return t;if(se(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Je(e){return e.size||function(){return 1}}function Qe(e,t){N(e,t);var r=null==e?void 0:e.highWaterMark,n=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:z(r),size:void 0===n?void 0:$e(n,t+" has member 'size' that")}}function $e(e,t){return j(e,t),function(t){return z(e(t))}}function et(e,t,r){return j(e,r),function(r){return S(e,t,[r])}}function tt(e,t,r){return j(e,r),function(){return S(e,t,[])}}function rt(e,t,r){return j(e,r),function(r){return _(e,t,[r])}}function nt(e,t,r){return j(e,r),function(r,n){return S(e,t,[r,n])}}function at(e,t){if(!ut(e))throw new TypeError(t+" is not a WritableStream.")}Object.defineProperties(Ve.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ve.prototype,t.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});var it="function"==typeof AbortController;var ot=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),void 0===e?e=null:B(e,"First parameter");var r=Qe(t,"Second parameter"),n=function(e,t){N(e,t);var r=null==e?void 0:e.abort,n=null==e?void 0:e.close,a=null==e?void 0:e.start,i=null==e?void 0:e.type,o=null==e?void 0:e.write;return{abort:void 0===r?void 0:et(r,e,t+" has member 'abort' that"),close:void 0===n?void 0:tt(n,e,t+" has member 'close' that"),start:void 0===a?void 0:rt(a,e,t+" has member 'start' that"),write:void 0===o?void 0:nt(o,e,t+" has member 'write' that"),type:i}}(e,"First parameter");if(lt(this),void 0!==n.type)throw new RangeError("Invalid type is specified");var a=Je(r);!function(e,t,r,n){var a=Object.create(Pt.prototype),i=function(){},o=function(){return f(void 0)},s=function(){return f(void 0)},l=function(){return f(void 0)};void 0!==t.start&&(i=function(){return t.start(a)}),void 0!==t.write&&(o=function(e){return t.write(e,a)}),void 0!==t.close&&(s=function(){return t.close()}),void 0!==t.abort&&(l=function(e){return t.abort(e)}),Tt(e,a,i,o,s,l,r,n)}(this,n,Ke(r,1),a)}return Object.defineProperty(e.prototype,"locked",{get:function(){if(!ut(this))throw Mt("locked");return ct(this)},enumerable:!1,configurable:!0}),e.prototype.abort=function(e){return void 0===e&&(e=void 0),ut(this)?ct(this)?d(new TypeError("Cannot abort a stream that already has a writer")):ft(this,e):d(Mt("abort"))},e.prototype.close=function(){return ut(this)?ct(this)?d(new TypeError("Cannot close a stream that already has a writer")):mt(this)?d(new TypeError("Cannot close an already-closing stream")):dt(this):d(Mt("close"))},e.prototype.getWriter=function(){if(!ut(this))throw Mt("getWriter");return st(this)},e}();function st(e){return new bt(e)}function lt(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new w,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function ut(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")&&e instanceof ot}function ct(e){return void 0!==e._writer}function ft(e,t){var r;if("closed"===e._state||"errored"===e._state)return f(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort();var n=e._state;if("closed"===n||"errored"===n)return f(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;var a=!1;"erroring"===n&&(a=!0,t=void 0);var i=c((function(r,n){e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:n,_reason:t,_wasAlreadyErroring:a}}));return e._pendingAbortRequest._promise=i,a||pt(e,t),i}function dt(e){var t=e._state;if("closed"===t||"errored"===t)return d(new TypeError("The stream (in "+t+" state) is not in the writable state and cannot be closed"));var r,n=c((function(t,r){var n={_resolve:t,_reject:r};e._closeRequest=n})),a=e._writer;return void 0!==a&&e._backpressure&&"writable"===t&&Zt(a),he(r=e._writableStreamController,Et,0),It(r),n}function ht(e,t){"writable"!==e._state?vt(e):pt(e,t)}function pt(e,t){var r=e._writableStreamController;e._state="erroring",e._storedError=t;var n=e._writer;void 0!==n&&At(n,t),!function(e){return void 0!==e._inFlightWriteRequest||void 0!==e._inFlightCloseRequest}(e)&&r._started&&vt(e)}function vt(e){e._state="errored",e._writableStreamController[I]();var t=e._storedError;if(e._writeRequests.forEach((function(e){e._reject(t)})),e._writeRequests=new w,void 0!==e._pendingAbortRequest){var r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void yt(e);p(e._writableStreamController[O](r._reason),(function(){r._resolve(),yt(e)}),(function(t){r._reject(t),yt(e)}))}else yt(e)}function mt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function yt(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);var t=e._writer;void 0!==t&&zt(t,e._storedError)}function gt(e,t){var r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){Gt(e)}(r):Zt(r)),e._backpressure=t}Object.defineProperties(ot.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(ot.prototype,t.toStringTag,{value:"WritableStream",configurable:!0});var bt=function(){function e(e){if(U(e,1,"WritableStreamDefaultWriter"),at(e,"First parameter"),ct(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;var t,r=e._state;if("writable"===r)!mt(e)&&e._backpressure?Gt(this):Vt(this),Ut(this);else if("erroring"===r)Ht(this,e._storedError),Ut(this);else if("closed"===r)Vt(this),Ut(t=this),Wt(t);else{var n=e._storedError;Ht(this,n),qt(this,n)}}return Object.defineProperty(e.prototype,"closed",{get:function(){return _t(this)?this._closedPromise:d(jt("closed"))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!_t(this))throw jt("desiredSize");if(void 0===this._ownerWritableStream)throw Bt("desiredSize");return e=this._ownerWritableStream,"errored"===(t=e._state)||"erroring"===t?null:"closed"===t?0:Ot(e._writableStreamController);var e,t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ready",{get:function(){return _t(this)?this._readyPromise:d(jt("ready"))},enumerable:!1,configurable:!0}),e.prototype.abort=function(e){return void 0===e&&(e=void 0),_t(this)?void 0===this._ownerWritableStream?d(Bt("abort")):function(e,t){return ft(e._ownerWritableStream,t)}(this,e):d(jt("abort"))},e.prototype.close=function(){if(!_t(this))return d(jt("close"));var e=this._ownerWritableStream;return void 0===e?d(Bt("close")):mt(e)?d(new TypeError("Cannot close an already-closing stream")):St(this)},e.prototype.releaseLock=function(){if(!_t(this))throw jt("releaseLock");void 0!==this._ownerWritableStream&&kt(this)},e.prototype.write=function(e){return void 0===e&&(e=void 0),_t(this)?void 0===this._ownerWritableStream?d(Bt("write to")):xt(this,e):d(jt("write"))},e}();function _t(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")&&e instanceof bt}function St(e){return dt(e._ownerWritableStream)}function wt(e,t){"pending"===e._closedPromiseState?zt(e,t):function(e,t){qt(e,t)}(e,t)}function At(e,t){"pending"===e._readyPromiseState?Yt(e,t):function(e,t){Ht(e,t)}(e,t)}function kt(e){var t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");At(e,r),wt(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function xt(e,t){var r=e._ownerWritableStream,n=r._writableStreamController,a=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return Ft(e,t),1}}(n,t);if(r!==e._ownerWritableStream)return d(Bt("write to"));var i=r._state;if("errored"===i)return d(r._storedError);if(mt(r)||"closed"===i)return d(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return d(r._storedError);var o=function(e){return c((function(t,r){var n={_resolve:t,_reject:r};e._writeRequests.push(n)}))}(r);return function(e,t,r){try{he(e,t,r)}catch(t){return void Ft(e,t)}var n=e._controlledWritableStream;mt(n)||"writable"!==n._state||gt(n,Dt(e)),It(e)}(n,t,a),o}Object.defineProperties(bt.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(bt.prototype,t.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});var Et={},Pt=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"abortReason",{get:function(){if(!Ct(this))throw Nt("abortReason");return this._abortReason},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"signal",{get:function(){if(!Ct(this))throw Nt("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal},enumerable:!1,configurable:!0}),e.prototype.error=function(e){if(void 0===e&&(e=void 0),!Ct(this))throw Nt("error");"writable"===this._controlledWritableStream._state&&Lt(this,e)},e.prototype[O]=function(e){var t=this._abortAlgorithm(e);return Rt(this),t},e.prototype[I]=function(){pe(this)},e}();function Ct(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream")&&e instanceof Pt}function Tt(e,t,r,n,a,i,o,s){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,pe(t),t._abortReason=void 0,t._abortController=function(){if(it)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=s,t._strategyHWM=o,t._writeAlgorithm=n,t._closeAlgorithm=a,t._abortAlgorithm=i;var l=Dt(t);gt(e,l),p(f(r()),(function(){t._started=!0,It(t)}),(function(r){t._started=!0,ht(e,r)}))}function Rt(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function Ot(e){return e._strategyHWM-e._queueTotalSize}function It(e){var t=e._controlledWritableStream;if(e._started&&void 0===t._inFlightWriteRequest)if("erroring"!==t._state){if(0!==e._queue.length){var r=e._queue.peek().value;r===Et?function(e){var t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),de(e);var r=e._closeAlgorithm();Rt(e),p(r,(function(){!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";var t=e._writer;void 0!==t&&Wt(t)}(t)}),(function(e){!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),ht(e,t)}(t,e)}))}(e):function(e,t){var r=e._controlledWritableStream;(function(e){e._inFlightWriteRequest=e._writeRequests.shift()})(r),p(e._writeAlgorithm(t),(function(){!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);var t=r._state;if(de(e),!mt(r)&&"writable"===t){var n=Dt(e);gt(r,n)}It(e)}),(function(t){"writable"===r._state&&Rt(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,ht(e,t)}(r,t)}))}(e,r)}}else vt(t)}function Ft(e,t){"writable"===e._controlledWritableStream._state&&Lt(e,t)}function Dt(e){return Ot(e)<=0}function Lt(e,t){var r=e._controlledWritableStream;Rt(e),pt(r,t)}function Mt(e){return new TypeError("WritableStream.prototype."+e+" can only be used on a WritableStream")}function Nt(e){return new TypeError("WritableStreamDefaultController.prototype."+e+" can only be used on a WritableStreamDefaultController")}function jt(e){return new TypeError("WritableStreamDefaultWriter.prototype."+e+" can only be used on a WritableStreamDefaultWriter")}function Bt(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function Ut(e){e._closedPromise=c((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function qt(e,t){Ut(e),zt(e,t)}function zt(e,t){void 0!==e._closedPromise_reject&&(g(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function Wt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function Gt(e){e._readyPromise=c((function(t,r){e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function Ht(e,t){Gt(e),Yt(e,t)}function Vt(e){Gt(e),Zt(e)}function Yt(e,t){void 0!==e._readyPromise_reject&&(g(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Zt(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(Pt.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Pt.prototype,t.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});var Xt="undefined"!=typeof DOMException?DOMException:void 0;var Kt,Jt=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Xt)?Xt:((Kt=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}).prototype=Object.create(Error.prototype),Object.defineProperty(Kt.prototype,"constructor",{value:Kt,writable:!0,configurable:!0}),Kt);function Qt(e,t,n,a,i,o){var s=V(e),l=st(t);e._disturbed=!0;var u=!1,y=f(void 0);return c((function(b,_){var S,w,A,k;if(void 0!==o){if(S=function(){var r=new Jt("Aborted","AbortError"),n=[];a||n.push((function(){return"writable"===t._state?ft(t,r):f(void 0)})),i||n.push((function(){return"readable"===e._state?kr(e,r):f(void 0)})),T((function(){return Promise.all(n.map((function(e){return e()})))}),!0,r)},o.aborted)return void S();o.addEventListener("abort",S)}if(C(e,s._closedPromise,(function(e){a?R(!0,e):T((function(){return ft(t,e)}),!0,e)})),C(t,l._closedPromise,(function(t){i?R(!0,t):T((function(){return kr(e,t)}),!0,t)})),w=e,A=s._closedPromise,k=function(){n?R():T((function(){return function(e){var t=e._ownerWritableStream,r=t._state;return mt(t)||"closed"===r?f(void 0):"errored"===r?d(t._storedError):St(e)}(l)}))},"closed"===w._state?k():v(A,k),mt(t)||"closed"===t._state){var E=new TypeError("the destination writable stream closed before all data could be piped to it");i?R(!0,E):T((function(){return kr(e,E)}),!0,E)}function P(){var e=y;return h(y,(function(){return e!==y?P():void 0}))}function C(e,t,r){"errored"===e._state?r(e._storedError):m(t,r)}function T(e,r,n){function a(){p(e(),(function(){return O(r,n)}),(function(e){return O(!0,e)}))}u||(u=!0,"writable"!==t._state||mt(t)?a():v(P(),a))}function R(e,r){u||(u=!0,"writable"!==t._state||mt(t)?O(e,r):v(P(),(function(){return O(e,r)})))}function O(e,t){kt(l),x(s),void 0!==o&&o.removeEventListener("abort",S),e?_(t):b(void 0)}g(c((function(e,t){!function n(a){a?e():h(u?f(!0):h(l._readyPromise,(function(){return c((function(e,t){te(s,{_chunkSteps:function(t){y=h(xt(l,t),void 0,r),e(!1)},_closeSteps:function(){return e(!0)},_errorSteps:t})}))})),n,t)}(!1)})))}))}var $t=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!er(this))throw cr("desiredSize");return sr(this)},enumerable:!1,configurable:!0}),e.prototype.close=function(){if(!er(this))throw cr("close");if(!lr(this))throw new TypeError("The stream is not in a state that permits close");ar(this)},e.prototype.enqueue=function(e){if(void 0===e&&(e=void 0),!er(this))throw cr("enqueue");if(!lr(this))throw new TypeError("The stream is not in a state that permits enqueue");return ir(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!er(this))throw cr("error");or(this,e)},e.prototype[F]=function(e){pe(this);var t=this._cancelAlgorithm(e);return nr(this),t},e.prototype[D]=function(e){var t=this._controlledReadableStream;if(this._queue.length>0){var r=de(this);this._closeRequested&&0===this._queue.length?(nr(this),xr(t)):tr(this),e._chunkSteps(r)}else Y(t,e),tr(this)},e}();function er(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")&&e instanceof $t}function tr(e){rr(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,p(e._pullAlgorithm(),(function(){e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,tr(e))}),(function(t){or(e,t)}))))}function rr(e){var t=e._controlledReadableStream;return!!lr(e)&&!!e._started&&(!!(Ar(t)&&X(t)>0)||sr(e)>0)}function nr(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function ar(e){if(lr(e)){var t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(nr(e),xr(t))}}function ir(e,t){if(lr(e)){var r=e._controlledReadableStream;if(Ar(r)&&X(r)>0)Z(r,t,!1);else{var n=void 0;try{n=e._strategySizeAlgorithm(t)}catch(t){throw or(e,t),t}try{he(e,t,n)}catch(t){throw or(e,t),t}}tr(e)}}function or(e,t){var r=e._controlledReadableStream;"readable"===r._state&&(pe(e),nr(e),Er(r,t))}function sr(e){var t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function lr(e){var t=e._controlledReadableStream._state;return!e._closeRequested&&"readable"===t}function ur(e,t,r,n,a,i,o){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,pe(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=o,t._strategyHWM=i,t._pullAlgorithm=n,t._cancelAlgorithm=a,e._readableStreamController=t,p(f(r()),(function(){t._started=!0,tr(t)}),(function(e){or(t,e)}))}function cr(e){return new TypeError("ReadableStreamDefaultController.prototype."+e+" can only be used on a ReadableStreamDefaultController")}function fr(e,t){return ye(e._readableStreamController)?function(e){var t,r,n,a,i,o=V(e),s=!1,l=!1,u=!1,d=!1,h=!1,p=c((function(e){i=e}));function v(e){m(e._closedPromise,(function(t){e===o&&(De(n._readableStreamController,t),De(a._readableStreamController,t),d&&h||i(void 0))}))}function y(){Ye(o)&&(x(o),v(o=V(e))),te(o,{_chunkSteps:function(t){b((function(){l=!1,u=!1;var r=t,o=t;if(!d&&!h)try{o=fe(t)}catch(t){return De(n._readableStreamController,t),De(a._readableStreamController,t),void i(kr(e,t))}d||Fe(n._readableStreamController,r),h||Fe(a._readableStreamController,o),s=!1,l?_():u&&S()}))},_closeSteps:function(){s=!1,d||Ie(n._readableStreamController),h||Ie(a._readableStreamController),n._readableStreamController._pendingPullIntos.length>0&&Ne(n._readableStreamController,0),a._readableStreamController._pendingPullIntos.length>0&&Ne(a._readableStreamController,0),d&&h||i(void 0)},_errorSteps:function(){s=!1}})}function g(t,r){ee(o)&&(x(o),v(o=ze(e)));var c=r?a:n,f=r?n:a;Ze(o,t,{_chunkSteps:function(t){b((function(){l=!1,u=!1;var n=r?h:d;if(r?d:h)n||je(c._readableStreamController,t);else{var a=void 0;try{a=fe(t)}catch(t){return De(c._readableStreamController,t),De(f._readableStreamController,t),void i(kr(e,t))}n||je(c._readableStreamController,t),Fe(f._readableStreamController,a)}s=!1,l?_():u&&S()}))},_closeSteps:function(e){s=!1;var t=r?h:d,n=r?d:h;t||Ie(c._readableStreamController),n||Ie(f._readableStreamController),void 0!==e&&(t||je(c._readableStreamController,e),!n&&f._readableStreamController._pendingPullIntos.length>0&&Ne(f._readableStreamController,0)),t&&n||i(void 0)},_errorSteps:function(){s=!1}})}function _(){if(s)return l=!0,f(void 0);s=!0;var e=Le(n._readableStreamController);return null===e?y():g(e._view,!1),f(void 0)}function S(){if(s)return u=!0,f(void 0);s=!0;var e=Le(a._readableStreamController);return null===e?y():g(e._view,!0),f(void 0)}function w(n){if(d=!0,t=n,h){var a=le([t,r]),o=kr(e,a);i(o)}return p}function A(n){if(h=!0,r=n,d){var a=le([t,r]),o=kr(e,a);i(o)}return p}function k(){}return n=_r(k,_,w),a=_r(k,S,A),v(o),[n,a]}(e):function(e,t){var r,n,a,i,o,s=V(e),l=!1,u=!1,d=!1,h=!1,p=c((function(e){o=e}));function v(){return l?(u=!0,f(void 0)):(l=!0,te(s,{_chunkSteps:function(e){b((function(){u=!1;var t=e,r=e;d||ir(a._readableStreamController,t),h||ir(i._readableStreamController,r),l=!1,u&&v()}))},_closeSteps:function(){l=!1,d||ar(a._readableStreamController),h||ar(i._readableStreamController),d&&h||o(void 0)},_errorSteps:function(){l=!1}}),f(void 0))}function y(t){if(d=!0,r=t,h){var a=le([r,n]),i=kr(e,a);o(i)}return p}function g(t){if(h=!0,n=t,d){var a=le([r,n]),i=kr(e,a);o(i)}return p}function _(){}return a=br(_,v,y),i=br(_,v,g),m(s._closedPromise,(function(e){or(a._readableStreamController,e),or(i._readableStreamController,e),d&&h||o(void 0)})),[a,i]}(e)}function dr(e,t,r){return j(e,r),function(r){return S(e,t,[r])}}function hr(e,t,r){return j(e,r),function(r){return S(e,t,[r])}}function pr(e,t,r){return j(e,r),function(r){return _(e,t,[r])}}function vr(e,t){if("bytes"!=(e=""+e))throw new TypeError(t+" '"+e+"' is not a valid enumeration value for ReadableStreamType");return e}function mr(e,t){if("byob"!=(e=""+e))throw new TypeError(t+" '"+e+"' is not a valid enumeration value for ReadableStreamReaderMode");return e}function yr(e,t){N(e,t);var r=null==e?void 0:e.preventAbort,n=null==e?void 0:e.preventCancel,a=null==e?void 0:e.preventClose,i=null==e?void 0:e.signal;return void 0!==i&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(t+" is not an AbortSignal.")}(i,t+" has member 'signal' that"),{preventAbort:Boolean(r),preventCancel:Boolean(n),preventClose:Boolean(a),signal:i}}Object.defineProperties($t.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty($t.prototype,t.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});var gr=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),void 0===e?e=null:B(e,"First parameter");var r=Qe(t,"Second parameter"),n=function(e,t){N(e,t);var r=e,n=null==r?void 0:r.autoAllocateChunkSize,a=null==r?void 0:r.cancel,i=null==r?void 0:r.pull,o=null==r?void 0:r.start,s=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===n?void 0:G(n,t+" has member 'autoAllocateChunkSize' that"),cancel:void 0===a?void 0:dr(a,r,t+" has member 'cancel' that"),pull:void 0===i?void 0:hr(i,r,t+" has member 'pull' that"),start:void 0===o?void 0:pr(o,r,t+" has member 'start' that"),type:void 0===s?void 0:vr(s,t+" has member 'type' that")}}(e,"First parameter");if(Sr(this),"bytes"===n.type){if(void 0!==r.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(e,t,r){var n=Object.create(me.prototype),a=function(){},i=function(){return f(void 0)},o=function(){return f(void 0)};void 0!==t.start&&(a=function(){return t.start(n)}),void 0!==t.pull&&(i=function(){return t.pull(n)}),void 0!==t.cancel&&(o=function(e){return t.cancel(e)});var s=t.autoAllocateChunkSize;if(0===s)throw new TypeError("autoAllocateChunkSize must be greater than 0");Be(e,n,a,i,o,r,s)}(this,n,Ke(r,0))}else{var a=Je(r);!function(e,t,r,n){var a=Object.create($t.prototype),i=function(){},o=function(){return f(void 0)},s=function(){return f(void 0)};void 0!==t.start&&(i=function(){return t.start(a)}),void 0!==t.pull&&(o=function(){return t.pull(a)}),void 0!==t.cancel&&(s=function(e){return t.cancel(e)}),ur(e,a,i,o,s,r,n)}(this,n,Ke(r,1),a)}}return Object.defineProperty(e.prototype,"locked",{get:function(){if(!wr(this))throw Pr("locked");return Ar(this)},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),wr(this)?Ar(this)?d(new TypeError("Cannot cancel a stream that already has a reader")):kr(this,e):d(Pr("cancel"))},e.prototype.getReader=function(e){if(void 0===e&&(e=void 0),!wr(this))throw Pr("getReader");return void 0===function(e,t){N(e,t);var r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:mr(r,t+" has member 'mode' that")}}(e,"First parameter").mode?V(this):ze(this)},e.prototype.pipeThrough=function(e,t){if(void 0===t&&(t={}),!wr(this))throw Pr("pipeThrough");U(e,1,"pipeThrough");var r=function(e,t){N(e,t);var r=null==e?void 0:e.readable;q(r,"readable","ReadableWritablePair"),H(r,t+" has member 'readable' that");var n=null==e?void 0:e.writable;return q(n,"writable","ReadableWritablePair"),at(n,t+" has member 'writable' that"),{readable:r,writable:n}}(e,"First parameter"),n=yr(t,"Second parameter");if(Ar(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(ct(r.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return g(Qt(this,r.writable,n.preventClose,n.preventAbort,n.preventCancel,n.signal)),r.readable},e.prototype.pipeTo=function(e,t){if(void 0===t&&(t={}),!wr(this))return d(Pr("pipeTo"));if(void 0===e)return d("Parameter 1 is required in 'pipeTo'.");if(!ut(e))return d(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));var r;try{r=yr(t,"Second parameter")}catch(e){return d(e)}return Ar(this)?d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):ct(e)?d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):Qt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)},e.prototype.tee=function(){if(!wr(this))throw Pr("tee");return le(fr(this))},e.prototype.values=function(e){if(void 0===e&&(e=void 0),!wr(this))throw Pr("values");return t=this,r=function(e,t){N(e,t);var r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e,"First parameter").preventCancel,n=V(t),a=new ne(n,r),(i=Object.create(ae))._asyncIteratorImpl=a,i;var t,r,n,a,i},e}();function br(e,t,r,n,a){void 0===n&&(n=1),void 0===a&&(a=function(){return 1});var i=Object.create(gr.prototype);return Sr(i),ur(i,Object.create($t.prototype),e,t,r,n,a),i}function _r(e,t,r){var n=Object.create(gr.prototype);return Sr(n),Be(n,Object.create(me.prototype),e,t,r,0,void 0),n}function Sr(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function wr(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")&&e instanceof gr}function Ar(e){return void 0!==e._reader}function kr(e,t){if(e._disturbed=!0,"closed"===e._state)return f(void 0);if("errored"===e._state)return d(e._storedError);xr(e);var n=e._reader;return void 0!==n&&Ye(n)&&(n._readIntoRequests.forEach((function(e){e._closeSteps(void 0)})),n._readIntoRequests=new w),y(e._readableStreamController[F](t),r)}function xr(e){e._state="closed";var t=e._reader;void 0!==t&&(R(t),ee(t)&&(t._readRequests.forEach((function(e){e._closeSteps()})),t._readRequests=new w))}function Er(e,t){e._state="errored",e._storedError=t;var r=e._reader;void 0!==r&&(T(r,t),ee(r)?(r._readRequests.forEach((function(e){e._errorSteps(t)})),r._readRequests=new w):(r._readIntoRequests.forEach((function(e){e._errorSteps(t)})),r._readIntoRequests=new w))}function Pr(e){return new TypeError("ReadableStream.prototype."+e+" can only be used on a ReadableStream")}function Cr(e,t){N(e,t);var r=null==e?void 0:e.highWaterMark;return q(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:z(r)}}Object.defineProperties(gr.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(gr.prototype,t.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof t.asyncIterator&&Object.defineProperty(gr.prototype,t.asyncIterator,{value:gr.prototype.values,writable:!0,configurable:!0});var Tr=function(e){return e.byteLength};Object.defineProperty(Tr,"name",{value:"size",configurable:!0});var Rr=function(){function e(e){U(e,1,"ByteLengthQueuingStrategy"),e=Cr(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}return Object.defineProperty(e.prototype,"highWaterMark",{get:function(){if(!Ir(this))throw Or("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){if(!Ir(this))throw Or("size");return Tr},enumerable:!1,configurable:!0}),e}();function Or(e){return new TypeError("ByteLengthQueuingStrategy.prototype."+e+" can only be used on a ByteLengthQueuingStrategy")}function Ir(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")&&e instanceof Rr}Object.defineProperties(Rr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Rr.prototype,t.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});var Fr=function(){return 1};Object.defineProperty(Fr,"name",{value:"size",configurable:!0});var Dr=function(){function e(e){U(e,1,"CountQueuingStrategy"),e=Cr(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}return Object.defineProperty(e.prototype,"highWaterMark",{get:function(){if(!Mr(this))throw Lr("highWaterMark");return this._countQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){if(!Mr(this))throw Lr("size");return Fr},enumerable:!1,configurable:!0}),e}();function Lr(e){return new TypeError("CountQueuingStrategy.prototype."+e+" can only be used on a CountQueuingStrategy")}function Mr(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")&&e instanceof Dr}function Nr(e,t,r){return j(e,r),function(r){return S(e,t,[r])}}function jr(e,t,r){return j(e,r),function(r){return _(e,t,[r])}}function Br(e,t,r){return j(e,r),function(r,n){return S(e,t,[r,n])}}Object.defineProperties(Dr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Dr.prototype,t.toStringTag,{value:"CountQueuingStrategy",configurable:!0});var Ur=function(){function e(e,t,r){void 0===e&&(e={}),void 0===t&&(t={}),void 0===r&&(r={}),void 0===e&&(e=null);var n=Qe(t,"Second parameter"),a=Qe(r,"Third parameter"),i=function(e,t){N(e,t);var r=null==e?void 0:e.flush,n=null==e?void 0:e.readableType,a=null==e?void 0:e.start,i=null==e?void 0:e.transform,o=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:Nr(r,e,t+" has member 'flush' that"),readableType:n,start:void 0===a?void 0:jr(a,e,t+" has member 'start' that"),transform:void 0===i?void 0:Br(i,e,t+" has member 'transform' that"),writableType:o}}(e,"First parameter");if(void 0!==i.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==i.writableType)throw new RangeError("Invalid writableType specified");var o,s=Ke(a,0),l=Je(a),u=Ke(n,1),h=Je(n);(function(e,t,r,n,a,i){function o(){return t}function s(t){return function(e,t){var r=e._transformStreamController;return e._backpressure?y(e._backpressureChangePromise,(function(){var n=e._writable;if("erroring"===n._state)throw n._storedError;return Xr(r,t)})):Xr(r,t)}(e,t)}function l(t){return function(e,t){return zr(e,t),f(void 0)}(e,t)}function u(){return function(e){var t=e._readable,r=e._transformStreamController,n=r._flushAlgorithm();return Yr(r),y(n,(function(){if("errored"===t._state)throw t._storedError;ar(t._readableStreamController)}),(function(r){throw zr(e,r),t._storedError}))}(e)}function c(){return function(e){return Gr(e,!1),e._backpressureChangePromise}(e)}function d(t){return Wr(e,t),f(void 0)}e._writable=function(e,t,r,n,a,i){void 0===a&&(a=1),void 0===i&&(i=function(){return 1});var o=Object.create(ot.prototype);return lt(o),Tt(o,Object.create(Pt.prototype),e,t,r,n,a,i),o}(o,s,u,l,r,n),e._readable=br(o,c,d,a,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,Gr(e,!0),e._transformStreamController=void 0})(this,c((function(e){o=e})),u,h,s,l),function(e,t){var r=Object.create(Hr.prototype),n=function(e){try{return Zr(r,e),f(void 0)}catch(e){return d(e)}},a=function(){return f(void 0)};void 0!==t.transform&&(n=function(e){return t.transform(e,r)}),void 0!==t.flush&&(a=function(){return t.flush(r)}),function(e,t,r,n){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=n}(e,r,n,a)}(this,i),void 0!==i.start?o(i.start(this._transformStreamController)):o(void 0)}return Object.defineProperty(e.prototype,"readable",{get:function(){if(!qr(this))throw Jr("readable");return this._readable},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"writable",{get:function(){if(!qr(this))throw Jr("writable");return this._writable},enumerable:!1,configurable:!0}),e}();function qr(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")&&e instanceof Ur}function zr(e,t){or(e._readable._readableStreamController,t),Wr(e,t)}function Wr(e,t){Yr(e._transformStreamController),Ft(e._writable._writableStreamController,t),e._backpressure&&Gr(e,!1)}function Gr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=c((function(t){e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(Ur.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ur.prototype,t.toStringTag,{value:"TransformStream",configurable:!0});var Hr=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!Vr(this))throw Kr("desiredSize");return sr(this._controlledTransformStream._readable._readableStreamController)},enumerable:!1,configurable:!0}),e.prototype.enqueue=function(e){if(void 0===e&&(e=void 0),!Vr(this))throw Kr("enqueue");Zr(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!Vr(this))throw Kr("error");var t;t=e,zr(this._controlledTransformStream,t)},e.prototype.terminate=function(){if(!Vr(this))throw Kr("terminate");var e;ar((e=this._controlledTransformStream)._readable._readableStreamController),Wr(e,new TypeError("TransformStream terminated"))},e}();function Vr(e){return!!a(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")&&e instanceof Hr}function Yr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function Zr(e,t){var r=e._controlledTransformStream,n=r._readable._readableStreamController;if(!lr(n))throw new TypeError("Readable side is not in a state that permits enqueue");try{ir(n,t)}catch(e){throw Wr(r,e),r._readable._storedError}(function(e){return!rr(e)})(n)!==r._backpressure&&Gr(r,!0)}function Xr(e,t){return y(e._transformAlgorithm(t),void 0,(function(t){throw zr(e._controlledTransformStream,t),t}))}function Kr(e){return new TypeError("TransformStreamDefaultController.prototype."+e+" can only be used on a TransformStreamDefaultController")}function Jr(e){return new TypeError("TransformStream.prototype."+e+" can only be used on a TransformStream")}Object.defineProperties(Hr.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Hr.prototype,t.toStringTag,{value:"TransformStreamDefaultController",configurable:!0}),e.ByteLengthQueuingStrategy=Rr,e.CountQueuingStrategy=Dr,e.ReadableByteStreamController=me,e.ReadableStream=gr,e.ReadableStreamBYOBReader=Ve,e.ReadableStreamBYOBRequest=ve,e.ReadableStreamDefaultController=$t,e.ReadableStreamDefaultReader=$,e.TransformStream=Ur,e.TransformStreamDefaultController=Hr,e.WritableStream=ot,e.WritableStreamDefaultController=Pt,e.WritableStreamDefaultWriter=bt,Object.defineProperty(e,"__esModule",{value:!0})}(t)},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseStandardFontDataFactory=t.BaseSVGFactory=t.BaseCanvasFactory=t.BaseCMapReaderFactory=void 0;var n,a=(n=r(2))&&n.__esModule?n:{default:n},i=r(4);function o(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function s(e){o(i,n,a,s,l,"next",e)}function l(e){o(i,n,a,s,l,"throw",e)}s(void 0)}))}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),e}var f=function(){function e(){l(this,e),this.constructor===e&&(0,i.unreachable)("Cannot initialize BaseCanvasFactory.")}return c(e,[{key:"create",value:function(e,t){if(e<=0||t<=0)throw new Error("Invalid canvas size");var r=this._createCanvas(e,t);return{canvas:r,context:r.getContext("2d")}}},{key:"reset",value:function(e,t,r){if(!e.canvas)throw new Error("Canvas is not specified");if(t<=0||r<=0)throw new Error("Invalid canvas size");e.canvas.width=t,e.canvas.height=r}},{key:"destroy",value:function(e){if(!e.canvas)throw new Error("Canvas is not specified");e.canvas.width=0,e.canvas.height=0,e.canvas=null,e.context=null}},{key:"_createCanvas",value:function(e,t){(0,i.unreachable)("Abstract method `_createCanvas` called.")}}]),e}();t.BaseCanvasFactory=f;var d=function(){function e(t){var r=t.baseUrl,n=void 0===r?null:r,a=t.isCompressed,o=void 0!==a&&a;l(this,e),this.constructor===e&&(0,i.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=n,this.isCompressed=o}var t;return c(e,[{key:"fetch",value:(t=s(a.default.mark((function e(t){var r,n,o,s=this;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.name,this.baseUrl){e.next=3;break}throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');case 3:if(r){e.next=5;break}throw new Error("CMap name must be specified.");case 5:return n=this.baseUrl+r+(this.isCompressed?".bcmap":""),o=this.isCompressed?i.CMapCompressionType.BINARY:i.CMapCompressionType.NONE,e.abrupt("return",this._fetchData(n,o).catch((function(e){throw new Error("Unable to load ".concat(s.isCompressed?"binary ":"","CMap at: ").concat(n))})));case 8:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"_fetchData",value:function(e,t){(0,i.unreachable)("Abstract method `_fetchData` called.")}}]),e}();t.BaseCMapReaderFactory=d;var h=function(){function e(t){var r=t.baseUrl,n=void 0===r?null:r;l(this,e),this.constructor===e&&(0,i.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=n}var t;return c(e,[{key:"fetch",value:(t=s(a.default.mark((function e(t){var r,n;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.filename,this.baseUrl){e.next=3;break}throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');case 3:if(r){e.next=5;break}throw new Error("Font filename must be specified.");case 5:return n="".concat(this.baseUrl).concat(r),e.abrupt("return",this._fetchData(n).catch((function(e){throw new Error("Unable to load font data at: ".concat(n))})));case 7:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"_fetchData",value:function(e){(0,i.unreachable)("Abstract method `_fetchData` called.")}}]),e}();t.BaseStandardFontDataFactory=h;var p=function(){function e(){l(this,e),this.constructor===e&&(0,i.unreachable)("Cannot initialize BaseSVGFactory.")}return c(e,[{key:"create",value:function(e,t){if(e<=0||t<=0)throw new Error("Invalid SVG dimensions");var r=this._createSVG("svg:svg");return r.setAttribute("version","1.1"),r.setAttribute("width","".concat(e,"px")),r.setAttribute("height","".concat(t,"px")),r.setAttribute("preserveAspectRatio","none"),r.setAttribute("viewBox","0 0 ".concat(e," ").concat(t)),r}},{key:"createElement",value:function(e){if("string"!=typeof e)throw new Error("Invalid SVG element type");return this._createSVG(e)}},{key:"_createSVG",value:function(e){(0,i.unreachable)("Abstract method `_createSVG` called.")}}]),e}();t.BaseSVGFactory=p},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.version=void 0;var _regenerator=_interopRequireDefault(__w_pdfjs_require__(2)),_util=__w_pdfjs_require__(4),_display_utils=__w_pdfjs_require__(1),_font_loader=__w_pdfjs_require__(137),_node_utils=__w_pdfjs_require__(138),_annotation_storage=__w_pdfjs_require__(139),_canvas=__w_pdfjs_require__(140),_worker_options=__w_pdfjs_require__(142),_is_node=__w_pdfjs_require__(6),_message_handler=__w_pdfjs_require__(143),_metadata=__w_pdfjs_require__(144),_optional_content_config=__w_pdfjs_require__(145),_transport_stream=__w_pdfjs_require__(146),_xfa_text=__w_pdfjs_require__(147);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classPrivateFieldInitSpec(e,t,r){_checkPrivateRedeclaration(e,t),t.set(e,r)}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldSet(e,t,r){return _classApplyDescriptorSet(e,_classExtractFieldDescriptor(e,t,"set"),r),r}function _classApplyDescriptorSet(e,t,r){if(t.set)t.set.call(e,r);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=r}}function _classPrivateFieldGet(e,t){return _classApplyDescriptorGet(e,_classExtractFieldDescriptor(e,t,"get"))}function _classExtractFieldDescriptor(e,t,r){if(!t.has(e))throw new TypeError("attempted to "+r+" private field on non-instance");return t.get(e)}function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)}))}}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}var DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DefaultCanvasFactory=_is_node.isNodeJS?_node_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;var DefaultCMapReaderFactory=_is_node.isNodeJS?_node_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;var DefaultStandardFontDataFactory=_is_node.isNodeJS?_node_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory,createPDFNetworkStream;function setPDFNetworkStreamFactory(e){createPDFNetworkStream=e}function getDocument(e){var t,r=new PDFDocumentLoadingTask;if("string"==typeof e||e instanceof URL)t={url:e};else if((0,_util.isArrayBuffer)(e))t={data:e};else if(e instanceof PDFDataRangeTransport)t={range:e};else{if("object"!==_typeof(e))throw new Error("Invalid parameter in getDocument, need either string, URL, Uint8Array, or parameter object.");if(!e.url&&!e.data&&!e.range)throw new Error("Invalid parameter object: need either .data, .range or .url");t=e}var n=Object.create(null),a=null,i=null;for(var o in t){var s=t[o];switch(o){case"url":if("undefined"!=typeof window)try{n[o]=new URL(s,window.location).href;continue}catch(e){(0,_util.warn)('Cannot create valid URL: "'.concat(e,'".'))}else if("string"==typeof s||s instanceof URL){n[o]=s.toString();continue}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");case"range":a=s;continue;case"worker":i=s;continue;case"data":if(_is_node.isNodeJS&&"undefined"!=typeof Buffer&&s instanceof Buffer)n[o]=new Uint8Array(s);else{if(s instanceof Uint8Array)break;if("string"==typeof s)n[o]=(0,_util.stringToBytes)(s);else if("object"!==_typeof(s)||null===s||isNaN(s.length)){if(!(0,_util.isArrayBuffer)(s))throw new Error("Invalid PDF binary data: either typed array, string, or array-like object is expected in the data property.");n[o]=new Uint8Array(s)}else n[o]=new Uint8Array(s)}continue}n[o]=s}if(n.rangeChunkSize=n.rangeChunkSize||DEFAULT_RANGE_CHUNK_SIZE,n.CMapReaderFactory=n.CMapReaderFactory||DefaultCMapReaderFactory,n.StandardFontDataFactory=n.StandardFontDataFactory||DefaultStandardFontDataFactory,n.ignoreErrors=!0!==n.stopAtErrors,n.fontExtraProperties=!0===n.fontExtraProperties,n.pdfBug=!0===n.pdfBug,n.enableXfa=!0===n.enableXfa,("string"!=typeof n.docBaseUrl||(0,_display_utils.isDataScheme)(n.docBaseUrl))&&(n.docBaseUrl=null),Number.isInteger(n.maxImageSize)||(n.maxImageSize=-1),"boolean"!=typeof n.useWorkerFetch&&(n.useWorkerFetch=n.CMapReaderFactory===_display_utils.DOMCMapReaderFactory&&n.StandardFontDataFactory===_display_utils.DOMStandardFontDataFactory),"boolean"!=typeof n.isEvalSupported&&(n.isEvalSupported=!0),"boolean"!=typeof n.disableFontFace&&(n.disableFontFace=_is_node.isNodeJS),"boolean"!=typeof n.useSystemFonts&&(n.useSystemFonts=!_is_node.isNodeJS&&!n.disableFontFace),void 0===n.ownerDocument&&(n.ownerDocument=globalThis.document),"boolean"!=typeof n.disableRange&&(n.disableRange=!1),"boolean"!=typeof n.disableStream&&(n.disableStream=!1),"boolean"!=typeof n.disableAutoFetch&&(n.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(n.verbosity),!i){var l={verbosity:n.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};i=l.port?PDFWorker.fromPort(l):new PDFWorker(l),r._worker=i}var u=r.docId;return i.promise.then((function(){if(r.destroyed)throw new Error("Loading aborted");var e=_fetchDocument(i,n,a,u),t=new Promise((function(e){var t;a?t=new _transport_stream.PDFDataTransportStream({length:n.length,initialData:n.initialData,progressiveDone:n.progressiveDone,contentDispositionFilename:n.contentDispositionFilename,disableRange:n.disableRange,disableStream:n.disableStream},a):n.data||(t=createPDFNetworkStream({url:n.url,length:n.length,httpHeaders:n.httpHeaders,withCredentials:n.withCredentials,rangeChunkSize:n.rangeChunkSize,disableRange:n.disableRange,disableStream:n.disableStream})),e(t)}));return Promise.all([e,t]).then((function(e){var t=_slicedToArray(e,2),a=t[0],o=t[1];if(r.destroyed)throw new Error("Loading aborted");var s=new _message_handler.MessageHandler(u,a,i.port),l=new WorkerTransport(s,r,o,n);r._transport=l,s.send("Ready",null)}))})).catch(r._capability.reject),r}function _fetchDocument(e,t,r,n){return _fetchDocument2.apply(this,arguments)}function _fetchDocument2(){return(_fetchDocument2=_asyncToGenerator(_regenerator.default.mark((function e(t,r,n,a){var i;return _regenerator.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.destroyed){e.next=2;break}throw new Error("Worker was destroyed");case 2:return n&&(r.length=n.length,r.initialData=n.initialData,r.progressiveDone=n.progressiveDone,r.contentDispositionFilename=n.contentDispositionFilename),e.next=5,t.messageHandler.sendWithPromise("GetDocRequest",{docId:a,apiVersion:"2.12.313",source:{data:r.data,url:r.url,password:r.password,disableAutoFetch:r.disableAutoFetch,rangeChunkSize:r.rangeChunkSize,length:r.length},maxImageSize:r.maxImageSize,disableFontFace:r.disableFontFace,docBaseUrl:r.docBaseUrl,ignoreErrors:r.ignoreErrors,isEvalSupported:r.isEvalSupported,fontExtraProperties:r.fontExtraProperties,enableXfa:r.enableXfa,useSystemFonts:r.useSystemFonts,cMapUrl:r.useWorkerFetch?r.cMapUrl:null,standardFontDataUrl:r.useWorkerFetch?r.standardFontDataUrl:null});case 5:if(i=e.sent,!t.destroyed){e.next=8;break}throw new Error("Worker was destroyed");case 8:return e.abrupt("return",i);case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;var PDFDocumentLoadingTask=function(){function e(){_classCallCheck(this,e),this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d".concat(e.idCounters.doc++),this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}var t;return _createClass(e,[{key:"promise",get:function(){return this._capability.promise}},{key:"destroy",value:(t=_asyncToGenerator(_regenerator.default.mark((function e(){var t;return _regenerator.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.destroyed=!0,e.next=3,null===(t=this._transport)||void 0===t?void 0:t.destroy();case 3:this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null);case 5:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}],[{key:"idCounters",get:function(){return(0,_util.shadow)(this,"idCounters",{doc:0})}}]),e}();exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;var PDFDataRangeTransport=function(){function e(t,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;_classCallCheck(this,e),this.length=t,this.initialData=r,this.progressiveDone=n,this.contentDispositionFilename=a,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}return _createClass(e,[{key:"addRangeListener",value:function(e){this._rangeListeners.push(e)}},{key:"addProgressListener",value:function(e){this._progressListeners.push(e)}},{key:"addProgressiveReadListener",value:function(e){this._progressiveReadListeners.push(e)}},{key:"addProgressiveDoneListener",value:function(e){this._progressiveDoneListeners.push(e)}},{key:"onDataRange",value:function(e,t){var r,n=_createForOfIteratorHelper(this._rangeListeners);try{for(n.s();!(r=n.n()).done;)(0,r.value)(e,t)}catch(e){n.e(e)}finally{n.f()}}},{key:"onDataProgress",value:function(e,t){var r=this;this._readyCapability.promise.then((function(){var n,a=_createForOfIteratorHelper(r._progressListeners);try{for(a.s();!(n=a.n()).done;)(0,n.value)(e,t)}catch(e){a.e(e)}finally{a.f()}}))}},{key:"onDataProgressiveRead",value:function(e){var t=this;this._readyCapability.promise.then((function(){var r,n=_createForOfIteratorHelper(t._progressiveReadListeners);try{for(n.s();!(r=n.n()).done;)(0,r.value)(e)}catch(e){n.e(e)}finally{n.f()}}))}},{key:"onDataProgressiveDone",value:function(){var e=this;this._readyCapability.promise.then((function(){var t,r=_createForOfIteratorHelper(e._progressiveDoneListeners);try{for(r.s();!(t=r.n()).done;)(0,t.value)()}catch(e){r.e(e)}finally{r.f()}}))}},{key:"transportReady",value:function(){this._readyCapability.resolve()}},{key:"requestDataRange",value:function(e,t){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}},{key:"abort",value:function(){}}]),e}();exports.PDFDataRangeTransport=PDFDataRangeTransport;var PDFDocumentProxy=function(){function e(t,r){var n,a=this;_classCallCheck(this,e),this._pdfInfo=t,this._transport=r,Object.defineProperty(this,"fingerprint",{get:function(){return(0,_display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead."),this.fingerprints[0]}}),Object.defineProperty(this,"getStats",{value:(n=_asyncToGenerator(_regenerator.default.mark((function e(){return _regenerator.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(0,_display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead."),e.abrupt("return",a.stats||{streamTypes:{},fontTypes:{}});case 2:case"end":return e.stop()}}),e)}))),function(){return n.apply(this,arguments)})})}return _createClass(e,[{key:"annotationStorage",get:function(){return this._transport.annotationStorage}},{key:"numPages",get:function(){return this._pdfInfo.numPages}},{key:"fingerprints",get:function(){return this._pdfInfo.fingerprints}},{key:"stats",get:function(){return this._transport.stats}},{key:"isPureXfa",get:function(){return!!this._transport._htmlForXfa}},{key:"allXfaHtml",get:function(){return this._transport._htmlForXfa}},{key:"getPage",value:function(e){return this._transport.getPage(e)}},{key:"getPageIndex",value:function(e){return this._transport.getPageIndex(e)}},{key:"getDestinations",value:function(){return this._transport.getDestinations()}},{key:"getDestination",value:function(e){return this._transport.getDestination(e)}},{key:"getPageLabels",value:function(){return this._transport.getPageLabels()}},{key:"getPageLayout",value:function(){return this._transport.getPageLayout()}},{key:"getPageMode",value:function(){return this._transport.getPageMode()}},{key:"getViewerPreferences",value:function(){return this._transport.getViewerPreferences()}},{key:"getOpenAction",value:function(){return this._transport.getOpenAction()}},{key:"getAttachments",value:function(){return this._transport.getAttachments()}},{key:"getJavaScript",value:function(){return this._transport.getJavaScript()}},{key:"getJSActions",value:function(){return this._transport.getDocJSActions()}},{key:"getOutline",value:function(){return this._transport.getOutline()}},{key:"getOptionalContentConfig",value:function(){return this._transport.getOptionalContentConfig()}},{key:"getPermissions",value:function(){return this._transport.getPermissions()}},{key:"getMetadata",value:function(){return this._transport.getMetadata()}},{key:"getMarkInfo",value:function(){return this._transport.getMarkInfo()}},{key:"getData",value:function(){return this._transport.getData()}},{key:"getDownloadInfo",value:function(){return this._transport.downloadInfoCapability.promise}},{key:"cleanup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._transport.startCleanup(e||this.isPureXfa)}},{key:"destroy",value:function(){return this.loadingTask.destroy()}},{key:"loadingParams",get:function(){return this._transport.loadingParams}},{key:"loadingTask",get:function(){return this._transport.loadingTask}},{key:"saveDocument",value:function(){return this._transport.annotationStorage.size<=0&&(0,_display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this._transport.saveDocument()}},{key:"getFieldObjects",value:function(){return this._transport.getFieldObjects()}},{key:"hasJSActions",value:function(){return this._transport.hasJSActions()}},{key:"getCalculationOrderIds",value:function(){return this._transport.getCalculationOrderIds()}}]),e}();exports.PDFDocumentProxy=PDFDocumentProxy;var PDFPageProxy=function(){function e(t,r,n,a){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];_classCallCheck(this,e),this._pageIndex=t,this._pageInfo=r,this._ownerDocument=a,this._transport=n,this._stats=i?new _display_utils.StatTimer:null,this._pdfBug=i,this.commonObjs=n.commonObjs,this.objs=new PDFObjects,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this._intentStates=new Map,this._annotationPromises=new Map,this.destroyed=!1}var t;return _createClass(e,[{key:"pageNumber",get:function(){return this._pageIndex+1}},{key:"rotate",get:function(){return this._pageInfo.rotate}},{key:"ref",get:function(){return this._pageInfo.ref}},{key:"userUnit",get:function(){return this._pageInfo.userUnit}},{key:"view",get:function(){return this._pageInfo.view}},{key:"getViewport",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.scale,r=e.rotation,n=void 0===r?this.rotate:r,a=e.offsetX,i=void 0===a?0:a,o=e.offsetY,s=void 0===o?0:o,l=e.dontFlip,u=void 0!==l&&l;return new _display_utils.PageViewport({viewBox:this.view,scale:t,rotation:n,offsetX:i,offsetY:s,dontFlip:u})}},{key:"getAnnotations",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.intent,r=void 0===t?"display":t,n=this._transport.getRenderingIntent(r),a=this._annotationPromises.get(n.cacheKey);return a||(a=this._transport.getAnnotations(this._pageIndex,n.renderingIntent),this._annotationPromises.set(n.cacheKey,a),a=a.then((function(e){var t,r=_createForOfIteratorHelper(e);try{var n=function(){var e=t.value;void 0!==e.titleObj&&Object.defineProperty(e,"title",{get:function(){return(0,_display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead."),e.titleObj.str}}),void 0!==e.contentsObj&&Object.defineProperty(e,"contents",{get:function(){return(0,_display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead."),e.contentsObj.str}})};for(r.s();!(t=r.n()).done;)n()}catch(e){r.e(e)}finally{r.f()}return e}))),a}},{key:"getJSActions",value:function(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex))}},{key:"getXfa",value:(t=_asyncToGenerator(_regenerator.default.mark((function e(){var t;return _regenerator.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(null===(t=this._transport._htmlForXfa)||void 0===t?void 0:t.children[this._pageIndex])||null);case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"render",value:function(e){var t,r,n,a=this,i=e.canvasContext,o=e.viewport,s=e.intent,l=void 0===s?"display":s,u=e.annotationMode,c=void 0===u?_util.AnnotationMode.ENABLE:u,f=e.transform,d=void 0===f?null:f,h=e.imageLayer,p=void 0===h?null:h,v=e.canvasFactory,m=void 0===v?null:v,y=e.background,g=void 0===y?null:y,b=e.optionalContentConfigPromise,_=void 0===b?null:b,S=e.annotationCanvasMap,w=void 0===S?null:S;void 0!==(null===(t=arguments[0])||void 0===t?void 0:t.renderInteractiveForms)&&((0,_display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead."),!0===arguments[0].renderInteractiveForms&&c===_util.AnnotationMode.ENABLE&&(c=_util.AnnotationMode.ENABLE_FORMS)),void 0!==(null===(r=arguments[0])||void 0===r?void 0:r.includeAnnotationStorage)&&((0,_display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead."),!0===arguments[0].includeAnnotationStorage&&c===_util.AnnotationMode.ENABLE&&(c=_util.AnnotationMode.ENABLE_STORAGE)),this._stats&&this._stats.time("Overall");var A=this._transport.getRenderingIntent(l,c);this.pendingCleanup=!1,_||(_=this._transport.getOptionalContentConfig());var k=this._intentStates.get(A.cacheKey);k||(k=Object.create(null),this._intentStates.set(A.cacheKey,k)),k.streamReaderCancelTimeout&&(clearTimeout(k.streamReaderCancelTimeout),k.streamReaderCancelTimeout=null);var x=m||new DefaultCanvasFactory({ownerDocument:this._ownerDocument}),E=!!(A.renderingIntent&_util.RenderingIntentFlag.PRINT);k.displayReadyCapability||(k.displayReadyCapability=(0,_util.createPromiseCapability)(),k.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(A));var P=function(e){k.renderTasks.delete(C),(a.cleanupAfterRender||E)&&(a.pendingCleanup=!0),a._tryCleanup(),e?(C.capability.reject(e),a._abortOperatorList({intentState:k,reason:e instanceof Error?e:new Error(e)})):C.capability.resolve(),a._stats&&(a._stats.timeEnd("Rendering"),a._stats.timeEnd("Overall"))},C=new InternalRenderTask({callback:P,params:{canvasContext:i,viewport:o,transform:d,imageLayer:p,background:g},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:w,operatorList:k.operatorList,pageIndex:this._pageIndex,canvasFactory:x,useRequestAnimationFrame:!E,pdfBug:this._pdfBug});((n=k).renderTasks||(n.renderTasks=new Set)).add(C);var T=C.task;return Promise.all([k.displayReadyCapability.promise,_]).then((function(e){var t=_slicedToArray(e,2),r=t[0],n=t[1];a.pendingCleanup?P():(a._stats&&a._stats.time("Rendering"),C.initializeGraphics({transparency:r,optionalContentConfig:n}),C.operatorListChanged())})).catch(P),T}},{key:"getOperatorList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.intent,r=void 0===t?"display":t,n=e.annotationMode,a=void 0===n?_util.AnnotationMode.ENABLE:n;function i(){u.operatorList.lastChunk&&(u.opListReadCapability.resolve(u.operatorList),u.renderTasks.delete(o))}var o,s,l=this._transport.getRenderingIntent(r,a,!0),u=this._intentStates.get(l.cacheKey);return u||(u=Object.create(null),this._intentStates.set(l.cacheKey,u)),u.opListReadCapability||((o=Object.create(null)).operatorListChanged=i,u.opListReadCapability=(0,_util.createPromiseCapability)(),((s=u).renderTasks||(s.renderTasks=new Set)).add(o),u.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(l)),u.opListReadCapability.promise}},{key:"streamTextContent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.normalizeWhitespace,r=void 0!==t&&t,n=e.disableCombineTextItems,a=void 0!==n&&n,i=e.includeMarkedContent,o=void 0!==i&&i,s=100;return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,normalizeWhitespace:!0===r,combineTextItems:!0!==a,includeMarkedContent:!0===o},{highWaterMark:s,size:function(e){return e.items.length}})}},{key:"getTextContent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._transport._htmlForXfa)return this.getXfa().then((function(e){return _xfa_text.XfaText.textContent(e)}));var t=this.streamTextContent(e);return new Promise((function(e,r){var n=t.getReader(),a={items:[],styles:Object.create(null)};!function t(){n.read().then((function(r){var n,i=r.value;r.done?e(a):(Object.assign(a.styles,i.styles),(n=a.items).push.apply(n,_toConsumableArray(i.items)),t())}),r)}()}))}},{key:"getStructTree",value:function(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex))}},{key:"_destroy",value:function(){this.destroyed=!0;var e,t=[],r=_createForOfIteratorHelper(this._intentStates.values());try{for(r.s();!(e=r.n()).done;){var n=e.value;if(this._abortOperatorList({intentState:n,reason:new Error("Page was destroyed."),force:!0}),!n.opListReadCapability){var a,i=_createForOfIteratorHelper(n.renderTasks);try{for(i.s();!(a=i.n()).done;){var o=a.value;t.push(o.completed),o.cancel()}}catch(e){i.e(e)}finally{i.f()}}}}catch(e){r.e(e)}finally{r.f()}return this.objs.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,this.pendingCleanup=!1,Promise.all(t)}},{key:"cleanup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.pendingCleanup=!0,this._tryCleanup(e)}},{key:"_tryCleanup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.pendingCleanup)return!1;var t,r=_createForOfIteratorHelper(this._intentStates.values());try{for(r.s();!(t=r.n()).done;){var n=t.value,a=n.renderTasks,i=n.operatorList;if(a.size>0||!i.lastChunk)return!1}}catch(e){r.e(e)}finally{r.f()}return this._intentStates.clear(),this.objs.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,e&&this._stats&&(this._stats=new _display_utils.StatTimer),this.pendingCleanup=!1,!0}},{key:"_startRenderPage",value:function(e,t){var r=this._intentStates.get(t);r&&(this._stats&&this._stats.timeEnd("Page Request"),r.displayReadyCapability&&r.displayReadyCapability.resolve(e))}},{key:"_renderPageChunk",value:function(e,t){for(var r=0,n=e.length;r<n;r++)t.operatorList.fnArray.push(e.fnArray[r]),t.operatorList.argsArray.push(e.argsArray[r]);t.operatorList.lastChunk=e.lastChunk;var a,i=_createForOfIteratorHelper(t.renderTasks);try{for(i.s();!(a=i.n()).done;)a.value.operatorListChanged()}catch(e){i.e(e)}finally{i.f()}e.lastChunk&&this._tryCleanup()}},{key:"_pumpOperatorList",value:function(e){var t=this,r=e.renderingIntent,n=e.cacheKey,a=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:r,cacheKey:n,annotationStorage:r&_util.RenderingIntentFlag.ANNOTATIONS_STORAGE?this._transport.annotationStorage.serializable:null}).getReader(),i=this._intentStates.get(n);i.streamReader=a,function e(){a.read().then((function(r){var n=r.value;r.done?i.streamReader=null:t._transport.destroyed||(t._renderPageChunk(n,i),e())}),(function(e){if(i.streamReader=null,!t._transport.destroyed){if(i.operatorList){i.operatorList.lastChunk=!0;var r,n=_createForOfIteratorHelper(i.renderTasks);try{for(n.s();!(r=n.n()).done;)r.value.operatorListChanged()}catch(e){n.e(e)}finally{n.f()}t._tryCleanup()}if(i.displayReadyCapability)i.displayReadyCapability.reject(e);else{if(!i.opListReadCapability)throw e;i.opListReadCapability.reject(e)}}}))}()}},{key:"_abortOperatorList",value:function(e){var t=this,r=e.intentState,n=e.reason,a=e.force,i=void 0!==a&&a;if(r.streamReader){if(!i){if(r.renderTasks.size>0)return;if(n instanceof _display_utils.RenderingCancelledException)return void(r.streamReaderCancelTimeout=setTimeout((function(){t._abortOperatorList({intentState:r,reason:n,force:!0}),r.streamReaderCancelTimeout=null}),RENDERING_CANCELLED_TIMEOUT))}if(r.streamReader.cancel(new _util.AbortException(n.message)).catch((function(){})),r.streamReader=null,!this._transport.destroyed){var o,s=_createForOfIteratorHelper(this._intentStates);try{for(s.s();!(o=s.n()).done;){var l=_slicedToArray(o.value,2),u=l[0];if(l[1]===r){this._intentStates.delete(u);break}}}catch(e){s.e(e)}finally{s.f()}this.cleanup()}}}},{key:"stats",get:function(){return this._stats}}]),e}();exports.PDFPageProxy=PDFPageProxy;var LoopbackPort=function(){function e(){_classCallCheck(this,e),this._listeners=[],this._deferred=Promise.resolve()}return _createClass(e,[{key:"postMessage",value:function(e,t){var r=this,n={data:function(e){if(globalThis.structuredClone)return globalThis.structuredClone(e,t);var r=new WeakMap;return function e(n){if("function"==typeof n||"symbol"===_typeof(n)||n instanceof URL)throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(null==n?void 0:n.toString()));if("object"!==_typeof(n)||null===n)return n;if(r.has(n))return r.get(n);var a,i;if((a=n.buffer)&&(0,_util.isArrayBuffer)(a))return i=null!=t&&t.includes(a)?new n.constructor(a,n.byteOffset,n.byteLength):new n.constructor(n),r.set(n,i),i;if(n instanceof Map){i=new Map,r.set(n,i);var o,s=_createForOfIteratorHelper(n);try{for(s.s();!(o=s.n()).done;){var l=_slicedToArray(o.value,2),u=l[0],c=l[1];i.set(u,e(c))}}catch(e){s.e(e)}finally{s.f()}return i}if(n instanceof Set){i=new Set,r.set(n,i);var f,d=_createForOfIteratorHelper(n);try{for(d.s();!(f=d.n()).done;){var h=f.value;i.add(e(h))}}catch(e){d.e(e)}finally{d.f()}return i}for(var p in i=Array.isArray(n)?[]:Object.create(null),r.set(n,i),n){for(var v,m=void 0,y=n;!(m=Object.getOwnPropertyDescriptor(y,p));)y=Object.getPrototypeOf(y);void 0!==m.value&&("function"!=typeof m.value||null!==(v=n.hasOwnProperty)&&void 0!==v&&v.call(n,p))&&(i[p]=e(m.value))}return i}(e)}(e)};this._deferred.then((function(){var e,t=_createForOfIteratorHelper(r._listeners);try{for(t.s();!(e=t.n()).done;)e.value.call(r,n)}catch(e){t.e(e)}finally{t.f()}}))}},{key:"addEventListener",value:function(e,t){this._listeners.push(t)}},{key:"removeEventListener",value:function(e,t){var r=this._listeners.indexOf(t);this._listeners.splice(r,1)}},{key:"terminate",value:function(){this._listeners.length=0}}]),e}();exports.LoopbackPort=LoopbackPort;var PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};if(_is_node.isNodeJS)PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if("object"===("undefined"==typeof document?"undefined":_typeof(document))){var _document,_document$currentScri,pdfjsFilePath=null===(_document=document)||void 0===_document||null===(_document$currentScri=_document.currentScript)||void 0===_document$currentScri?void 0:_document$currentScri.src;pdfjsFilePath&&(PDFWorkerUtil.fallbackWorkerSrc=pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.createCDNWrapper=function(e){var t='importScripts("'.concat(e,'");');return URL.createObjectURL(new Blob([t]))};var PDFWorker=function(){function PDFWorker(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.name,r=void 0===t?null:t,n=e.port,a=void 0===n?null:n,i=e.verbosity,o=void 0===i?(0,_util.getVerbosityLevel)():i;if(_classCallCheck(this,PDFWorker),a&&PDFWorker._workerPorts.has(a))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=r,this.destroyed=!1,this.verbosity=o,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,a)return PDFWorker._workerPorts.set(a,this),void this._initializeFromPort(a);this._initialize()}return _createClass(PDFWorker,[{key:"promise",get:function(){return this._readyCapability.promise}},{key:"port",get:function(){return this._port}},{key:"messageHandler",get:function(){return this._messageHandler}},{key:"_initializeFromPort",value:function(e){this._port=e,this._messageHandler=new _message_handler.MessageHandler("main","worker",e),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve()}},{key:"_initialize",value:function(){var e=this;if("undefined"!=typeof Worker&&!PDFWorkerUtil.isWorkerDisabled&&!PDFWorker._mainThreadWorkerMessageHandler){var t=PDFWorker.workerSrc;try{(0,_util.isSameOrigin)(window.location.href,t)||(t=PDFWorkerUtil.createCDNWrapper(new URL(t,window.location).href));var r=new Worker(t),n=new _message_handler.MessageHandler("main","worker",r),a=function(){r.removeEventListener("error",i),n.destroy(),r.terminate(),e.destroyed?e._readyCapability.reject(new Error("Worker was destroyed")):e._setupFakeWorker()},i=function(){e._webWorker||a()};r.addEventListener("error",i),n.on("test",(function(t){r.removeEventListener("error",i),e.destroyed?a():t?(e._messageHandler=n,e._port=r,e._webWorker=r,e._readyCapability.resolve(),n.send("configure",{verbosity:e.verbosity})):(e._setupFakeWorker(),n.destroy(),r.terminate())})),n.on("ready",(function(t){if(r.removeEventListener("error",i),e.destroyed)a();else try{o()}catch(t){e._setupFakeWorker()}}));var o=function(){var e=new Uint8Array([255]);try{n.send("test",e,[e.buffer])}catch(t){(0,_util.warn)("Cannot use postMessage transfers."),e[0]=0,n.send("test",e)}};return void o()}catch(e){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}},{key:"_setupFakeWorker",value:function(){var e=this;PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),PDFWorker._setupFakeWorkerGlobal.then((function(t){if(e.destroyed)e._readyCapability.reject(new Error("Worker was destroyed"));else{var r=new LoopbackPort;e._port=r;var n="fake".concat(PDFWorkerUtil.fakeWorkerId++),a=new _message_handler.MessageHandler(n+"_worker",n,r);t.setup(a,r);var i=new _message_handler.MessageHandler(n,n+"_worker",r);e._messageHandler=i,e._readyCapability.resolve(),i.send("configure",{verbosity:e.verbosity})}})).catch((function(t){e._readyCapability.reject(new Error('Setting up fake worker failed: "'.concat(t.message,'".')))}))}},{key:"destroy",value:function(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),PDFWorker._workerPorts.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}}],[{key:"_workerPorts",get:function(){return(0,_util.shadow)(this,"_workerPorts",new WeakMap)}},{key:"fromPort",value:function(e){if(null==e||!e.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return this._workerPorts.has(e.port)?this._workerPorts.get(e.port):new PDFWorker(e)}},{key:"workerSrc",get:function(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(null!==PDFWorkerUtil.fallbackWorkerSrc)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}},{key:"_mainThreadWorkerMessageHandler",get:function(){try{var e;return(null===(e=globalThis.pdfjsWorker)||void 0===e?void 0:e.WorkerMessageHandler)||null}catch(e){return null}}},{key:"_setupFakeWorkerGlobal",get:function get(){var _this11=this,loader=function(){var _ref15=_asyncToGenerator(_regenerator.default.mark((function _callee4(){var mainWorkerMessageHandler,worker;return _regenerator.default.wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:if(mainWorkerMessageHandler=_this11._mainThreadWorkerMessageHandler,!mainWorkerMessageHandler){_context4.next=3;break}return _context4.abrupt("return",mainWorkerMessageHandler);case 3:if(!_is_node.isNodeJS){_context4.next=6;break}return worker=eval("require")(_this11.workerSrc),_context4.abrupt("return",worker.WorkerMessageHandler);case 6:return _context4.next=8,(0,_display_utils.loadScript)(_this11.workerSrc);case 8:return _context4.abrupt("return",window.pdfjsWorker.WorkerMessageHandler);case 9:case"end":return _context4.stop()}}),_callee4)})));return function(){return _ref15.apply(this,arguments)}}();return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}}]),PDFWorker}();exports.PDFWorker=PDFWorker,PDFWorker.getWorkerSrc=function(){return(0,_display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead."),this.workerSrc};var _docStats=new WeakMap,_pageCache=new WeakMap,_pagePromises=new WeakMap,_metadataPromise=new WeakMap,WorkerTransport=function(){function e(t,r,n,a){_classCallCheck(this,e),_classPrivateFieldInitSpec(this,_docStats,{writable:!0,value:null}),_classPrivateFieldInitSpec(this,_pageCache,{writable:!0,value:new Map}),_classPrivateFieldInitSpec(this,_pagePromises,{writable:!0,value:new Map}),_classPrivateFieldInitSpec(this,_metadataPromise,{writable:!0,value:null}),this.messageHandler=t,this.loadingTask=r,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:r.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:a.ownerDocument,styleElement:a.styleElement}),this._params=a,a.useWorkerFetch||(this.CMapReaderFactory=new a.CMapReaderFactory({baseUrl:a.cMapUrl,isCompressed:a.cMapPacked}),this.StandardFontDataFactory=new a.StandardFontDataFactory({baseUrl:a.standardFontDataUrl})),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=n,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}var t;return _createClass(e,[{key:"annotationStorage",get:function(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}},{key:"stats",get:function(){return _classPrivateFieldGet(this,_docStats)}},{key:"getRenderingIntent",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_util.AnnotationMode.ENABLE,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=_util.RenderingIntentFlag.DISPLAY,a="";switch(e){case"any":n=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":n=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)("getRenderingIntent - invalid intent: ".concat(e))}switch(t){case _util.AnnotationMode.DISABLE:n+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:n+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:n+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,a=this.annotationStorage.lastModified;break;default:(0,_util.warn)("getRenderingIntent - invalid annotationMode: ".concat(t))}return r&&(n+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:n,cacheKey:"".concat(n,"_").concat(a)}}},{key:"destroy",value:function(){var e=this;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));var t,r=[],n=_createForOfIteratorHelper(_classPrivateFieldGet(this,_pageCache).values());try{for(n.s();!(t=n.n()).done;){var a=t.value;r.push(a._destroy())}}catch(e){n.e(e)}finally{n.f()}_classPrivateFieldGet(this,_pageCache).clear(),_classPrivateFieldGet(this,_pagePromises).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();var i=this.messageHandler.sendWithPromise("Terminate",null);return r.push(i),Promise.all(r).then((function(){e.commonObjs.clear(),e.fontLoader.clear(),_classPrivateFieldSet(e,_metadataPromise,null),e._getFieldObjectsPromise=null,e._hasJSActionsPromise=null,e._networkStream&&e._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),e.messageHandler&&(e.messageHandler.destroy(),e.messageHandler=null),e.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}},{key:"setupMessageHandler",value:function(){var e=this,t=this.messageHandler,r=this.loadingTask;t.on("GetReader",(function(t,r){(0,_util.assert)(e._networkStream,"GetReader - no `IPDFStream` instance available."),e._fullReader=e._networkStream.getFullReader(),e._fullReader.onProgress=function(t){e._lastProgress={loaded:t.loaded,total:t.total}},r.onPull=function(){e._fullReader.read().then((function(e){var t=e.value;e.done?r.close():((0,_util.assert)((0,_util.isArrayBuffer)(t),"GetReader - expected an ArrayBuffer."),r.enqueue(new Uint8Array(t),1,[t]))})).catch((function(e){r.error(e)}))},r.onCancel=function(t){e._fullReader.cancel(t),r.ready.catch((function(t){if(!e.destroyed)throw t}))}})),t.on("ReaderHeadersReady",(function(t){var n=(0,_util.createPromiseCapability)(),a=e._fullReader;return a.headersReady.then((function(){var t;a.isStreamingSupported&&a.isRangeSupported||(e._lastProgress&&(null===(t=r.onProgress)||void 0===t||t.call(r,e._lastProgress)),a.onProgress=function(e){var t;null===(t=r.onProgress)||void 0===t||t.call(r,{loaded:e.loaded,total:e.total})}),n.resolve({isStreamingSupported:a.isStreamingSupported,isRangeSupported:a.isRangeSupported,contentLength:a.contentLength})}),n.reject),n.promise})),t.on("GetRangeReader",(function(t,r){(0,_util.assert)(e._networkStream,"GetRangeReader - no `IPDFStream` instance available.");var n=e._networkStream.getRangeReader(t.begin,t.end);n?(r.onPull=function(){n.read().then((function(e){var t=e.value;e.done?r.close():((0,_util.assert)((0,_util.isArrayBuffer)(t),"GetRangeReader - expected an ArrayBuffer."),r.enqueue(new Uint8Array(t),1,[t]))})).catch((function(e){r.error(e)}))},r.onCancel=function(t){n.cancel(t),r.ready.catch((function(t){if(!e.destroyed)throw t}))}):r.close()})),t.on("GetDoc",(function(t){var n=t.pdfInfo;e._numPages=n.numPages,e._htmlForXfa=n.htmlForXfa,delete n.htmlForXfa,r._capability.resolve(new PDFDocumentProxy(n,e))})),t.on("DocException",(function(e){var t;switch(e.name){case"PasswordException":t=new _util.PasswordException(e.message,e.code);break;case"InvalidPDFException":t=new _util.InvalidPDFException(e.message);break;case"MissingPDFException":t=new _util.MissingPDFException(e.message);break;case"UnexpectedResponseException":t=new _util.UnexpectedResponseException(e.message,e.status);break;case"UnknownErrorException":t=new _util.UnknownErrorException(e.message,e.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}r._capability.reject(t)})),t.on("PasswordRequest",(function(t){if(e._passwordCapability=(0,_util.createPromiseCapability)(),r.onPassword)try{r.onPassword((function(t){e._passwordCapability.resolve({password:t})}),t.code)}catch(t){e._passwordCapability.reject(t)}else e._passwordCapability.reject(new _util.PasswordException(t.message,t.code));return e._passwordCapability.promise})),t.on("DataLoaded",(function(t){var n;null===(n=r.onProgress)||void 0===n||n.call(r,{loaded:t.length,total:t.length}),e.downloadInfoCapability.resolve(t)})),t.on("StartRenderPage",(function(t){e.destroyed||_classPrivateFieldGet(e,_pageCache).get(t.pageIndex)._startRenderPage(t.transparency,t.cacheKey)})),t.on("commonobj",(function(r){var n,a=_slicedToArray(r,3),i=a[0],o=a[1],s=a[2];if(!e.destroyed&&!e.commonObjs.has(i))switch(o){case"Font":var l=e._params;if("error"in s){var u=s.error;(0,_util.warn)("Error during font loading: ".concat(u)),e.commonObjs.resolve(i,u);break}var c=null;l.pdfBug&&null!==(n=globalThis.FontInspector)&&void 0!==n&&n.enabled&&(c={registerFont:function(e,t){globalThis.FontInspector.fontAdded(e,t)}});var f=new _font_loader.FontFaceObject(s,{isEvalSupported:l.isEvalSupported,disableFontFace:l.disableFontFace,ignoreErrors:l.ignoreErrors,onUnsupportedFeature:e._onUnsupportedFeature.bind(e),fontRegistry:c});e.fontLoader.bind(f).catch((function(e){return t.sendWithPromise("FontFallback",{id:i})})).finally((function(){!l.fontExtraProperties&&f.data&&(f.data=null),e.commonObjs.resolve(i,f)}));break;case"FontPath":case"Image":e.commonObjs.resolve(i,s);break;default:throw new Error("Got unknown common object type ".concat(o))}})),t.on("obj",(function(t){var r,n=_slicedToArray(t,4),a=n[0],i=n[1],o=n[2],s=n[3];if(!e.destroyed){var l=_classPrivateFieldGet(e,_pageCache).get(i);if(!l.objs.has(a))switch(o){case"Image":l.objs.resolve(a,s),(null==s||null===(r=s.data)||void 0===r?void 0:r.length)>8e6&&(l.cleanupAfterRender=!0);break;case"Pattern":l.objs.resolve(a,s);break;default:throw new Error("Got unknown object type ".concat(o))}}})),t.on("DocProgress",(function(t){var n;e.destroyed||null===(n=r.onProgress)||void 0===n||n.call(r,{loaded:t.loaded,total:t.total})})),t.on("DocStats",(function(t){e.destroyed||_classPrivateFieldSet(e,_docStats,Object.freeze({streamTypes:Object.freeze(t.streamTypes),fontTypes:Object.freeze(t.fontTypes)}))})),t.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),t.on("FetchBuiltInCMap",(function(t){return e.destroyed?Promise.reject(new Error("Worker was destroyed.")):e.CMapReaderFactory?e.CMapReaderFactory.fetch(t):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))})),t.on("FetchStandardFontData",(function(t){return e.destroyed?Promise.reject(new Error("Worker was destroyed.")):e.StandardFontDataFactory?e.StandardFontDataFactory.fetch(t):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."))}))}},{key:"_onUnsupportedFeature",value:function(e){var t,r,n=e.featureId;this.destroyed||null===(t=(r=this.loadingTask).onUnsupportedFeature)||void 0===t||t.call(r,n)}},{key:"getData",value:function(){return this.messageHandler.sendWithPromise("GetData",null)}},{key:"getPage",value:function(e){var t=this;if(!Number.isInteger(e)||e<=0||e>this._numPages)return Promise.reject(new Error("Invalid page request"));var r=e-1,n=_classPrivateFieldGet(this,_pagePromises).get(r);if(n)return n;var a=this.messageHandler.sendWithPromise("GetPage",{pageIndex:r}).then((function(e){if(t.destroyed)throw new Error("Transport destroyed");var n=new PDFPageProxy(r,e,t,t._params.ownerDocument,t._params.pdfBug);return _classPrivateFieldGet(t,_pageCache).set(r,n),n}));return _classPrivateFieldGet(this,_pagePromises).set(r,a),a}},{key:"getPageIndex",value:function(e){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:e})}},{key:"getAnnotations",value:function(e,t){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:e,intent:t})}},{key:"saveDocument",value:function(){var e,t,r=this;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:null!==(e=null===(t=this._fullReader)||void 0===t?void 0:t.filename)&&void 0!==e?e:null}).finally((function(){r.annotationStorage.resetModified()}))}},{key:"getFieldObjects",value:function(){return this._getFieldObjectsPromise||(this._getFieldObjectsPromise=this.messageHandler.sendWithPromise("GetFieldObjects",null))}},{key:"hasJSActions",value:function(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise("HasJSActions",null))}},{key:"getCalculationOrderIds",value:function(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}},{key:"getDestinations",value:function(){return this.messageHandler.sendWithPromise("GetDestinations",null)}},{key:"getDestination",value:function(e){return"string"!=typeof e?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:e})}},{key:"getPageLabels",value:function(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}},{key:"getPageLayout",value:function(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}},{key:"getPageMode",value:function(){return this.messageHandler.sendWithPromise("GetPageMode",null)}},{key:"getViewerPreferences",value:function(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}},{key:"getOpenAction",value:function(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}},{key:"getAttachments",value:function(){return this.messageHandler.sendWithPromise("GetAttachments",null)}},{key:"getJavaScript",value:function(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}},{key:"getDocJSActions",value:function(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}},{key:"getPageJSActions",value:function(e){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:e})}},{key:"getStructTree",value:function(e){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:e})}},{key:"getOutline",value:function(){return this.messageHandler.sendWithPromise("GetOutline",null)}},{key:"getOptionalContentConfig",value:function(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then((function(e){return new _optional_content_config.OptionalContentConfig(e)}))}},{key:"getPermissions",value:function(){return this.messageHandler.sendWithPromise("GetPermissions",null)}},{key:"getMetadata",value:function(){var e=this;return _classPrivateFieldGet(this,_metadataPromise)||_classPrivateFieldSet(this,_metadataPromise,this.messageHandler.sendWithPromise("GetMetadata",null).then((function(t){var r,n,a,i;return{info:t[0],metadata:t[1]?new _metadata.Metadata(t[1]):null,contentDispositionFilename:null!==(r=null===(n=e._fullReader)||void 0===n?void 0:n.filename)&&void 0!==r?r:null,contentLength:null!==(a=null===(i=e._fullReader)||void 0===i?void 0:i.contentLength)&&void 0!==a?a:null}})))}},{key:"getMarkInfo",value:function(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}},{key:"startCleanup",value:(t=_asyncToGenerator(_regenerator.default.mark((function e(){var t,r,n,a,i=arguments;return _regenerator.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=i.length>0&&void 0!==i[0]&&i[0],e.next=3,this.messageHandler.sendWithPromise("Cleanup",null);case 3:if(!this.destroyed){e.next=5;break}return e.abrupt("return");case 5:r=_createForOfIteratorHelper(_classPrivateFieldGet(this,_pageCache).values()),e.prev=6,r.s();case 8:if((n=r.n()).done){e.next=15;break}if((a=n.value).cleanup()){e.next=13;break}throw new Error("startCleanup: Page ".concat(a.pageNumber," is currently rendering."));case 13:e.next=8;break;case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(6),r.e(e.t0);case 20:return e.prev=20,r.f(),e.finish(20);case 23:this.commonObjs.clear(),t||this.fontLoader.clear(),_classPrivateFieldSet(this,_metadataPromise,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null;case 28:case"end":return e.stop()}}),e,this,[[6,17,20,23]])}))),function(){return t.apply(this,arguments)})},{key:"loadingParams",get:function(){var e=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:e.disableAutoFetch,enableXfa:e.enableXfa})}}]),e}(),PDFObjects=function(){function e(){_classCallCheck(this,e),this._objs=Object.create(null)}return _createClass(e,[{key:"_ensureObj",value:function(e){return this._objs[e]?this._objs[e]:this._objs[e]={capability:(0,_util.createPromiseCapability)(),data:null,resolved:!1}}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(t)return this._ensureObj(e).capability.promise.then(t),null;var r=this._objs[e];if(!r||!r.resolved)throw new Error("Requesting object that isn't resolved yet ".concat(e,"."));return r.data}},{key:"has",value:function(e){var t=this._objs[e];return(null==t?void 0:t.resolved)||!1}},{key:"resolve",value:function(e,t){var r=this._ensureObj(e);r.resolved=!0,r.data=t,r.capability.resolve(t)}},{key:"clear",value:function(){this._objs=Object.create(null)}}]),e}(),RenderTask=function(){function e(t){_classCallCheck(this,e),this._internalRenderTask=t,this.onContinue=null}return _createClass(e,[{key:"promise",get:function(){return this._internalRenderTask.capability.promise}},{key:"cancel",value:function(){this._internalRenderTask.cancel()}}]),e}();exports.RenderTask=RenderTask;var InternalRenderTask=function(){function e(t){var r=t.callback,n=t.params,a=t.objs,i=t.commonObjs,o=t.annotationCanvasMap,s=t.operatorList,l=t.pageIndex,u=t.canvasFactory,c=t.useRequestAnimationFrame,f=void 0!==c&&c,d=t.pdfBug,h=void 0!==d&&d;_classCallCheck(this,e),this.callback=r,this.params=n,this.objs=a,this.commonObjs=i,this.annotationCanvasMap=o,this.operatorListIdx=null,this.operatorList=s,this._pageIndex=l,this.canvasFactory=u,this._pdfBug=h,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===f&&"undefined"!=typeof window,this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=n.canvasContext.canvas}var t;return _createClass(e,[{key:"completed",get:function(){return this.capability.promise.catch((function(){}))}},{key:"initializeGraphics",value:function(t){var r,n=t.transparency,a=void 0!==n&&n,i=t.optionalContentConfig;if(!this.cancelled){if(this._canvas){if(e.canvasInUse.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");e.canvasInUse.add(this._canvas)}this._pdfBug&&null!==(r=globalThis.StepperManager)&&void 0!==r&&r.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());var o=this.params,s=o.canvasContext,l=o.viewport,u=o.transform,c=o.imageLayer,f=o.background;this.gfx=new _canvas.CanvasGraphics(s,this.commonObjs,this.objs,this.canvasFactory,c,i,this.annotationCanvasMap),this.gfx.beginDrawing({transform:u,viewport:l,transparency:a,background:f}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}}},{key:"cancel",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&e.canvasInUse.delete(this._canvas),this.callback(t||new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex+1),"canvas"))}},{key:"operatorListChanged",value:function(){this.graphicsReady?(this.stepper&&this.stepper.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}},{key:"_continue",value:function(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}},{key:"_scheduleNext",value:function(){var e=this;this._useRequestAnimationFrame?window.requestAnimationFrame((function(){e._nextBound().catch(e._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}},{key:"_next",value:(t=_asyncToGenerator(_regenerator.default.mark((function t(){return _regenerator.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.cancelled){t.next=2;break}return t.abrupt("return");case 2:this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&e.canvasInUse.delete(this._canvas),this.callback()));case 4:case"end":return t.stop()}}),t,this)}))),function(){return t.apply(this,arguments)})}],[{key:"canvasInUse",get:function(){return(0,_util.shadow)(this,"canvasInUse",new WeakSet)}}]),e}(),version="2.12.313";exports.version=version;var build="a2ae56f39";exports.build=build},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.FontLoader=t.FontFaceObject=void 0;var a,i=(a=r(2))&&a.__esModule?a:{default:a},o=r(4);function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function l(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function c(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function f(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return d(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?d(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t,r){return t&&p(e.prototype,t),r&&p(e,r),e}var m,y=function(){function e(t){var r=t.docId,n=t.onUnsupportedFeature,a=t.ownerDocument,i=void 0===a?globalThis.document:a;t.styleElement,h(this,e),this.constructor===e&&(0,o.unreachable)("Cannot initialize BaseFontLoader."),this.docId=r,this._onUnsupportedFeature=n,this._document=i,this.nativeFontFaces=[],this.styleElement=null}var t,r;return v(e,[{key:"addNativeFontFace",value:function(e){this.nativeFontFaces.push(e),this._document.fonts.add(e)}},{key:"insertRule",value:function(e){var t=this.styleElement;t||((t=this.styleElement=this._document.createElement("style")).id="PDFJS_FONT_STYLE_TAG_".concat(this.docId),this._document.documentElement.getElementsByTagName("head")[0].appendChild(t));var r=t.sheet;r.insertRule(e,r.cssRules.length)}},{key:"clear",value:function(){var e,t=f(this.nativeFontFaces);try{for(t.s();!(e=t.n()).done;){var r=e.value;this._document.fonts.delete(r)}}catch(e){t.e(e)}finally{t.f()}this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}},{key:"bind",value:(t=i.default.mark((function e(t){var r,n,a=this;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.attached&&!t.missingFile){e.next=2;break}return e.abrupt("return");case 2:if(t.attached=!0,!this.isFontLoadingAPISupported){e.next=19;break}if(!(r=t.createNativeFontFace())){e.next=18;break}return this.addNativeFontFace(r),e.prev=7,e.next=10,r.loaded;case 10:e.next=18;break;case 12:throw e.prev=12,e.t0=e.catch(7),this._onUnsupportedFeature({featureId:o.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,o.warn)("Failed to load font '".concat(r.family,"': '").concat(e.t0,"'.")),t.disableFontFace=!0,e.t0;case 18:return e.abrupt("return");case 19:if(!(n=t.createFontFaceRule())){e.next=26;break}if(this.insertRule(n),!this.isSyncFontLoadingSupported){e.next=24;break}return e.abrupt("return");case 24:return e.next=26,new Promise((function(e){var r=a._queueLoadingCallback(e);a._prepareFontLoadEvent([n],[t],r)}));case 26:case"end":return e.stop()}}),e,this,[[7,12]])})),r=function(){var e=this,r=arguments;return new Promise((function(n,a){var i=t.apply(e,r);function o(e){c(i,n,a,o,s,"next",e)}function s(e){c(i,n,a,o,s,"throw",e)}o(void 0)}))},function(e){return r.apply(this,arguments)})},{key:"_queueLoadingCallback",value:function(e){(0,o.unreachable)("Abstract method `_queueLoadingCallback`.")}},{key:"isFontLoadingAPISupported",get:function(){var e,t=!(null===(e=this._document)||void 0===e||!e.fonts);return(0,o.shadow)(this,"isFontLoadingAPISupported",t)}},{key:"isSyncFontLoadingSupported",get:function(){(0,o.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}},{key:"_loadTestFont",get:function(){(0,o.unreachable)("Abstract method `_loadTestFont`.")}},{key:"_prepareFontLoadEvent",value:function(e,t,r){(0,o.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}]),e}();t.FontLoader=m,t.FontLoader=m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(a,e);var t,r,n=(t=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(t);if(r){var a=u(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return l(this,e)});function a(e){var t;return h(this,a),(t=n.call(this,e)).loadingContext={requests:[],nextRequestId:0},t.loadTestFontId=0,t}return v(a,[{key:"isSyncFontLoadingSupported",get:function(){var e=!1;if("undefined"==typeof navigator)e=!0;else{var t=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);(null==t?void 0:t[1])>=14&&(e=!0)}return(0,o.shadow)(this,"isSyncFontLoadingSupported",e)}},{key:"_queueLoadingCallback",value:function(e){var t=this.loadingContext,r={id:"pdfjs-font-loading-".concat(t.nextRequestId++),done:!1,complete:function(){for((0,o.assert)(!r.done,"completeRequest() cannot be called twice."),r.done=!0;t.requests.length>0&&t.requests[0].done;){var e=t.requests.shift();setTimeout(e.callback,0)}},callback:e};return t.requests.push(r),r}},{key:"_loadTestFont",get:function(){return(0,o.shadow)(this,"_loadTestFont",atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="))}},{key:"_prepareFontLoadEvent",value:function(e,t,r){function n(e,t){return e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|255&e.charCodeAt(t+3)}function a(e,t,r,n){return e.substring(0,t)+n+e.substring(t+r)}var i,s,l=this._document.createElement("canvas");l.width=1,l.height=1;var u=l.getContext("2d"),c=0,d="lt".concat(Date.now()).concat(this.loadTestFontId++),h=this._loadTestFont,p=1482184792,v=n(h=a(h,976,d.length,d),16);for(i=0,s=d.length-3;i<s;i+=4)v=v-p+n(d,i)|0;i<d.length&&(v=v-p+n(d+"XXX",i)|0),h=a(h,16,4,(0,o.string32)(v));var m="url(data:font/opentype;base64,".concat(btoa(h),");"),y='@font-face {font-family:"'.concat(d,'";src:').concat(m,"}");this.insertRule(y);var g,b=[],_=f(t);try{for(_.s();!(g=_.n()).done;){var S=g.value;b.push(S.loadedName)}}catch(e){_.e(e)}finally{_.f()}b.push(d);var w=this._document.createElement("div");w.style.visibility="hidden",w.style.width=w.style.height="10px",w.style.position="absolute",w.style.top=w.style.left="0px";for(var A=0,k=b;A<k.length;A++){var x=k[A],E=this._document.createElement("span");E.textContent="Hi",E.style.fontFamily=x,w.appendChild(E)}this._document.body.appendChild(w),function e(t,r){if(++c>30)return(0,o.warn)("Load test font never loaded."),void r();u.font="30px "+t,u.fillText(".",0,20),u.getImageData(0,0,1,1).data[3]>0?r():setTimeout(e.bind(null,t,r))}(d,(function(){w.remove(),r.complete()}))}}]),a}(y);var g=function(){function e(t,r){var n=r.isEvalSupported,a=void 0===n||n,i=r.disableFontFace,o=void 0!==i&&i,s=r.ignoreErrors,l=void 0!==s&&s,u=r.onUnsupportedFeature,c=r.fontRegistry,f=void 0===c?null:c;for(var d in h(this,e),this.compiledGlyphs=Object.create(null),t)this[d]=t[d];this.isEvalSupported=!1!==a,this.disableFontFace=!0===o,this.ignoreErrors=!0===l,this._onUnsupportedFeature=u,this.fontRegistry=f}return v(e,[{key:"createNativeFontFace",value:function(){if(!this.data||this.disableFontFace)return null;var e;if(this.cssFontInfo){var t={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(t.style="oblique ".concat(this.cssFontInfo.italicAngle,"deg")),e=new FontFace(this.cssFontInfo.fontFamily,this.data,t)}else e=new FontFace(this.loadedName,this.data,{});return this.fontRegistry&&this.fontRegistry.registerFont(this),e}},{key:"createFontFaceRule",value:function(){if(!this.data||this.disableFontFace)return null;var e,t=(0,o.bytesToString)(this.data),r="url(data:".concat(this.mimetype,";base64,").concat(btoa(t),");");if(this.cssFontInfo){var n="font-weight: ".concat(this.cssFontInfo.fontWeight,";");this.cssFontInfo.italicAngle&&(n+="font-style: oblique ".concat(this.cssFontInfo.italicAngle,"deg;")),e='@font-face {font-family:"'.concat(this.cssFontInfo.fontFamily,'";').concat(n,"src:").concat(r,"}")}else e='@font-face {font-family:"'.concat(this.loadedName,'";src:').concat(r,"}");return this.fontRegistry&&this.fontRegistry.registerFont(this,r),e}},{key:"getPathGenerator",value:function(e,t){if(void 0!==this.compiledGlyphs[t])return this.compiledGlyphs[t];var r;try{r=e.get(this.loadedName+"_path_"+t)}catch(e){if(!this.ignoreErrors)throw e;return this._onUnsupportedFeature({featureId:o.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,o.warn)('getPathGenerator - ignoring character: "'.concat(e,'".')),this.compiledGlyphs[t]=function(e,t){}}if(this.isEvalSupported&&o.IsEvalSupportedCached.value){var n,a=[],i=f(r);try{for(i.s();!(n=i.n()).done;){var s=n.value,l=void 0!==s.args?s.args.join(","):"";a.push("c.",s.cmd,"(",l,");\n")}}catch(e){i.e(e)}finally{i.f()}return this.compiledGlyphs[t]=new Function("c","size",a.join(""))}return this.compiledGlyphs[t]=function(e,t){var n,a=f(r);try{for(a.s();!(n=a.n()).done;){var i=n.value;"scale"===i.cmd&&(i.args=[t,-t]),e[i.cmd].apply(e,i.args)}}catch(e){a.e(e)}finally{a.f()}}}}]),e}();t.FontFaceObject=g},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.NodeStandardFontDataFactory=t.NodeCanvasFactory=t.NodeCMapReaderFactory=void 0;var a=r(135),i=r(6),o=r(4);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function c(e,t){return c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},c(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var a=h(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return d(this,r)}}function d(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var v=function e(){p(this,e),(0,o.unreachable)("Not implemented: NodeCanvasFactory")};t.NodeCanvasFactory=v;var m=function e(){p(this,e),(0,o.unreachable)("Not implemented: NodeCMapReaderFactory")};t.NodeCMapReaderFactory=m;var y=function e(){p(this,e),(0,o.unreachable)("Not implemented: NodeStandardFontDataFactory")};if(t.NodeStandardFontDataFactory=y,i.isNodeJS){var g=function(e){return new Promise((function(t,r){__webpack_require__(3804).readFile(e,(function(e,n){!e&&n?t(new Uint8Array(n)):r(new Error(e))}))}))};t.NodeCanvasFactory=v=function(e){u(r,e);var t=f(r);function r(){return p(this,r),t.apply(this,arguments)}return l(r,[{key:"_createCanvas",value:function(e,t){return __webpack_require__(80038).createCanvas(e,t)}}]),r}(a.BaseCanvasFactory),t.NodeCMapReaderFactory=m=function(e){u(r,e);var t=f(r);function r(){return p(this,r),t.apply(this,arguments)}return l(r,[{key:"_fetchData",value:function(e,t){return g(e).then((function(e){return{cMapData:e,compressionType:t}}))}}]),r}(a.BaseCMapReaderFactory),t.NodeStandardFontDataFactory=y=function(e){u(r,e);var t=f(r);function r(){return p(this,r),t.apply(this,arguments)}return l(r,[{key:"_fetchData",value:function(e){return g(e)}}]),r}(a.BaseStandardFontDataFactory)}},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnnotationStorage=void 0;var n=r(4);function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._storage=new Map,this._timeStamp=Date.now(),this._modified=!1,this.onSetModified=null,this.onResetModified=null}var t,r;return t=e,(r=[{key:"getValue",value:function(e,t){var r=this._storage.get(e);return void 0===r?t:Object.assign(t,r)}},{key:"setValue",value:function(e,t){var r,n,i=this._storage.get(e),o=!1;if(void 0!==i)for(var s=0,l=Object.entries(t);s<l.length;s++){var u=(r=l[s],n=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(r,n)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?a(e,t):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],f=u[1];i[c]!==f&&(o=!0,i[c]=f)}else o=!0,this._storage.set(e,t);o&&(this._timeStamp=Date.now(),this._setModified())}},{key:"getAll",value:function(){return this._storage.size>0?(0,n.objectFromMap)(this._storage):null}},{key:"size",get:function(){return this._storage.size}},{key:"_setModified",value:function(){this._modified||(this._modified=!0,"function"==typeof this.onSetModified&&this.onSetModified())}},{key:"resetModified",value:function(){this._modified&&(this._modified=!1,"function"==typeof this.onResetModified&&this.onResetModified())}},{key:"serializable",get:function(){return this._storage.size>0?this._storage:null}},{key:"lastModified",get:function(){return this._timeStamp.toString()}}])&&i(t.prototype,r),e}();t.AnnotationStorage=o},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasGraphics=void 0;var n=r(4),a=r(141),i=r(1);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function s(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=d(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),e}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||d(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){if(e){if("string"==typeof e)return h(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var p=4096,v=16;function m(e){if(!e.mozCurrentTransform){e._originalSave=e.save,e._originalRestore=e.restore,e._originalRotate=e.rotate,e._originalScale=e.scale,e._originalTranslate=e.translate,e._originalTransform=e.transform,e._originalSetTransform=e.setTransform,e._originalResetTransform=e.resetTransform,e._transformMatrix=e._transformMatrix||[1,0,0,1,0,0],e._transformStack=[];try{var t=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e),"lineWidth");e._setLineWidth=t.set,e._getLineWidth=t.get,Object.defineProperty(e,"lineWidth",{set:function(e){this._setLineWidth(1.000001*e)},get:function(){return this._getLineWidth()}})}catch(e){}Object.defineProperty(e,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(e,"mozCurrentTransformInverse",{get:function(){var e=f(this._transformMatrix,6),t=e[0],r=e[1],n=e[2],a=e[3],i=e[4],o=e[5],s=t*a-r*n,l=r*n-t*a;return[a/s,r/l,n/l,t/s,(a*i-n*o)/l,(r*i-t*o)/s]}}),e.save=function(){var e=this._transformMatrix;this._transformStack.push(e),this._transformMatrix=e.slice(0,6),this._originalSave()},e.restore=function(){var e=this._transformStack.pop();e&&(this._transformMatrix=e,this._originalRestore())},e.translate=function(e,t){var r=this._transformMatrix;r[4]=r[0]*e+r[2]*t+r[4],r[5]=r[1]*e+r[3]*t+r[5],this._originalTranslate(e,t)},e.scale=function(e,t){var r=this._transformMatrix;r[0]*=e,r[1]*=e,r[2]*=t,r[3]*=t,this._originalScale(e,t)},e.transform=function(t,r,n,a,i,o){var s=this._transformMatrix;this._transformMatrix=[s[0]*t+s[2]*r,s[1]*t+s[3]*r,s[0]*n+s[2]*a,s[1]*n+s[3]*a,s[0]*i+s[2]*o+s[4],s[1]*i+s[3]*o+s[5]],e._originalTransform(t,r,n,a,i,o)},e.setTransform=function(t,r,n,a,i,o){this._transformMatrix=[t,r,n,a,i,o],e._originalSetTransform(t,r,n,a,i,o)},e.resetTransform=function(){this._transformMatrix=[1,0,0,1,0,0],e._originalResetTransform()},e.rotate=function(e){var t=Math.cos(e),r=Math.sin(e),n=this._transformMatrix;this._transformMatrix=[n[0]*t+n[2]*r,n[1]*t+n[3]*r,n[0]*-r+n[2]*t,n[1]*-r+n[3]*t,n[4],n[5]],this._originalRotate(e)}}}var y=function(){function e(t){l(this,e),this.canvasFactory=t,this.cache=Object.create(null)}return c(e,[{key:"getCanvas",value:function(e,t,r,n){var a;return void 0!==this.cache[e]?(a=this.cache[e],this.canvasFactory.reset(a,t,r),a.context.setTransform(1,0,0,1,0,0)):(a=this.canvasFactory.create(t,r),this.cache[e]=a),n&&m(a.context),a}},{key:"clear",value:function(){for(var e in this.cache){var t=this.cache[e];this.canvasFactory.destroy(t),delete this.cache[e]}}}]),e}(),g=function(){function e(t,r){l(this,e),this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps=null,this.startNewPathAndClipBox([0,0,t,r])}return c(e,[{key:"clone",value:function(){var e=Object.create(this);return e.clipBox=this.clipBox.slice(),e}},{key:"setCurrentPoint",value:function(e,t){this.x=e,this.y=t}},{key:"updatePathMinMax",value:function(e,t,r){var a=f(n.Util.applyTransform([t,r],e),2);t=a[0],r=a[1],this.minX=Math.min(this.minX,t),this.minY=Math.min(this.minY,r),this.maxX=Math.max(this.maxX,t),this.maxY=Math.max(this.maxY,r)}},{key:"updateCurvePathMinMax",value:function(e,t,r,a,i,o,s,l,u){var c=n.Util.bezierBoundingBox(t,r,a,i,o,s,l,u);this.updatePathMinMax(e,c[0],c[1]),this.updatePathMinMax(e,c[2],c[3])}},{key:"getPathBoundingBox",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.PathType.FILL,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=[this.minX,this.minY,this.maxX,this.maxY];if(e===a.PathType.STROKE){t||(0,n.unreachable)("Stroke bounding box must include transform.");var i=n.Util.singularValueDecompose2dScale(t),o=i[0]*this.lineWidth/2,s=i[1]*this.lineWidth/2;r[0]-=o,r[1]-=s,r[2]+=o,r[3]+=s}return r}},{key:"updateClipFromPath",value:function(){var e=n.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(e||[0,0,0,0])}},{key:"startNewPathAndClipBox",value:function(e){this.clipBox=e,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}},{key:"getClippedPathBoundingBox",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.PathType.FILL,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return n.Util.intersect(this.clipBox,this.getPathBoundingBox(e,t))}}]),e}();function b(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if("undefined"!=typeof ImageData&&t instanceof ImageData)e.putImageData(t,0,0);else{var a,i,o,s,l,u,c,f,d,h=t.height,p=t.width,m=h%v,y=(h-m)/v,g=0===m?y:y+1,b=e.createImageData(p,v),_=0,S=t.data,w=b.data;if(r)switch(r.length){case 1:u=r[0],c=r[0],f=r[0],d=r[0];break;case 4:u=r[0],c=r[1],f=r[2],d=r[3]}if(t.kind===n.ImageKind.GRAYSCALE_1BPP){var A=S.byteLength,k=new Uint32Array(w.buffer,0,w.byteLength>>2),x=k.length,E=p+7>>3,P=4294967295,C=n.IsLittleEndianCached.value?4278190080:255;if(d&&255===d[0]&&0===d[255]){var T=[C,P];P=T[0],C=T[1]}for(i=0;i<g;i++){for(s=i<y?v:m,a=0,o=0;o<s;o++){for(var R=A-_,O=0,I=R>E?p:8*R-7,F=-8&I,D=0,L=0;O<F;O+=8)L=S[_++],k[a++]=128&L?P:C,k[a++]=64&L?P:C,k[a++]=32&L?P:C,k[a++]=16&L?P:C,k[a++]=8&L?P:C,k[a++]=4&L?P:C,k[a++]=2&L?P:C,k[a++]=1&L?P:C;for(;O<I;O++)0===D&&(L=S[_++],D=128),k[a++]=L&D?P:C,D>>=1}for(;a<x;)k[a++]=0;e.putImageData(b,0,i*v)}}else if(t.kind===n.ImageKind.RGBA_32BPP){var M=!!(u||c||f);for(o=0,l=p*v*4,i=0;i<y;i++){if(w.set(S.subarray(_,_+l)),_+=l,M)for(var N=0;N<l;N+=4)u&&(w[N+0]=u[w[N+0]]),c&&(w[N+1]=c[w[N+1]]),f&&(w[N+2]=f[w[N+2]]);e.putImageData(b,0,o),o+=v}if(i<g){if(l=p*m*4,w.set(S.subarray(_,_+l)),M)for(var j=0;j<l;j+=4)u&&(w[j+0]=u[w[j+0]]),c&&(w[j+1]=c[w[j+1]]),f&&(w[j+2]=f[w[j+2]]);e.putImageData(b,0,o)}}else{if(t.kind!==n.ImageKind.RGB_24BPP)throw new Error("bad image kind: ".concat(t.kind));var B=!!(u||c||f);for(l=p*(s=v),i=0;i<g;i++){for(i>=y&&(l=p*(s=m)),a=0,o=l;o--;)w[a++]=S[_++],w[a++]=S[_++],w[a++]=S[_++],w[a++]=255;if(B)for(var U=0;U<a;U+=4)u&&(w[U+0]=u[w[U+0]]),c&&(w[U+1]=c[w[U+1]]),f&&(w[U+2]=f[w[U+2]]);e.putImageData(b,0,i*v)}}}}function _(e,t){for(var r=t.height,n=t.width,a=r%v,i=(r-a)/v,o=0===a?i:i+1,s=e.createImageData(n,v),l=0,u=t.data,c=s.data,f=0;f<o;f++){for(var d=f<i?v:a,h=3,p=0;p<d;p++)for(var m=void 0,y=0,g=0;g<n;g++)y||(m=u[l++],y=128),c[h]=m&y?0:255,h+=4,y>>=1;e.putImageData(s,0,f*v)}}function S(e,t){for(var r=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],n=0,a=r.length;n<a;n++){var i=r[n];void 0!==e[i]&&(t[i]=e[i])}void 0!==e.setLineDash&&(t.setLineDash(e.getLineDash()),t.lineDashOffset=e.lineDashOffset)}function w(e){e.strokeStyle="#000000",e.fillStyle="#000000",e.fillRule="nonzero",e.globalAlpha=1,e.lineWidth=1,e.lineCap="butt",e.lineJoin="miter",e.miterLimit=10,e.globalCompositeOperation="source-over",e.font="10px sans-serif",void 0!==e.setLineDash&&(e.setLineDash([]),e.lineDashOffset=0)}function A(e,t,r,n){for(var a=e.length,i=3;i<a;i+=4){var o=e[i];if(0===o)e[i-3]=t,e[i-2]=r,e[i-1]=n;else if(o<255){var s=255-o;e[i-3]=e[i-3]*o+t*s>>8,e[i-2]=e[i-2]*o+r*s>>8,e[i-1]=e[i-1]*o+n*s>>8}}}function k(e,t,r){for(var n=e.length,a=3;a<n;a+=4){var i=r?r[e[a]]:e[a];t[a]=t[a]*i*.00392156862745098|0}}function x(e,t,r){for(var n=e.length,a=3;a<n;a+=4){var i=77*e[a-3]+152*e[a-2]+28*e[a-1];t[a]=r?t[a]*r[i>>8]>>8:t[a]*i>>16}}function E(e,t){var r=n.Util.singularValueDecompose2dScale(e);r[0]=Math.fround(r[0]),r[1]=Math.fround(r[1]);var a=Math.fround((globalThis.devicePixelRatio||1)*i.PixelsPerInch.PDF_TO_CSS_UNITS);return void 0!==t?t:r[0]<=a||r[1]<=a}var P=["butt","round","square"],C=["miter","round","bevel"],T={},R={},O=function(){function e(t,r,n,a,i,o,s){l(this,e),this.ctx=t,this.current=new g(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=r,this.objs=n,this.canvasFactory=a,this.imageLayer=i,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=[],this.optionalContentConfig=o,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=s,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,t&&m(t),this._cachedGetSinglePixelWidth=null}return c(e,[{key:"beginDrawing",value:function(e){var t=e.transform,r=e.viewport,n=e.transparency,a=void 0!==n&&n,i=e.background,o=void 0===i?null:i,s=this.ctx.canvas.width,l=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=o||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,s,l),this.ctx.restore(),a){var u=this.cachedCanvases.getCanvas("transparent",s,l,!0);this.compositeCtx=this.ctx,this.transparentCanvas=u.canvas,this.ctx=u.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),w(this.ctx),t&&(this.ctx.transform.apply(this.ctx,t),this.outputScaleX=t[0],this.outputScaleY=t[0]),this.ctx.transform.apply(this.ctx,r.transform),this.viewportScale=r.scale,this.baseTransform=this.ctx.mozCurrentTransform.slice(),this._combinedScaleFactor=Math.hypot(this.baseTransform[0],this.baseTransform[2]),this.imageLayer&&this.imageLayer.beginLayout()}},{key:"executeOperatorList",value:function(e,t,r,a){var i=e.argsArray,o=e.fnArray,l=t||0,u=i.length;if(u===l)return l;for(var c,f=u-l>10&&"function"==typeof r,d=f?Date.now()+15:0,h=0,p=this.commonObjs,v=this.objs;;){if(void 0!==a&&l===a.nextBreakPoint)return a.breakIt(l,r),l;if((c=o[l])!==n.OPS.dependency)this[c].apply(this,i[l]);else{var m,y=s(i[l]);try{for(y.s();!(m=y.n()).done;){var g=m.value,b=g.startsWith("g_")?p:v;if(!b.has(g))return b.get(g,r),l}}catch(e){y.e(e)}finally{y.f()}}if(++l===u)return l;if(f&&++h>10){if(Date.now()>d)return r(),l;h=0}}}},{key:"endDrawing",value:function(){for(;this.stateStack.length||null!==this.current.activeSMask;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.cachedPatterns.clear(),this.imageLayer&&this.imageLayer.endLayout()}},{key:"_scaleImage",value:function(e,t){for(var r,n,a=e.width,i=e.height,o=Math.max(Math.hypot(t[0],t[1]),1),s=Math.max(Math.hypot(t[2],t[3]),1),l=a,u=i,c="prescale1";o>2&&l>1||s>2&&u>1;){var f=l,d=u;o>2&&l>1&&(o/=l/(f=Math.ceil(l/2))),s>2&&u>1&&(s/=u/(d=Math.ceil(u/2))),(n=(r=this.cachedCanvases.getCanvas(c,f,d)).context).clearRect(0,0,f,d),n.drawImage(e,0,0,l,u,0,0,f,d),e=r.canvas,l=f,u=d,c="prescale1"===c?"prescale2":"prescale1"}return{img:e,paintWidth:l,paintHeight:u}}},{key:"_createMaskCanvas",value:function(e){var t=this.ctx,r=e.width,i=e.height,o=this.current.fillColor,s=this.current.patternFill,l=this.cachedCanvases.getCanvas("maskCanvas",r,i);_(l.context,e);var u=t.mozCurrentTransform,c=n.Util.transform(u,[1/r,0,0,-1/i,0,0]);c=n.Util.transform(c,[1,0,0,1,0,-i]);var f=n.Util.applyTransform([0,0],c),d=n.Util.applyTransform([r,i],c),h=n.Util.normalizeRect([f[0],f[1],d[0],d[1]]),p=Math.ceil(h[2]-h[0]),v=Math.ceil(h[3]-h[1]),m=this.cachedCanvases.getCanvas("fillCanvas",p,v,!0),y=m.context,g=Math.min(f[0],d[0]),b=Math.min(f[1],d[1]);y.translate(-g,-b),y.transform.apply(y,c);var S=this._scaleImage(l.canvas,y.mozCurrentTransformInverse);y.imageSmoothingEnabled=E(y.mozCurrentTransform,e.interpolate),y.drawImage(S.img,0,0,S.img.width,S.img.height,0,0,r,i),y.globalCompositeOperation="source-in";var w=n.Util.transform(y.mozCurrentTransformInverse,[1,0,0,1,-g,-b]);return y.fillStyle=s?o.getPattern(t,this,w,a.PathType.FILL):o,y.fillRect(0,0,r,i),{canvas:m.canvas,offsetX:Math.round(g),offsetY:Math.round(b)}}},{key:"setLineWidth",value:function(e){this.current.lineWidth=e,this.ctx.lineWidth=e}},{key:"setLineCap",value:function(e){this.ctx.lineCap=P[e]}},{key:"setLineJoin",value:function(e){this.ctx.lineJoin=C[e]}},{key:"setMiterLimit",value:function(e){this.ctx.miterLimit=e}},{key:"setDash",value:function(e,t){var r=this.ctx;void 0!==r.setLineDash&&(r.setLineDash(e),r.lineDashOffset=t)}},{key:"setRenderingIntent",value:function(e){}},{key:"setFlatness",value:function(e){}},{key:"setGState",value:function(e){for(var t=0,r=e.length;t<r;t++){var n=e[t],a=n[0],i=n[1];switch(a){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"RI":this.setRenderingIntent(i);break;case"FL":this.setFlatness(i);break;case"Font":this.setFont(i[0],i[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=i;break;case"SMask":this.current.activeSMask=i?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.current.transferMaps=i}}}},{key:"checkSMaskState",value:function(){var e=!!this.suspendedCtx;this.current.activeSMask&&!e?this.beginSMaskMode():!this.current.activeSMask&&e&&this.endSMaskMode()}},{key:"beginSMaskMode",value:function(){if(this.suspendedCtx)throw new Error("beginSMaskMode called while already in smask mode");var e=this.ctx.canvas.width,t=this.ctx.canvas.height,r="smaskGroupAt"+this.groupLevel,n=this.cachedCanvases.getCanvas(r,e,t,!0);this.suspendedCtx=this.ctx,this.ctx=n.context;var a=this.ctx;a.setTransform.apply(a,this.suspendedCtx.mozCurrentTransform),S(this.suspendedCtx,a),function(e,t){if(e._removeMirroring)throw new Error("Context is already forwarding operations.");e.__originalSave=e.save,e.__originalRestore=e.restore,e.__originalRotate=e.rotate,e.__originalScale=e.scale,e.__originalTranslate=e.translate,e.__originalTransform=e.transform,e.__originalSetTransform=e.setTransform,e.__originalResetTransform=e.resetTransform,e.__originalClip=e.clip,e.__originalMoveTo=e.moveTo,e.__originalLineTo=e.lineTo,e.__originalBezierCurveTo=e.bezierCurveTo,e.__originalRect=e.rect,e.__originalClosePath=e.closePath,e.__originalBeginPath=e.beginPath,e._removeMirroring=function(){e.save=e.__originalSave,e.restore=e.__originalRestore,e.rotate=e.__originalRotate,e.scale=e.__originalScale,e.translate=e.__originalTranslate,e.transform=e.__originalTransform,e.setTransform=e.__originalSetTransform,e.resetTransform=e.__originalResetTransform,e.clip=e.__originalClip,e.moveTo=e.__originalMoveTo,e.lineTo=e.__originalLineTo,e.bezierCurveTo=e.__originalBezierCurveTo,e.rect=e.__originalRect,e.closePath=e.__originalClosePath,e.beginPath=e.__originalBeginPath,delete e._removeMirroring},e.save=function(){t.save(),this.__originalSave()},e.restore=function(){t.restore(),this.__originalRestore()},e.translate=function(e,r){t.translate(e,r),this.__originalTranslate(e,r)},e.scale=function(e,r){t.scale(e,r),this.__originalScale(e,r)},e.transform=function(e,r,n,a,i,o){t.transform(e,r,n,a,i,o),this.__originalTransform(e,r,n,a,i,o)},e.setTransform=function(e,r,n,a,i,o){t.setTransform(e,r,n,a,i,o),this.__originalSetTransform(e,r,n,a,i,o)},e.resetTransform=function(){t.resetTransform(),this.__originalResetTransform()},e.rotate=function(e){t.rotate(e),this.__originalRotate(e)},e.clip=function(e){t.clip(e),this.__originalClip(e)},e.moveTo=function(e,r){t.moveTo(e,r),this.__originalMoveTo(e,r)},e.lineTo=function(e,r){t.lineTo(e,r),this.__originalLineTo(e,r)},e.bezierCurveTo=function(e,r,n,a,i,o){t.bezierCurveTo(e,r,n,a,i,o),this.__originalBezierCurveTo(e,r,n,a,i,o)},e.rect=function(e,r,n,a){t.rect(e,r,n,a),this.__originalRect(e,r,n,a)},e.closePath=function(){t.closePath(),this.__originalClosePath()},e.beginPath=function(){t.beginPath(),this.__originalBeginPath()}}(a,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}},{key:"endSMaskMode",value:function(){if(!this.suspendedCtx)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),S(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.current.activeSMask=null,this.suspendedCtx=null}},{key:"compose",value:function(e){if(this.current.activeSMask){e?(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.ceil(e[2]),e[3]=Math.ceil(e[3])):e=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];var t=this.current.activeSMask;(function(e,t,r,n){var a=n[0],i=n[1],o=n[2]-a,s=n[3]-i;0!==o&&0!==s&&(function(e,t,r,n,a,i,o,s,l,u,c){var f,d=!!i,h=d?i[0]:0,p=d?i[1]:0,v=d?i[2]:0;f="Luminosity"===a?x:k;for(var m=Math.min(n,Math.ceil(1048576/r)),y=0;y<n;y+=m){var g=Math.min(m,n-y),b=e.getImageData(s-u,y+(l-c),r,g),_=t.getImageData(s,y+l,r,g);d&&A(b.data,h,p,v),f(b.data,_.data,o),t.putImageData(_,s,y+l)}}(t.context,r,o,s,t.subtype,t.backdrop,t.transferMap,a,i,t.offsetX,t.offsetY),e.save(),e.globalAlpha=1,e.globalCompositeOperation="source-over",e.setTransform(1,0,0,1,0,0),e.drawImage(r.canvas,0,0),e.restore())})(this.suspendedCtx,t,this.ctx,e),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}}},{key:"save",value:function(){this.ctx.save();var e=this.current;this.stateStack.push(e),this.current=e.clone()}},{key:"restore",value:function(){0===this.stateStack.length&&this.current.activeSMask&&this.endSMaskMode(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null)}},{key:"transform",value:function(e,t,r,n,a,i){this.ctx.transform(e,t,r,n,a,i),this._cachedGetSinglePixelWidth=null}},{key:"constructPath",value:function(e,t){for(var r,a,i=this.ctx,o=this.current,s=o.x,l=o.y,u=0,c=0,f=e.length;u<f;u++)switch(0|e[u]){case n.OPS.rectangle:s=t[c++],l=t[c++];var d=t[c++],h=t[c++],p=s+d,v=l+h;i.moveTo(s,l),0===d||0===h?i.lineTo(p,v):(i.lineTo(p,l),i.lineTo(p,v),i.lineTo(s,v)),o.updatePathMinMax(i.mozCurrentTransform,s,l),o.updatePathMinMax(i.mozCurrentTransform,p,v),i.closePath();break;case n.OPS.moveTo:s=t[c++],l=t[c++],i.moveTo(s,l),o.updatePathMinMax(i.mozCurrentTransform,s,l);break;case n.OPS.lineTo:s=t[c++],l=t[c++],i.lineTo(s,l),o.updatePathMinMax(i.mozCurrentTransform,s,l);break;case n.OPS.curveTo:r=s,a=l,s=t[c+4],l=t[c+5],i.bezierCurveTo(t[c],t[c+1],t[c+2],t[c+3],s,l),o.updateCurvePathMinMax(i.mozCurrentTransform,r,a,t[c],t[c+1],t[c+2],t[c+3],s,l),c+=6;break;case n.OPS.curveTo2:r=s,a=l,i.bezierCurveTo(s,l,t[c],t[c+1],t[c+2],t[c+3]),o.updateCurvePathMinMax(i.mozCurrentTransform,r,a,s,l,t[c],t[c+1],t[c+2],t[c+3]),s=t[c+2],l=t[c+3],c+=4;break;case n.OPS.curveTo3:r=s,a=l,s=t[c+2],l=t[c+3],i.bezierCurveTo(t[c],t[c+1],s,l,s,l),o.updateCurvePathMinMax(i.mozCurrentTransform,r,a,t[c],t[c+1],s,l,s,l),c+=4;break;case n.OPS.closePath:i.closePath()}o.setCurrentPoint(s,l)}},{key:"closePath",value:function(){this.ctx.closePath()}},{key:"stroke",value:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.strokeColor;if(t.globalAlpha=this.current.strokeAlpha,this.contentVisible)if("object"===o(r)&&null!=r&&r.getPattern){var n=this.getSinglePixelWidth();t.save(),t.strokeStyle=r.getPattern(t,this,t.mozCurrentTransformInverse,a.PathType.STROKE),t.lineWidth=Math.max(n,this.current.lineWidth),t.stroke(),t.restore()}else{var i=this.getSinglePixelWidth();i<0&&-i>=this.current.lineWidth?(t.save(),t.resetTransform(),t.lineWidth=Math.round(this._combinedScaleFactor),t.stroke(),t.restore()):(t.lineWidth=Math.max(i,this.current.lineWidth),t.stroke())}e&&this.consumePath(this.current.getClippedPathBoundingBox()),t.globalAlpha=this.current.fillAlpha}},{key:"closeStroke",value:function(){this.closePath(),this.stroke()}},{key:"fill",value:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.fillColor,n=!1;this.current.patternFill&&(t.save(),t.fillStyle=r.getPattern(t,this,t.mozCurrentTransformInverse,a.PathType.FILL),n=!0);var i=this.current.getClippedPathBoundingBox();this.contentVisible&&null!==i&&(this.pendingEOFill?(t.fill("evenodd"),this.pendingEOFill=!1):t.fill()),n&&t.restore(),e&&this.consumePath(i)}},{key:"eoFill",value:function(){this.pendingEOFill=!0,this.fill()}},{key:"fillStroke",value:function(){this.fill(!1),this.stroke(!1),this.consumePath()}},{key:"eoFillStroke",value:function(){this.pendingEOFill=!0,this.fillStroke()}},{key:"closeFillStroke",value:function(){this.closePath(),this.fillStroke()}},{key:"closeEOFillStroke",value:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}},{key:"endPath",value:function(){this.consumePath()}},{key:"clip",value:function(){this.pendingClip=T}},{key:"eoClip",value:function(){this.pendingClip=R}},{key:"beginText",value:function(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}},{key:"endText",value:function(){var e=this.pendingTextPaths,t=this.ctx;if(void 0!==e){t.save(),t.beginPath();for(var r=0;r<e.length;r++){var n=e[r];t.setTransform.apply(t,n.transform),t.translate(n.x,n.y),n.addToPath(t,n.fontSize)}t.restore(),t.clip(),t.beginPath(),delete this.pendingTextPaths}else t.beginPath()}},{key:"setCharSpacing",value:function(e){this.current.charSpacing=e}},{key:"setWordSpacing",value:function(e){this.current.wordSpacing=e}},{key:"setHScale",value:function(e){this.current.textHScale=e/100}},{key:"setLeading",value:function(e){this.current.leading=-e}},{key:"setFont",value:function(e,t){var r=this.commonObjs.get(e),a=this.current;if(!r)throw new Error("Can't find font for ".concat(e));if(a.fontMatrix=r.fontMatrix||n.FONT_IDENTITY_MATRIX,0!==a.fontMatrix[0]&&0!==a.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+e),t<0?(t=-t,a.fontDirection=-1):a.fontDirection=1,this.current.font=r,this.current.fontSize=t,!r.isType3Font){var i=r.loadedName||"sans-serif",o="normal";r.black?o="900":r.bold&&(o="bold");var s=r.italic?"italic":"normal",l='"'.concat(i,'", ').concat(r.fallbackName),u=t;t<16?u=16:t>100&&(u=100),this.current.fontSizeScale=t/u,this.ctx.font="".concat(s," ").concat(o," ").concat(u,"px ").concat(l)}}},{key:"setTextRenderingMode",value:function(e){this.current.textRenderingMode=e}},{key:"setTextRise",value:function(e){this.current.textRise=e}},{key:"moveText",value:function(e,t){this.current.x=this.current.lineX+=e,this.current.y=this.current.lineY+=t}},{key:"setLeadingMoveText",value:function(e,t){this.setLeading(-t),this.moveText(e,t)}},{key:"setTextMatrix",value:function(e,t,r,n,a,i){this.current.textMatrix=[e,t,r,n,a,i],this.current.textMatrixScale=Math.hypot(e,t),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}},{key:"nextLine",value:function(){this.moveText(0,this.current.leading)}},{key:"paintChar",value:function(e,t,r,a,i){var o,s=this.ctx,l=this.current,u=l.font,c=l.textRenderingMode,f=l.fontSize/l.fontSizeScale,d=c&n.TextRenderingMode.FILL_STROKE_MASK,h=!!(c&n.TextRenderingMode.ADD_TO_PATH_FLAG),p=l.patternFill&&!u.missingFile;(u.disableFontFace||h||p)&&(o=u.getPathGenerator(this.commonObjs,e)),u.disableFontFace||p?(s.save(),s.translate(t,r),s.beginPath(),o(s,f),a&&s.setTransform.apply(s,a),d!==n.TextRenderingMode.FILL&&d!==n.TextRenderingMode.FILL_STROKE||s.fill(),d!==n.TextRenderingMode.STROKE&&d!==n.TextRenderingMode.FILL_STROKE||(i&&(s.resetTransform(),s.lineWidth=Math.round(this._combinedScaleFactor)),s.stroke()),s.restore()):(d!==n.TextRenderingMode.FILL&&d!==n.TextRenderingMode.FILL_STROKE||s.fillText(e,t,r),d!==n.TextRenderingMode.STROKE&&d!==n.TextRenderingMode.FILL_STROKE||(i?(s.save(),s.moveTo(t,r),s.resetTransform(),s.lineWidth=Math.round(this._combinedScaleFactor),s.strokeText(e,0,0),s.restore()):s.strokeText(e,t,r))),h&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:s.mozCurrentTransform,x:t,y:r,fontSize:f,addToPath:o})}},{key:"isFontSubpixelAAEnabled",get:function(){var e=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10).context;e.scale(1.5,1),e.fillText("I",0,10);for(var t=e.getImageData(0,0,10,10).data,r=!1,a=3;a<t.length;a+=4)if(t[a]>0&&t[a]<255){r=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",r)}},{key:"showText",value:function(e){var t=this.current,r=t.font;if(r.isType3Font)return this.showType3Text(e);var i=t.fontSize;if(0!==i){var o,s=this.ctx,l=t.fontSizeScale,u=t.charSpacing,c=t.wordSpacing,f=t.fontDirection,d=t.textHScale*f,h=e.length,p=r.vertical,v=p?1:-1,m=r.defaultVMetrics,y=i*t.fontMatrix[0],g=t.textRenderingMode===n.TextRenderingMode.FILL&&!r.disableFontFace&&!t.patternFill;if(s.save(),s.transform.apply(s,t.textMatrix),s.translate(t.x,t.y+t.textRise),f>0?s.scale(d,-1):s.scale(d,1),t.patternFill){s.save();var b=t.fillColor.getPattern(s,this,s.mozCurrentTransformInverse,a.PathType.FILL);o=s.mozCurrentTransform,s.restore(),s.fillStyle=b}var _=t.lineWidth,S=!1,w=t.textMatrixScale;if(0===w||0===_){var A=t.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;A!==n.TextRenderingMode.STROKE&&A!==n.TextRenderingMode.FILL_STROKE||(this._cachedGetSinglePixelWidth=null,S=(_=this.getSinglePixelWidth())<0)}else _/=w;1!==l&&(s.scale(l,l),_/=l),s.lineWidth=_;var k,x=0;for(k=0;k<h;++k){var E=e[k];if((0,n.isNum)(E))x+=v*E*i/1e3;else{var P=!1,C=(E.isSpace?c:0)+u,T=E.fontChar,R=E.accent,O=void 0,I=void 0,F=E.width;if(p){var D=E.vmetric||m,L=-(E.vmetric?D[1]:.5*F)*y,M=D[2]*y;F=D?-D[0]:F,O=L/l,I=(x+M)/l}else O=x/l,I=0;if(r.remeasure&&F>0){var N=1e3*s.measureText(T).width/i*l;if(F<N&&this.isFontSubpixelAAEnabled){var j=F/N;P=!0,s.save(),s.scale(j,1),O/=j}else F!==N&&(O+=(F-N)/2e3*i/l)}if(this.contentVisible&&(E.isInFont||r.missingFile))if(g&&!R)s.fillText(T,O,I);else if(this.paintChar(T,O,I,o,S),R){var B=O+i*R.offset.x/l,U=I-i*R.offset.y/l;this.paintChar(R.fontChar,B,U,o,S)}x+=p?F*y-C*f:F*y+C*f,P&&s.restore()}}p?t.y-=x:t.x+=x*d,s.restore(),this.compose()}}},{key:"showType3Text",value:function(e){var t,r,a,i,o=this.ctx,s=this.current,l=s.font,u=s.fontSize,c=s.fontDirection,f=l.vertical?1:-1,d=s.charSpacing,h=s.wordSpacing,p=s.textHScale*c,v=s.fontMatrix||n.FONT_IDENTITY_MATRIX,m=e.length;if(s.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==u){for(this._cachedGetSinglePixelWidth=null,o.save(),o.transform.apply(o,s.textMatrix),o.translate(s.x,s.y),o.scale(p,c),t=0;t<m;++t)if(r=e[t],(0,n.isNum)(r))i=f*r*u/1e3,this.ctx.translate(i,0),s.x+=i*p;else{var y=(r.isSpace?h:0)+d,g=l.charProcOperatorList[r.operatorListId];g?(this.contentVisible&&(this.processingType3=r,this.save(),o.scale(u,u),o.transform.apply(o,v),this.executeOperatorList(g),this.restore()),a=n.Util.applyTransform([r.width,0],v)[0]*u+y,o.translate(a,0),s.x+=a*p):(0,n.warn)('Type3 character "'.concat(r.operatorListId,'" is not available.'))}o.restore(),this.processingType3=null}}},{key:"setCharWidth",value:function(e,t){}},{key:"setCharWidthAndBounds",value:function(e,t,r,n,a,i){this.ctx.rect(r,n,a-r,i-n),this.clip(),this.endPath()}},{key:"getColorN_Pattern",value:function(t){var r,n=this;if("TilingPattern"===t[0]){var i=t[1],o=this.baseTransform||this.ctx.mozCurrentTransform.slice(),s={createCanvasGraphics:function(t){return new e(t,n.commonObjs,n.objs,n.canvasFactory)}};r=new a.TilingPattern(t,i,this.ctx,s,o)}else r=this._getPattern(t[1],t[2]);return r}},{key:"setStrokeColorN",value:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)}},{key:"setFillColorN",value:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}},{key:"setStrokeRGBColor",value:function(e,t,r){var a=n.Util.makeHexColor(e,t,r);this.ctx.strokeStyle=a,this.current.strokeColor=a}},{key:"setFillRGBColor",value:function(e,t,r){var a=n.Util.makeHexColor(e,t,r);this.ctx.fillStyle=a,this.current.fillColor=a,this.current.patternFill=!1}},{key:"_getPattern",value:function(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.cachedPatterns.has(e)?t=this.cachedPatterns.get(e):(t=(0,a.getShadingPattern)(this.objs.get(e)),this.cachedPatterns.set(e,t)),r&&(t.matrix=r),t}},{key:"shadingFill",value:function(e){if(this.contentVisible){var t=this.ctx;this.save();var r=this._getPattern(e);t.fillStyle=r.getPattern(t,this,t.mozCurrentTransformInverse,a.PathType.SHADING);var i=t.mozCurrentTransformInverse;if(i){var o=t.canvas,s=o.width,l=o.height,u=n.Util.applyTransform([0,0],i),c=n.Util.applyTransform([0,l],i),f=n.Util.applyTransform([s,0],i),d=n.Util.applyTransform([s,l],i),h=Math.min(u[0],c[0],f[0],d[0]),p=Math.min(u[1],c[1],f[1],d[1]),v=Math.max(u[0],c[0],f[0],d[0]),m=Math.max(u[1],c[1],f[1],d[1]);this.ctx.fillRect(h,p,v-h,m-p)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}}},{key:"beginInlineImage",value:function(){(0,n.unreachable)("Should not call beginInlineImage")}},{key:"beginImageData",value:function(){(0,n.unreachable)("Should not call beginImageData")}},{key:"paintFormXObjectBegin",value:function(e,t){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(e)&&6===e.length&&this.transform.apply(this,e),this.baseTransform=this.ctx.mozCurrentTransform,t)){var r=t[2]-t[0],n=t[3]-t[1];this.ctx.rect(t[0],t[1],r,n),this.current.updatePathMinMax(this.ctx.mozCurrentTransform,t[0],t[1]),this.current.updatePathMinMax(this.ctx.mozCurrentTransform,t[2],t[3]),this.clip(),this.endPath()}}},{key:"paintFormXObjectEnd",value:function(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}},{key:"beginGroup",value:function(e){if(this.contentVisible){this.save();var t=this.suspendedCtx;this.current.activeSMask&&(this.suspendedCtx=null,this.current.activeSMask=null);var r=this.ctx;e.isolated||(0,n.info)("TODO: Support non-isolated groups."),e.knockout&&(0,n.warn)("Knockout groups not supported.");var a=r.mozCurrentTransform;if(e.matrix&&r.transform.apply(r,e.matrix),!e.bbox)throw new Error("Bounding box is required.");var i=n.Util.getAxialAlignedBoundingBox(e.bbox,r.mozCurrentTransform),o=[0,0,r.canvas.width,r.canvas.height];i=n.Util.intersect(i,o)||[0,0,0,0];var s=Math.floor(i[0]),l=Math.floor(i[1]),u=Math.max(Math.ceil(i[2])-s,1),c=Math.max(Math.ceil(i[3])-l,1),f=1,d=1;u>p&&(f=u/p,u=p),c>p&&(d=c/p,c=p),this.current.startNewPathAndClipBox([0,0,u,c]);var h="groupAt"+this.groupLevel;e.smask&&(h+="_smask_"+this.smaskCounter++%2);var v=this.cachedCanvases.getCanvas(h,u,c,!0),m=v.context;m.scale(1/f,1/d),m.translate(-s,-l),m.transform.apply(m,a),e.smask?this.smaskStack.push({canvas:v.canvas,context:m,offsetX:s,offsetY:l,scaleX:f,scaleY:d,subtype:e.smask.subtype,backdrop:e.smask.backdrop,transferMap:e.smask.transferMap||null,startTransformInverse:null}):(r.setTransform(1,0,0,1,0,0),r.translate(s,l),r.scale(f,d),r.save()),S(r,m),this.ctx=m,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push({ctx:r,suspendedCtx:t}),this.groupLevel++}}},{key:"endGroup",value:function(e){if(this.contentVisible){this.groupLevel--;var t=this.ctx,r=this.groupStack.pop(),a=r.ctx,i=r.suspendedCtx;if(this.ctx=a,this.ctx.imageSmoothingEnabled=!1,i&&(this.suspendedCtx=i),e.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();var o=this.ctx.mozCurrentTransform;this.restore(),this.ctx.save(),this.ctx.setTransform.apply(this.ctx,o);var s=n.Util.getAxialAlignedBoundingBox([0,0,t.canvas.width,t.canvas.height],o);this.ctx.drawImage(t.canvas,0,0),this.ctx.restore(),this.compose(s)}}}},{key:"beginAnnotations",value:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)}},{key:"endAnnotations",value:function(){this.restore()}},{key:"beginAnnotation",value:function(e,t,r,a,i){if(this.save(),Array.isArray(t)&&4===t.length){var o=t[2]-t[0],s=t[3]-t[1];if(i&&this.annotationCanvasMap){(r=r.slice())[4]-=t[0],r[5]-=t[1],(t=t.slice())[0]=t[1]=0,t[2]=o,t[3]=s;var l=f(n.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform),2),u=l[0],c=l[1],d=this.viewportScale,h=Math.ceil(o*this.outputScaleX*d),p=Math.ceil(s*this.outputScaleY*d);this.annotationCanvas=this.canvasFactory.create(h,p);var v=this.annotationCanvas,y=v.canvas,b=v.context;y.style.width="calc(".concat(o,"px * var(--viewport-scale-factor))"),y.style.height="calc(".concat(s,"px * var(--viewport-scale-factor))"),this.annotationCanvasMap.set(e,y),this.annotationCanvas.savedCtx=this.ctx,this.ctx=b,this.ctx.setTransform(u,0,0,-c,0,s*c),m(this.ctx),w(this.ctx)}else w(this.ctx),this.ctx.rect(t[0],t[1],o,s),this.clip(),this.endPath()}this.current=new g(this.ctx.canvas.width,this.ctx.canvas.height),this.transform.apply(this,r),this.transform.apply(this,a)}},{key:"endAnnotation",value:function(){this.annotationCanvas&&(this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas),this.restore()}},{key:"paintImageMaskXObject",value:function(e){if(this.contentVisible){var t=this.ctx,r=e.width,n=e.height,a=this.processingType3;if(a&&void 0===a.compiled&&(a.compiled=r<=1e3&&n<=1e3?function(e){var t,r,n,a,i=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),o=e.width,s=e.height,l=o+1,u=new Uint8Array(l*(s+1)),c=o+7&-8,f=e.data,d=new Uint8Array(c*s),h=0;for(t=0,r=f.length;t<r;t++)for(var p=f[t],v=128;v>0;)d[h++]=p&v?0:255,v>>=1;var m=0;for(0!==d[h=0]&&(u[0]=1,++m),n=1;n<o;n++)d[h]!==d[h+1]&&(u[n]=d[h]?2:1,++m),h++;for(0!==d[h]&&(u[n]=2,++m),t=1;t<s;t++){a=t*l,d[(h=t*c)-c]!==d[h]&&(u[a]=d[h]?1:8,++m);var y=(d[h]?4:0)+(d[h-c]?8:0);for(n=1;n<o;n++)i[y=(y>>2)+(d[h+1]?4:0)+(d[h-c+1]?8:0)]&&(u[a+n]=i[y],++m),h++;if(d[h-c]!==d[h]&&(u[a+n]=d[h]?2:4,++m),m>1e3)return null}for(a=t*l,0!==d[h=c*(s-1)]&&(u[a]=8,++m),n=1;n<o;n++)d[h]!==d[h+1]&&(u[a+n]=d[h]?4:8,++m),h++;if(0!==d[h]&&(u[a+n]=4,++m),m>1e3)return null;var g=new Int32Array([0,l,-1,0,-l,0,0,0,1]),b=[];for(t=0;m&&t<=s;t++){for(var _=t*l,S=_+o;_<S&&!u[_];)_++;if(_!==S){var w=[_%l,t],A=_,k=u[_];do{var x=g[k];do{_+=x}while(!u[_]);var E=u[_];5!==E&&10!==E?(k=E,u[_]=0):(k=E&51*k>>4,u[_]&=k>>2|k<<2),w.push(_%l,_/l|0),u[_]||--m}while(A!==_);b.push(w),--t}}return function(e){e.save(),e.scale(1/o,-1/s),e.translate(0,-s),e.beginPath();for(var t=0,r=b.length;t<r;t++){var n=b[t];e.moveTo(n[0],n[1]);for(var a=2,i=n.length;a<i;a+=2)e.lineTo(n[a],n[a+1])}e.fill(),e.beginPath(),e.restore()}}({data:e.data,width:r,height:n}):null),null!=a&&a.compiled)a.compiled(t);else{var i=this._createMaskCanvas(e),o=i.canvas;t.save(),t.setTransform(1,0,0,1,0,0),t.drawImage(o,i.offsetX,i.offsetY),t.restore(),this.compose()}}}},{key:"paintImageMaskXObjectRepeat",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0;if(this.contentVisible){var s=this.ctx;s.save();var l=s.mozCurrentTransform;s.transform(t,r,a,i,0,0);var u=this._createMaskCanvas(e);s.setTransform(1,0,0,1,0,0);for(var c=0,d=o.length;c<d;c+=2){var h=n.Util.transform(l,[t,r,a,i,o[c],o[c+1]]),p=n.Util.applyTransform([0,0],h),v=f(p,2),m=v[0],y=v[1];s.drawImage(u.canvas,m,y)}s.restore(),this.compose()}}},{key:"paintImageMaskXObjectGroup",value:function(e){if(this.contentVisible){for(var t=this.ctx,r=this.current.fillColor,n=this.current.patternFill,i=0,o=e.length;i<o;i++){var s=e[i],l=s.width,u=s.height,c=this.cachedCanvases.getCanvas("maskCanvas",l,u),f=c.context;f.save(),_(f,s),f.globalCompositeOperation="source-in",f.fillStyle=n?r.getPattern(f,this,t.mozCurrentTransformInverse,a.PathType.FILL):r,f.fillRect(0,0,l,u),f.restore(),t.save(),t.transform.apply(t,s.transform),t.scale(1,-1),t.drawImage(c.canvas,0,0,l,u,0,-1,1,1),t.restore()}this.compose()}}},{key:"paintImageXObject",value:function(e){if(this.contentVisible){var t=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);t?this.paintInlineImageXObject(t):(0,n.warn)("Dependent image isn't ready yet")}}},{key:"paintImageXObjectRepeat",value:function(e,t,r,a){if(this.contentVisible){var i=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);if(i){for(var o=i.width,s=i.height,l=[],u=0,c=a.length;u<c;u+=2)l.push({transform:[t,0,0,r,a[u],a[u+1]],x:0,y:0,w:o,h:s});this.paintInlineImageXObjectGroup(i,l)}else(0,n.warn)("Dependent image isn't ready yet")}}},{key:"paintInlineImageXObject",value:function(e){if(this.contentVisible){var t,r=e.width,n=e.height,a=this.ctx;if(this.save(),a.scale(1/r,-1/n),"function"==typeof HTMLElement&&e instanceof HTMLElement||!e.data)t=e;else{var i=this.cachedCanvases.getCanvas("inlineImage",r,n);b(i.context,e,this.current.transferMaps),t=i.canvas}var o=this._scaleImage(t,a.mozCurrentTransformInverse);if(a.imageSmoothingEnabled=E(a.mozCurrentTransform,e.interpolate),a.drawImage(o.img,0,0,o.paintWidth,o.paintHeight,0,-n,r,n),this.imageLayer){var s=this.getCanvasPosition(0,-n);this.imageLayer.appendImage({imgData:e,left:s[0],top:s[1],width:r/a.mozCurrentTransformInverse[0],height:n/a.mozCurrentTransformInverse[3]})}this.compose(),this.restore()}}},{key:"paintInlineImageXObjectGroup",value:function(e,t){if(this.contentVisible){var r=this.ctx,n=e.width,a=e.height,i=this.cachedCanvases.getCanvas("inlineImage",n,a);b(i.context,e,this.current.transferMaps);for(var o=0,s=t.length;o<s;o++){var l=t[o];if(r.save(),r.transform.apply(r,l.transform),r.scale(1,-1),r.drawImage(i.canvas,l.x,l.y,l.w,l.h,0,-1,1,1),this.imageLayer){var u=this.getCanvasPosition(l.x,l.y);this.imageLayer.appendImage({imgData:e,left:u[0],top:u[1],width:n,height:a})}r.restore()}this.compose()}}},{key:"paintSolidColorImageMask",value:function(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}},{key:"markPoint",value:function(e){}},{key:"markPointProps",value:function(e,t){}},{key:"beginMarkedContent",value:function(e){this.markedContentStack.push({visible:!0})}},{key:"beginMarkedContentProps",value:function(e,t){"OC"===e?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(t)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}},{key:"endMarkedContent",value:function(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}},{key:"beginCompat",value:function(){}},{key:"endCompat",value:function(){}},{key:"consumePath",value:function(e){this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(e);var t=this.ctx;this.pendingClip&&(this.pendingClip===R?t.clip("evenodd"):t.clip(),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),t.beginPath()}},{key:"getSinglePixelWidth",value:function(){if(null===this._cachedGetSinglePixelWidth){var e=this.ctx.mozCurrentTransform,t=Math.abs(e[0]*e[3]-e[2]*e[1]),r=Math.pow(e[0],2)+Math.pow(e[2],2),n=Math.pow(e[1],2)+Math.pow(e[3],2),a=Math.sqrt(Math.max(r,n))/t;r!==n&&this._combinedScaleFactor*a>1?this._cachedGetSinglePixelWidth=-this._combinedScaleFactor*a:t>Number.EPSILON?this._cachedGetSinglePixelWidth=a:this._cachedGetSinglePixelWidth=1}return this._cachedGetSinglePixelWidth}},{key:"getCanvasPosition",value:function(e,t){var r=this.ctx.mozCurrentTransform;return[r[0]*e+r[2]*t+r[4],r[1]*e+r[3]*t+r[5]]}},{key:"isContentVisible",value:function(){for(var e=this.markedContentStack.length-1;e>=0;e--)if(!this.markedContentStack[e].visible)return!1;return!0}}]),e}();for(var I in t.CanvasGraphics=O,n.OPS)void 0!==O.prototype[I]&&(O.prototype[n.OPS[I]]=O.prototype[I])},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.TilingPattern=t.PathType=void 0,t.getShadingPattern=function(e){switch(e[0]){case"RadialAxial":return new g(e);case"Mesh":return new S(e);case"Dummy":return new w}throw new Error("Unknown IR type: ".concat(e[0]))};var a=r(4);function i(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,i=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=f(e);if(t){var a=f(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return c(this,r)}}function c(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),e}var v={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function m(e,t){if(t&&"undefined"!=typeof Path2D){var r=t[2]-t[0],n=t[3]-t[1],a=new Path2D;a.rect(t[0],t[1],r,n),e.clip(a)}}t.PathType=v;var y=function(){function e(){d(this,e),this.constructor===e&&(0,a.unreachable)("Cannot initialize BaseShadingPattern.")}return p(e,[{key:"getPattern",value:function(){(0,a.unreachable)("Abstract method `getPattern` called.")}}]),e}(),g=function(e){s(r,e);var t=u(r);function r(e){var n;return d(this,r),(n=t.call(this))._type=e[1],n._bbox=e[2],n._colorStops=e[3],n._p0=e[4],n._p1=e[5],n._r0=e[6],n._r1=e[7],n.matrix=null,n}return p(r,[{key:"_createGradient",value:function(e){var t;"axial"===this._type?t=e.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):"radial"===this._type&&(t=e.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));var r,n=i(this._colorStops);try{for(n.s();!(r=n.n()).done;){var a=r.value;t.addColorStop(a[0],a[1])}}catch(e){n.e(e)}finally{n.f()}return t}},{key:"getPattern",value:function(e,t,r,n){var i;if(n===v.STROKE||n===v.FILL){var o=t.current.getClippedPathBoundingBox(n,e.mozCurrentTransform)||[0,0,0,0],s=Math.ceil(o[2]-o[0])||1,l=Math.ceil(o[3]-o[1])||1,u=t.cachedCanvases.getCanvas("pattern",s,l,!0),c=u.context;c.clearRect(0,0,c.canvas.width,c.canvas.height),c.beginPath(),c.rect(0,0,c.canvas.width,c.canvas.height),c.translate(-o[0],-o[1]),r=a.Util.transform(r,[1,0,0,1,o[0],o[1]]),c.transform.apply(c,t.baseTransform),this.matrix&&c.transform.apply(c,this.matrix),m(c,this._bbox),c.fillStyle=this._createGradient(c),c.fill(),i=e.createPattern(u.canvas,"no-repeat");var f=new DOMMatrix(r);try{i.setTransform(f)}catch(e){(0,a.warn)('RadialAxialShadingPattern.getPattern: "'.concat(null==e?void 0:e.message,'".'))}}else m(e,this._bbox),i=this._createGradient(e);return i}}]),r}(y);function b(e,t,r,n,a,i,o,s){var l,u=t.coords,c=t.colors,f=e.data,d=4*e.width;u[r+1]>u[n+1]&&(l=r,r=n,n=l,l=i,i=o,o=l),u[n+1]>u[a+1]&&(l=n,n=a,a=l,l=o,o=s,s=l),u[r+1]>u[n+1]&&(l=r,r=n,n=l,l=i,i=o,o=l);var h=(u[r]+t.offsetX)*t.scaleX,p=(u[r+1]+t.offsetY)*t.scaleY,v=(u[n]+t.offsetX)*t.scaleX,m=(u[n+1]+t.offsetY)*t.scaleY,y=(u[a]+t.offsetX)*t.scaleX,g=(u[a+1]+t.offsetY)*t.scaleY;if(!(p>=g))for(var b,_,S,w,A,k,x,E,P=c[i],C=c[i+1],T=c[i+2],R=c[o],O=c[o+1],I=c[o+2],F=c[s],D=c[s+1],L=c[s+2],M=Math.round(p),N=Math.round(g),j=M;j<=N;j++){if(j<m){var B;b=h-(h-v)*(B=j<p?0:(p-j)/(p-m)),_=P-(P-R)*B,S=C-(C-O)*B,w=T-(T-I)*B}else{var U;b=v-(v-y)*(U=j>g?1:m===g?0:(m-j)/(m-g)),_=R-(R-F)*U,S=O-(O-D)*U,w=I-(I-L)*U}var q=void 0;A=h-(h-y)*(q=j<p?0:j>g?1:(p-j)/(p-g)),k=P-(P-F)*q,x=C-(C-D)*q,E=T-(T-L)*q;for(var z=Math.round(Math.min(b,A)),W=Math.round(Math.max(b,A)),G=d*j+4*z,H=z;H<=W;H++)(q=(b-H)/(b-A))<0?q=0:q>1&&(q=1),f[G++]=_-(_-k)*q|0,f[G++]=S-(S-x)*q|0,f[G++]=w-(w-E)*q|0,f[G++]=255}}function _(e,t,r){var n,a,i=t.coords,o=t.colors;switch(t.type){case"lattice":var s=t.verticesPerRow,l=Math.floor(i.length/s)-1,u=s-1;for(n=0;n<l;n++)for(var c=n*s,f=0;f<u;f++,c++)b(e,r,i[c],i[c+1],i[c+s],o[c],o[c+1],o[c+s]),b(e,r,i[c+s+1],i[c+1],i[c+s],o[c+s+1],o[c+1],o[c+s]);break;case"triangles":for(n=0,a=i.length;n<a;n+=3)b(e,r,i[n],i[n+1],i[n+2],o[n],o[n+1],o[n+2]);break;default:throw new Error("illegal figure")}}var S=function(e){s(r,e);var t=u(r);function r(e){var n;return d(this,r),(n=t.call(this))._coords=e[2],n._colors=e[3],n._figures=e[4],n._bounds=e[5],n._bbox=e[7],n._background=e[8],n.matrix=null,n}return p(r,[{key:"_createMeshCanvas",value:function(e,t,r){var n=Math.floor(this._bounds[0]),a=Math.floor(this._bounds[1]),o=Math.ceil(this._bounds[2])-n,s=Math.ceil(this._bounds[3])-a,l=Math.min(Math.ceil(Math.abs(o*e[0]*1.1)),3e3),u=Math.min(Math.ceil(Math.abs(s*e[1]*1.1)),3e3),c=o/l,f=s/u,d={coords:this._coords,colors:this._colors,offsetX:-n,offsetY:-a,scaleX:1/c,scaleY:1/f},h=l+4,p=u+4,v=r.getCanvas("mesh",h,p,!1),m=v.context,y=m.createImageData(l,u);if(t)for(var g=y.data,b=0,S=g.length;b<S;b+=4)g[b]=t[0],g[b+1]=t[1],g[b+2]=t[2],g[b+3]=255;var w,A=i(this._figures);try{for(A.s();!(w=A.n()).done;)_(y,w.value,d)}catch(e){A.e(e)}finally{A.f()}return m.putImageData(y,2,2),{canvas:v.canvas,offsetX:n-2*c,offsetY:a-2*f,scaleX:c,scaleY:f}}},{key:"getPattern",value:function(e,t,r,n){var i;if(m(e,this._bbox),n===v.SHADING)i=a.Util.singularValueDecompose2dScale(e.mozCurrentTransform);else if(i=a.Util.singularValueDecompose2dScale(t.baseTransform),this.matrix){var o=a.Util.singularValueDecompose2dScale(this.matrix);i=[i[0]*o[0],i[1]*o[1]]}var s=this._createMeshCanvas(i,n===v.SHADING?null:this._background,t.cachedCanvases);return n!==v.SHADING&&(e.setTransform.apply(e,t.baseTransform),this.matrix&&e.transform.apply(e,this.matrix)),e.translate(s.offsetX,s.offsetY),e.scale(s.scaleX,s.scaleY),e.createPattern(s.canvas,"no-repeat")}}]),r}(y),w=function(e){s(r,e);var t=u(r);function r(){return d(this,r),t.apply(this,arguments)}return p(r,[{key:"getPattern",value:function(){return"hotpink"}}]),r}(y),A=function(){function e(t,r,n,a,i){d(this,e),this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=r,this.ctx=n,this.canvasGraphicsFactory=a,this.baseTransform=i}return p(e,[{key:"createPatternCanvas",value:function(e){var t=this.operatorList,r=this.bbox,n=this.xstep,i=this.ystep,o=this.paintType,s=this.tilingType,l=this.color,u=this.canvasGraphicsFactory;(0,a.info)("TilingType: "+s);var c=r[0],f=r[1],d=r[2],h=r[3],p=a.Util.singularValueDecompose2dScale(this.matrix),v=a.Util.singularValueDecompose2dScale(this.baseTransform),m=[p[0]*v[0],p[1]*v[1]],y=this.getSizeAndScale(n,this.ctx.canvas.width,m[0]),g=this.getSizeAndScale(i,this.ctx.canvas.height,m[1]),b=e.cachedCanvases.getCanvas("pattern",y.size,g.size,!0),_=b.context,S=u.createCanvasGraphics(_);S.groupLevel=e.groupLevel,this.setFillAndStrokeStyleToContext(S,o,l);var w=c,A=f,k=d,x=h;return c<0&&(w=0,k+=Math.abs(c)),f<0&&(A=0,x+=Math.abs(f)),_.translate(-y.scale*w,-g.scale*A),S.transform(y.scale,0,0,g.scale,0,0),this.clipBbox(S,w,A,k,x),S.baseTransform=S.ctx.mozCurrentTransform.slice(),S.executeOperatorList(t),S.endDrawing(),{canvas:b.canvas,scaleX:y.scale,scaleY:g.scale,offsetX:w,offsetY:A}}},{key:"getSizeAndScale",value:function(t,r,n){t=Math.abs(t);var a=Math.max(e.MAX_PATTERN_SIZE,r),i=Math.ceil(t*n);return i>=a?i=a:n=i/t,{scale:n,size:i}}},{key:"clipBbox",value:function(e,t,r,n,a){var i=n-t,o=a-r;e.ctx.rect(t,r,i,o),e.clip(),e.endPath()}},{key:"setFillAndStrokeStyleToContext",value:function(e,t,r){var n=e.ctx,i=e.current;switch(t){case 1:var o=this.ctx;n.fillStyle=o.fillStyle,n.strokeStyle=o.strokeStyle,i.fillColor=o.fillStyle,i.strokeColor=o.strokeStyle;break;case 2:var s=a.Util.makeHexColor(r[0],r[1],r[2]);n.fillStyle=s,n.strokeStyle=s,i.fillColor=s,i.strokeColor=s;break;default:throw new a.FormatError("Unsupported paint type: ".concat(t))}}},{key:"getPattern",value:function(e,t,r,n){var i=r;n!==v.SHADING&&(i=a.Util.transform(i,t.baseTransform),this.matrix&&(i=a.Util.transform(i,this.matrix)));var o=this.createPatternCanvas(t),s=new DOMMatrix(i);s=(s=s.translate(o.offsetX,o.offsetY)).scale(1/o.scaleX,1/o.scaleY);var l=e.createPattern(o.canvas,"repeat");try{l.setTransform(s)}catch(e){(0,a.warn)('TilingPattern.getPattern: "'.concat(null==e?void 0:e.message,'".'))}return l}}],[{key:"MAX_PATTERN_SIZE",get:function(){return(0,a.shadow)(this,"MAX_PATTERN_SIZE",3e3)}}]),e}();t.TilingPattern=A},(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalWorkerOptions=void 0;var r=Object.create(null);t.GlobalWorkerOptions=r,r.workerPort=void 0===r.workerPort?null:r.workerPort,r.workerSrc=void 0===r.workerSrc?"":r.workerSrc},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MessageHandler=void 0;var n,a=(n=r(2))&&n.__esModule?n:{default:n},i=r(4);function o(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function u(e){if(!(e instanceof Error||"object"===l(e)&&null!==e))return(0,i.warn)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),e;switch(e.name){case"AbortException":return new i.AbortException(e.message);case"MissingPDFException":return new i.MissingPDFException(e.message);case"PasswordException":return new i.PasswordException(e.message,e.code);case"UnexpectedResponseException":return new i.UnexpectedResponseException(e.message,e.status);case"UnknownErrorException":return new i.UnknownErrorException(e.message,e.details);default:return new i.UnknownErrorException(e.message,e.toString())}}var c=function(){function e(t,r,n){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sourceName=t,this.targetName=r,this.comObj=n,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=function(e){var t=e.data;if(t.targetName===a.sourceName)if(t.stream)a._processStreamMessage(t);else if(t.callback){var r=t.callbackId,i=a.callbackCapabilities[r];if(!i)throw new Error("Cannot resolve callback ".concat(r));if(delete a.callbackCapabilities[r],1===t.callback)i.resolve(t.data);else{if(2!==t.callback)throw new Error("Unexpected callback case");i.reject(u(t.reason))}}else{var o=a.actionHandler[t.action];if(!o)throw new Error("Unknown action from worker: ".concat(t.action));if(t.callbackId){var s=a.sourceName,l=t.sourceName;new Promise((function(e){e(o(t.data))})).then((function(e){n.postMessage({sourceName:s,targetName:l,callback:1,callbackId:t.callbackId,data:e})}),(function(e){n.postMessage({sourceName:s,targetName:l,callback:2,callbackId:t.callbackId,reason:u(e)})}))}else t.streamId?a._createStreamSink(t):o(t.data)}},n.addEventListener("message",this._onComObjOnMessage)}var t,r,n,l;return t=e,r=[{key:"on",value:function(e,t){var r=this.actionHandler;if(r[e])throw new Error('There is already an actionName called "'.concat(e,'"'));r[e]=t}},{key:"send",value:function(e,t,r){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:e,data:t},r)}},{key:"sendWithPromise",value:function(e,t,r){var n=this.callbackId++,a=(0,i.createPromiseCapability)();this.callbackCapabilities[n]=a;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:e,callbackId:n,data:t},r)}catch(e){a.reject(e)}return a.promise}},{key:"sendWithStream",value:function(e,t,r,n){var a=this,o=this.streamId++,s=this.sourceName,l=this.targetName,c=this.comObj;return new ReadableStream({start:function(r){var u=(0,i.createPromiseCapability)();return a.streamControllers[o]={controller:r,startCall:u,pullCall:null,cancelCall:null,isClosed:!1},c.postMessage({sourceName:s,targetName:l,action:e,streamId:o,data:t,desiredSize:r.desiredSize},n),u.promise},pull:function(e){var t=(0,i.createPromiseCapability)();return a.streamControllers[o].pullCall=t,c.postMessage({sourceName:s,targetName:l,stream:6,streamId:o,desiredSize:e.desiredSize}),t.promise},cancel:function(e){(0,i.assert)(e instanceof Error,"cancel must have a valid reason");var t=(0,i.createPromiseCapability)();return a.streamControllers[o].cancelCall=t,a.streamControllers[o].isClosed=!0,c.postMessage({sourceName:s,targetName:l,stream:1,streamId:o,reason:u(e)}),t.promise}},r)}},{key:"_createStreamSink",value:function(e){var t=e.streamId,r=this.sourceName,n=e.sourceName,a=this.comObj,o=this,s=this.actionHandler[e.action],l={enqueue:function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,s=arguments.length>2?arguments[2]:void 0;if(!this.isCancelled){var l=this.desiredSize;this.desiredSize-=o,l>0&&this.desiredSize<=0&&(this.sinkCapability=(0,i.createPromiseCapability)(),this.ready=this.sinkCapability.promise),a.postMessage({sourceName:r,targetName:n,stream:4,streamId:t,chunk:e},s)}},close:function(){this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:r,targetName:n,stream:3,streamId:t}),delete o.streamSinks[t])},error:function(e){(0,i.assert)(e instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:r,targetName:n,stream:5,streamId:t,reason:u(e)}))},sinkCapability:(0,i.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:e.desiredSize,ready:null};l.sinkCapability.resolve(),l.ready=l.sinkCapability.promise,this.streamSinks[t]=l,new Promise((function(t){t(s(e.data,l))})).then((function(){a.postMessage({sourceName:r,targetName:n,stream:8,streamId:t,success:!0})}),(function(e){a.postMessage({sourceName:r,targetName:n,stream:8,streamId:t,reason:u(e)})}))}},{key:"_processStreamMessage",value:function(e){var t=e.streamId,r=this.sourceName,n=e.sourceName,a=this.comObj,o=this.streamControllers[t],s=this.streamSinks[t];switch(e.stream){case 8:e.success?o.startCall.resolve():o.startCall.reject(u(e.reason));break;case 7:e.success?o.pullCall.resolve():o.pullCall.reject(u(e.reason));break;case 6:if(!s){a.postMessage({sourceName:r,targetName:n,stream:7,streamId:t,success:!0});break}s.desiredSize<=0&&e.desiredSize>0&&s.sinkCapability.resolve(),s.desiredSize=e.desiredSize,new Promise((function(e){e(s.onPull&&s.onPull())})).then((function(){a.postMessage({sourceName:r,targetName:n,stream:7,streamId:t,success:!0})}),(function(e){a.postMessage({sourceName:r,targetName:n,stream:7,streamId:t,reason:u(e)})}));break;case 4:if((0,i.assert)(o,"enqueue should have stream controller"),o.isClosed)break;o.controller.enqueue(e.chunk);break;case 3:if((0,i.assert)(o,"close should have stream controller"),o.isClosed)break;o.isClosed=!0,o.controller.close(),this._deleteStreamController(o,t);break;case 5:(0,i.assert)(o,"error should have stream controller"),o.controller.error(u(e.reason)),this._deleteStreamController(o,t);break;case 2:e.success?o.cancelCall.resolve():o.cancelCall.reject(u(e.reason)),this._deleteStreamController(o,t);break;case 1:if(!s)break;new Promise((function(t){t(s.onCancel&&s.onCancel(u(e.reason)))})).then((function(){a.postMessage({sourceName:r,targetName:n,stream:2,streamId:t,success:!0})}),(function(e){a.postMessage({sourceName:r,targetName:n,stream:2,streamId:t,reason:u(e)})})),s.sinkCapability.reject(u(e.reason)),s.isCancelled=!0,delete this.streamSinks[t];break;default:throw new Error("Unexpected stream case")}}},{key:"_deleteStreamController",value:(n=a.default.mark((function e(t,r){return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.allSettled([t.startCall&&t.startCall.promise,t.pullCall&&t.pullCall.promise,t.cancelCall&&t.cancelCall.promise]);case 2:delete this.streamControllers[r];case 3:case"end":return e.stop()}}),e,this)})),l=function(){var e=this,t=arguments;return new Promise((function(r,a){var i=n.apply(e,t);function s(e){o(i,r,a,s,l,"next",e)}function l(e){o(i,r,a,s,l,"throw",e)}s(void 0)}))},function(e,t){return l.apply(this,arguments)})},{key:"destroy",value:function(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}],r&&s(t.prototype,r),e}();t.MessageHandler=c},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(4);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t,r){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,r)}function o(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,l(e,t,"get"))}function s(e,t,r){return function(e,t,r){if(t.set)t.set.call(e,r);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=r}}(e,l(e,t,"set"),r),r}function l(e,t,r){if(!t.has(e))throw new TypeError("attempted to "+r+" private field on non-instance");return t.get(e)}var u=new WeakMap,c=new WeakMap,f=function(){function e(t){var r=t.parsedData,n=t.rawData;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,u,{writable:!0,value:void 0}),i(this,c,{writable:!0,value:void 0}),s(this,u,r),s(this,c,n)}var t,r;return t=e,(r=[{key:"getRaw",value:function(){return o(this,c)}},{key:"get",value:function(e){var t;return null!==(t=o(this,u).get(e))&&void 0!==t?t:null}},{key:"getAll",value:function(){return(0,n.objectFromMap)(o(this,u))}},{key:"has",value:function(e){return o(this,u).has(e)}}])&&a(t.prototype,r),e}();t.Metadata=f},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OptionalContentConfig=void 0;var n=r(4);function a(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l=function e(t,r){s(this,e),this.visible=!0,this.name=t,this.intent=r},u=function(){function e(t){if(s(this,e),this.name=null,this.creator=null,this._order=null,this._groups=new Map,null!==t){this.name=t.name,this.creator=t.creator,this._order=t.order;var r,n=a(t.groups);try{for(n.s();!(r=n.n()).done;){var i=r.value;this._groups.set(i.id,new l(i.name,i.intent))}}catch(e){n.e(e)}finally{n.f()}if("OFF"===t.baseState){var o,u=a(this._groups);try{for(u.s();!(o=u.n()).done;)o.value.visible=!1}catch(e){u.e(e)}finally{u.f()}}var c,f=a(t.on);try{for(f.s();!(c=f.n()).done;){var d=c.value;this._groups.get(d).visible=!0}}catch(e){f.e(e)}finally{f.f()}var h,p=a(t.off);try{for(p.s();!(h=p.n()).done;){var v=h.value;this._groups.get(v).visible=!1}}catch(e){p.e(e)}finally{p.f()}}}var t,r;return t=e,r=[{key:"_evaluateVisibilityExpression",value:function(e){var t=e.length;if(t<2)return!0;for(var r=e[0],a=1;a<t;a++){var i=e[a],o=void 0;if(Array.isArray(i))o=this._evaluateVisibilityExpression(i);else{if(!this._groups.has(i))return(0,n.warn)("Optional content group not found: ".concat(i)),!0;o=this._groups.get(i).visible}switch(r){case"And":if(!o)return!1;break;case"Or":if(o)return!0;break;case"Not":return!o;default:return!0}}return"And"===r}},{key:"isVisible",value:function(e){if(0===this._groups.size)return!0;if(!e)return(0,n.warn)("Optional content group not defined."),!0;if("OCG"===e.type)return this._groups.has(e.id)?this._groups.get(e.id).visible:((0,n.warn)("Optional content group not found: ".concat(e.id)),!0);if("OCMD"===e.type){if(e.expression)return this._evaluateVisibilityExpression(e.expression);if(!e.policy||"AnyOn"===e.policy){var t,r=a(e.ids);try{for(r.s();!(t=r.n()).done;){var i=t.value;if(!this._groups.has(i))return(0,n.warn)("Optional content group not found: ".concat(i)),!0;if(this._groups.get(i).visible)return!0}}catch(e){r.e(e)}finally{r.f()}return!1}if("AllOn"===e.policy){var o,s=a(e.ids);try{for(s.s();!(o=s.n()).done;){var l=o.value;if(!this._groups.has(l))return(0,n.warn)("Optional content group not found: ".concat(l)),!0;if(!this._groups.get(l).visible)return!1}}catch(e){s.e(e)}finally{s.f()}return!0}if("AnyOff"===e.policy){var u,c=a(e.ids);try{for(c.s();!(u=c.n()).done;){var f=u.value;if(!this._groups.has(f))return(0,n.warn)("Optional content group not found: ".concat(f)),!0;if(!this._groups.get(f).visible)return!0}}catch(e){c.e(e)}finally{c.f()}return!1}if("AllOff"===e.policy){var d,h=a(e.ids);try{for(h.s();!(d=h.n()).done;){var p=d.value;if(!this._groups.has(p))return(0,n.warn)("Optional content group not found: ".concat(p)),!0;if(this._groups.get(p).visible)return!1}}catch(e){h.e(e)}finally{h.f()}return!0}return(0,n.warn)("Unknown optional content policy ".concat(e.policy,".")),!0}return(0,n.warn)("Unknown group type ".concat(e.type,".")),!0}},{key:"setVisibility",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this._groups.has(e)?this._groups.get(e).visible=!!t:(0,n.warn)("Optional content group not found: ".concat(e))}},{key:"getOrder",value:function(){return this._groups.size?this._order?this._order.slice():Array.from(this._groups.keys()):null}},{key:"getGroups",value:function(){return this._groups.size>0?(0,n.objectFromMap)(this._groups):null}},{key:"getGroup",value:function(e){return this._groups.get(e)||null}}],r&&o(t.prototype,r),e}();t.OptionalContentConfig=u},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFDataTransportStream=void 0;var n,a=(n=r(2))&&n.__esModule?n:{default:n},i=r(4),o=r(1);function s(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function l(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){s(i,n,a,o,l,"next",e)}function l(e){s(i,n,a,o,l,"throw",e)}o(void 0)}))}}function u(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var p=function(){function e(t,r){var n=this;f(this,e),(0,i.assert)(r,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=t.progressiveDone||!1,this._contentDispositionFilename=t.contentDispositionFilename||null;var a=t.initialData;if((null==a?void 0:a.length)>0){var o=new Uint8Array(a).buffer;this._queuedChunks.push(o)}this._pdfDataRangeTransport=r,this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._contentLength=t.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((function(e,t){n._onReceiveData({begin:e,chunk:t})})),this._pdfDataRangeTransport.addProgressListener((function(e,t){n._onProgress({loaded:e,total:t})})),this._pdfDataRangeTransport.addProgressiveReadListener((function(e){n._onReceiveData({chunk:e})})),this._pdfDataRangeTransport.addProgressiveDoneListener((function(){n._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}return h(e,[{key:"_onReceiveData",value:function(e){var t=new Uint8Array(e.chunk).buffer;if(void 0===e.begin)this._fullRequestReader?this._fullRequestReader._enqueue(t):this._queuedChunks.push(t);else{var r=this._rangeReaders.some((function(r){return r._begin===e.begin&&(r._enqueue(t),!0)}));(0,i.assert)(r,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}},{key:"_progressiveDataLength",get:function(){var e,t;return null!==(e=null===(t=this._fullRequestReader)||void 0===t?void 0:t._loaded)&&void 0!==e?e:0}},{key:"_onProgress",value:function(e){if(void 0===e.total){var t=this._rangeReaders[0];null!=t&&t.onProgress&&t.onProgress({loaded:e.loaded})}else{var r=this._fullRequestReader;null!=r&&r.onProgress&&r.onProgress({loaded:e.loaded,total:e.total})}}},{key:"_onProgressiveDone",value:function(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}},{key:"_removeRangeReader",value:function(e){var t=this._rangeReaders.indexOf(e);t>=0&&this._rangeReaders.splice(t,1)}},{key:"getFullReader",value:function(){(0,i.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");var e=this._queuedChunks;return this._queuedChunks=null,new v(this,e,this._progressiveDone,this._contentDispositionFilename)}},{key:"getRangeReader",value:function(e,t){if(t<=this._progressiveDataLength)return null;var r=new m(this,e,t);return this._pdfDataRangeTransport.requestDataRange(e,t),this._rangeReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e);var t,r=u(this._rangeReaders.slice(0));try{for(r.s();!(t=r.n()).done;)t.value.cancel(e)}catch(e){r.e(e)}finally{r.f()}this._pdfDataRangeTransport.abort()}}]),e}();t.PDFDataTransportStream=p;var v=function(){function e(t,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;f(this,e),this._stream=t,this._done=n||!1,this._filename=(0,o.isPdfFile)(a)?a:null,this._queuedChunks=r||[],this._loaded=0;var i,s=u(this._queuedChunks);try{for(s.s();!(i=s.n()).done;){var l=i.value;this._loaded+=l.byteLength}}catch(e){s.e(e)}finally{s.f()}this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}var t;return h(e,[{key:"_enqueue",value:function(e){this._done||(this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunks.push(e),this._loaded+=e.byteLength)}},{key:"headersReady",get:function(){return this._headersReady}},{key:"filename",get:function(){return this._filename}},{key:"isRangeSupported",get:function(){return this._stream._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._stream._isStreamingSupported}},{key:"contentLength",get:function(){return this._stream._contentLength}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(this._queuedChunks.length>0)){e.next=3;break}return t=this._queuedChunks.shift(),e.abrupt("return",{value:t,done:!1});case 3:if(!this._done){e.next=5;break}return e.abrupt("return",{value:void 0,done:!0});case 5:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 8:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._done=!0;var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0}},{key:"progressiveDone",value:function(){this._done||(this._done=!0)}}]),e}(),m=function(){function e(t,r,n){f(this,e),this._stream=t,this._begin=r,this._end=n,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}var t;return h(e,[{key:"_enqueue",value:function(e){if(!this._done){if(0===this._requests.length)this._queuedChunk=e;else{this._requests.shift().resolve({value:e,done:!1});var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}},{key:"isStreamingSupported",get:function(){return!1}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._queuedChunk){e.next=4;break}return t=this._queuedChunk,this._queuedChunk=null,e.abrupt("return",{value:t,done:!1});case 4:if(!this._done){e.next=6;break}return e.abrupt("return",{value:void 0,done:!0});case 6:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 9:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._done=!0;var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0,this._stream._removeRangeReader(this)}}]),e}()},(e,t)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.XfaText=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,a;return t=e,a=[{key:"textContent",value:function(t){var n=[],a={items:n,styles:Object.create(null)};return function t(a){var i;if(a){var o=null,s=a.name;if("#text"===s)o=a.value;else{if(!e.shouldBuildText(s))return;null!=a&&null!==(i=a.attributes)&&void 0!==i&&i.textContent?o=a.attributes.textContent:a.value&&(o=a.value)}if(null!==o&&n.push({str:o}),a.children){var l,u=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,i=function(){};return{s:i,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}(a.children);try{for(u.s();!(l=u.n()).done;)t(l.value)}catch(e){u.e(e)}finally{u.f()}}}}(t),a}},{key:"shouldBuildText",value:function(e){return!("textarea"===e||"input"===e||"option"===e||"select"===e)}}],null&&n(t.prototype,null),a&&n(t,a),e}();t.XfaText=a},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.AnnotationLayer=void 0;var a=r(4),i=r(1),o=r(139),s=r(149),l=r(150);function u(e,t,r){return function(e,t){if(e!==t)throw new TypeError("Private static access of wrong provenance")}(e,t),r}function c(e,t,r){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(n){var a=Object.getOwnPropertyDescriptor(n,t);return a.get?a.get.call(r):a.value}},c(e,t,r||e)}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=y(e);if(t){var a=y(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return v(this,r)}}function v(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return m(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}function g(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||_(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){if(e){if("string"==typeof e)return S(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?S(e,t):void 0}}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function A(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function k(e,t,r){return t&&A(e.prototype,t),r&&A(e,r),e}var x=1e3,E=new WeakSet,P=function(){function e(){w(this,e)}return k(e,null,[{key:"create",value:function(e){switch(e.data.annotationType){case a.AnnotationType.LINK:return new T(e);case a.AnnotationType.TEXT:return new R(e);case a.AnnotationType.WIDGET:switch(e.data.fieldType){case"Tx":return new I(e);case"Btn":return e.data.radioButton?new D(e):e.data.checkBox?new F(e):new L(e);case"Ch":return new M(e)}return new O(e);case a.AnnotationType.POPUP:return new N(e);case a.AnnotationType.FREETEXT:return new B(e);case a.AnnotationType.LINE:return new U(e);case a.AnnotationType.SQUARE:return new q(e);case a.AnnotationType.CIRCLE:return new z(e);case a.AnnotationType.POLYLINE:return new W(e);case a.AnnotationType.CARET:return new H(e);case a.AnnotationType.INK:return new V(e);case a.AnnotationType.POLYGON:return new G(e);case a.AnnotationType.HIGHLIGHT:return new Y(e);case a.AnnotationType.UNDERLINE:return new Z(e);case a.AnnotationType.SQUIGGLY:return new X(e);case a.AnnotationType.STRIKEOUT:return new K(e);case a.AnnotationType.STAMP:return new J(e);case a.AnnotationType.FILEATTACHMENT:return new Q(e);default:return new C(e)}}}]),e}(),C=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.isRenderable,a=void 0!==n&&n,i=r.ignoreBorder,o=void 0!==i&&i,s=r.createQuadrilaterals,l=void 0!==s&&s;w(this,e),this.isRenderable=a,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderForms=t.renderForms,this.svgFactory=t.svgFactory,this.annotationStorage=t.annotationStorage,this.enableScripting=t.enableScripting,this.hasJSActions=t.hasJSActions,this._fieldObjects=t.fieldObjects,this._mouseState=t.mouseState,a&&(this.container=this._createContainer(o)),l&&(this.quadrilaterals=this._createQuadrilaterals(o))}return k(e,[{key:"_createContainer",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.data,r=this.page,n=this.viewport,i=document.createElement("section"),o=t.rect[2]-t.rect[0],s=t.rect[3]-t.rect[1];i.setAttribute("data-annotation-id",t.id);var l=a.Util.normalizeRect([t.rect[0],r.view[3]-t.rect[1]+r.view[1],t.rect[2],r.view[3]-t.rect[3]+r.view[1]]);if(t.hasOwnCanvas){var u=n.transform.slice(),c=a.Util.singularValueDecompose2dScale(u),f=b(c,2),d=f[0],h=f[1];o=Math.ceil(o*d),s=Math.ceil(s*h),l[0]*=d,l[1]*=h;for(var p=0;p<4;p++)u[p]=Math.sign(u[p]);i.style.transform="matrix(".concat(u.join(","),")")}else i.style.transform="matrix(".concat(n.transform.join(","),")");if(i.style.transformOrigin="".concat(-l[0],"px ").concat(-l[1],"px"),!e&&t.borderStyle.width>0){i.style.borderWidth="".concat(t.borderStyle.width,"px"),t.borderStyle.style!==a.AnnotationBorderStyleType.UNDERLINE&&(o-=2*t.borderStyle.width,s-=2*t.borderStyle.width);var v=t.borderStyle.horizontalCornerRadius,m=t.borderStyle.verticalCornerRadius;if(v>0||m>0){var y="".concat(v,"px / ").concat(m,"px");i.style.borderRadius=y}switch(t.borderStyle.style){case a.AnnotationBorderStyleType.SOLID:i.style.borderStyle="solid";break;case a.AnnotationBorderStyleType.DASHED:i.style.borderStyle="dashed";break;case a.AnnotationBorderStyleType.BEVELED:(0,a.warn)("Unimplemented border style: beveled");break;case a.AnnotationBorderStyleType.INSET:(0,a.warn)("Unimplemented border style: inset");break;case a.AnnotationBorderStyleType.UNDERLINE:i.style.borderBottomStyle="solid"}var g=t.borderColor||t.color||null;g?i.style.borderColor=a.Util.makeHexColor(0|t.color[0],0|t.color[1],0|t.color[2]):i.style.borderWidth=0}return i.style.left="".concat(l[0],"px"),i.style.top="".concat(l[1],"px"),t.hasOwnCanvas?i.style.width=i.style.height="auto":(i.style.width="".concat(o,"px"),i.style.height="".concat(s,"px")),i}},{key:"_createQuadrilaterals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.data.quadPoints)return null;var t,r=[],n=this.data.rect,a=g(this.data.quadPoints);try{for(a.s();!(t=a.n()).done;){var i=t.value;this.data.rect=[i[2].x,i[2].y,i[1].x,i[1].y],r.push(this._createContainer(e))}}catch(e){a.e(e)}finally{a.f()}return this.data.rect=n,r}},{key:"_createPopup",value:function(e,t){var r=this.container;this.quadrilaterals&&(e=e||this.quadrilaterals,r=this.quadrilaterals[0]),e||((e=document.createElement("div")).style.height=r.style.height,e.style.width=r.style.width,r.appendChild(e));var n=new j({container:r,trigger:e,color:t.color,titleObj:t.titleObj,modificationDate:t.modificationDate,contentsObj:t.contentsObj,richText:t.richText,hideWrapper:!0}).render();n.style.left=r.style.width,r.appendChild(n)}},{key:"_renderQuadrilaterals",value:function(e){var t,r=g(this.quadrilaterals);try{for(r.s();!(t=r.n()).done;)t.value.className=e}catch(e){r.e(e)}finally{r.f()}return this.quadrilaterals}},{key:"render",value:function(){(0,a.unreachable)("Abstract method `AnnotationElement.render` called")}},{key:"_getElementsByName",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=[];if(this._fieldObjects){var n=this._fieldObjects[e];if(n){var i,o=g(n);try{for(o.s();!(i=o.n()).done;){var s=i.value,l=s.page,u=s.id,c=s.exportValues;if(-1!==l&&u!==t){var f="string"==typeof c?c:null,d=document.getElementById(u);!d||E.has(d)?r.push({id:u,exportValue:f,domElement:d}):(0,a.warn)("_getElementsByName - element not allowed: ".concat(u))}}}catch(e){o.e(e)}finally{o.f()}}return r}var h,p=g(document.getElementsByName(e));try{for(p.s();!(h=p.n()).done;){var v=h.value,m=v.id,y=v.exportValue;m!==t&&E.has(v)&&r.push({id:m,exportValue:y,domElement:v})}}catch(e){p.e(e)}finally{p.f()}return r}}],[{key:"platform",get:function(){var e="undefined"!=typeof navigator?navigator.platform:"";return(0,a.shadow)(this,"platform",{isWin:e.includes("Win"),isMac:e.includes("Mac")})}}]),e}(),T=function(e){d(r,e);var t=p(r);function r(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;w(this,r);var a=!!(e.data.url||e.data.dest||e.data.action||e.data.isTooltipOnly||e.data.resetForm||e.data.actions&&(e.data.actions.Action||e.data.actions["Mouse Up"]||e.data.actions["Mouse Down"]));return t.call(this,e,{isRenderable:a,ignoreBorder:!(null==n||!n.ignoreBorder),createQuadrilaterals:!0})}return k(r,[{key:"render",value:function(){var e,t=this.data,r=this.linkService,n=document.createElement("a");if(t.url)r.addLinkAttributes||(0,a.warn)("LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance."),null===(e=r.addLinkAttributes)||void 0===e||e.call(r,n,t.url,t.newWindow);else if(t.action)this._bindNamedAction(n,t.action);else if(t.dest)this._bindLink(n,t.dest);else{var i=!1;t.actions&&(t.actions.Action||t.actions["Mouse Up"]||t.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(i=!0,this._bindJSAction(n,t)),t.resetForm?this._bindResetFormAction(n,t.resetForm):i||this._bindLink(n,"")}return this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map((function(e,t){var r=0===t?n:n.cloneNode();return e.appendChild(r),e})):(this.container.className="linkAnnotation",this.container.appendChild(n),this.container)}},{key:"_bindLink",value:function(e,t){var r=this;e.href=this.linkService.getDestinationHash(t),e.onclick=function(){return t&&r.linkService.goToDestination(t),!1},(t||""===t)&&(e.className="internalLink")}},{key:"_bindNamedAction",value:function(e,t){var r=this;e.href=this.linkService.getAnchorUrl(""),e.onclick=function(){return r.linkService.executeNamedAction(t),!1},e.className="internalLink"}},{key:"_bindJSAction",value:function(e,t){var r=this;e.href=this.linkService.getAnchorUrl("");for(var n=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]),a=function(){var a=o[i],s=n.get(a);if(!s)return"continue";e[s]=function(){var e;return null===(e=r.linkService.eventBus)||void 0===e||e.dispatch("dispatcheventinsandbox",{source:r,detail:{id:t.id,name:a}}),!1}},i=0,o=Object.keys(t.actions);i<o.length;i++)a();e.onclick||(e.onclick=function(){return!1}),e.className="internalLink"}},{key:"_bindResetFormAction",value:function(e,t){var r=this,n=e.onclick;if(n||(e.href=this.linkService.getAnchorUrl("")),e.className="internalLink",!this._fieldObjects)return(0,a.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),void(n||(e.onclick=function(){return!1}));e.onclick=function(){n&&n();var e,a=t.fields,i=t.refs,o=t.include,s=[];if(0!==a.length||0!==i.length){var l,u=new Set(i),c=g(a);try{for(c.s();!(l=c.n()).done;){var f,d=l.value,h=g(r._fieldObjects[d]||[]);try{for(h.s();!(f=h.n()).done;){var p=f.value.id;u.add(p)}}catch(e){h.e(e)}finally{h.f()}}}catch(e){c.e(e)}finally{c.f()}for(var v=0,m=Object.values(r._fieldObjects);v<m.length;v++){var y,b=g(m[v]);try{for(b.s();!(y=b.n()).done;){var w=y.value;u.has(w.id)===o&&s.push(w)}}catch(e){b.e(e)}finally{b.f()}}}else for(var A=0,k=Object.values(r._fieldObjects);A<k.length;A++){var x=k[A];s.push.apply(s,function(e){if(Array.isArray(e))return S(e)}(e=x)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||_(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())}for(var P,C=r.annotationStorage,T=[],R=0,O=s;R<O.length;R++){var I=O[R],F=I.id;switch(T.push(F),I.type){case"text":var D=I.defaultValue||"";C.setValue(F,{value:D,valueAsString:D});break;case"checkbox":case"radiobutton":var L=I.defaultValue===I.exportValues;C.setValue(F,{value:L});break;case"combobox":case"listbox":var M=I.defaultValue||"";C.setValue(F,{value:M});break;default:continue}var N=document.getElementById(F);N&&E.has(N)&&N.dispatchEvent(new Event("resetform"))}return r.enableScripting&&(null===(P=r.linkService.eventBus)||void 0===P||P.dispatch("dispatcheventinsandbox",{source:r,detail:{id:"app",ids:T,name:"ResetForm"}})),!1}}}]),r}(C),R=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o})}return k(r,[{key:"render",value:function(){this.container.className="textAnnotation";var e=document.createElement("img");return e.style.height=this.container.style.height,e.style.width=this.container.style.width,e.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",e.alt="[{{type}} Annotation]",e.dataset.l10nId="text_annotation_type",e.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(e,this.data),this.container.appendChild(e),this.container}}]),r}(C),O=function(e){d(r,e);var t=p(r);function r(){return w(this,r),t.apply(this,arguments)}return k(r,[{key:"render",value:function(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}},{key:"_getKeyModifier",value:function(e){var t=C.platform,r=t.isWin,n=t.isMac;return r&&e.ctrlKey||n&&e.metaKey}},{key:"_setEventListener",value:function(e,t,r,n){var a=this;t.includes("mouse")?e.addEventListener(t,(function(e){var t;null===(t=a.linkService.eventBus)||void 0===t||t.dispatch("dispatcheventinsandbox",{source:a,detail:{id:a.data.id,name:r,value:n(e),shift:e.shiftKey,modifier:a._getKeyModifier(e)}})})):e.addEventListener(t,(function(e){var t;null===(t=a.linkService.eventBus)||void 0===t||t.dispatch("dispatcheventinsandbox",{source:a,detail:{id:a.data.id,name:r,value:e.target.checked}})}))}},{key:"_setEventListeners",value:function(e,t,r){var n,a=g(t);try{for(a.s();!(n=a.n()).done;){var i,o=b(n.value,2),s=o[0],l=o[1];("Action"===l||null!==(i=this.data.actions)&&void 0!==i&&i[l])&&this._setEventListener(e,s,l,r)}}catch(e){a.e(e)}finally{a.f()}}},{key:"_setBackgroundColor",value:function(e){var t=this.data.backgroundColor||null;e.style.backgroundColor=null===t?"transparent":a.Util.makeHexColor(t[0],t[1],t[2])}},{key:"_dispatchEventFromSandbox",value:function(e,t){for(var r=this,n=function(e,t,r){var n=r.detail[e];r.target.style[t]=s.ColorConverters["".concat(n[0],"_HTML")](n.slice(1))},a={display:function(e){var t=e.detail.display%2==1;e.target.style.visibility=t?"hidden":"visible",r.annotationStorage.setValue(r.data.id,{hidden:t,print:0===e.detail.display||3===e.detail.display})},print:function(e){r.annotationStorage.setValue(r.data.id,{print:e.detail.print})},hidden:function(e){e.target.style.visibility=e.detail.hidden?"hidden":"visible",r.annotationStorage.setValue(r.data.id,{hidden:e.detail.hidden})},focus:function(e){setTimeout((function(){return e.target.focus({preventScroll:!1})}),0)},userName:function(e){e.target.title=e.detail.userName},readonly:function(e){e.detail.readonly?e.target.setAttribute("readonly",""):e.target.removeAttribute("readonly")},required:function(e){e.detail.required?e.target.setAttribute("required",""):e.target.removeAttribute("required")},bgColor:function(e){n("bgColor","backgroundColor",e)},fillColor:function(e){n("fillColor","backgroundColor",e)},fgColor:function(e){n("fgColor","color",e)},textColor:function(e){n("textColor","color",e)},borderColor:function(e){n("borderColor","borderColor",e)},strokeColor:function(e){n("strokeColor","borderColor",e)}},i=0,o=Object.keys(t.detail);i<o.length;i++){var l=o[i],u=e[l]||a[l];u&&u(t)}}}]),r}(C),I=function(e){d(r,e);var t=p(r);function r(e){w(this,r);var n=e.renderForms||!e.data.hasAppearance&&!!e.data.fieldValue;return t.call(this,e,{isRenderable:n})}return k(r,[{key:"setPropertyOnSiblings",value:function(e,t,r,n){var a,i=this.annotationStorage,o=g(this._getElementsByName(e.name,e.id));try{for(o.s();!(a=o.n()).done;){var s=a.value;s.domElement&&(s.domElement[t]=r),i.setValue(s.id,f({},n,r))}}catch(e){o.e(e)}finally{o.f()}}},{key:"render",value:function(){var e=this,t=this.annotationStorage,r=this.data.id;this.container.className="textWidgetAnnotation";var n=null;if(this.renderForms){var a=t.getValue(r,{value:this.data.fieldValue,valueAsString:this.data.fieldValue}),i=a.valueAsString||a.value||"",o={userValue:null,formattedValue:null,beforeInputSelectionRange:null,beforeInputValue:null};this.data.multiLine?(n=document.createElement("textarea")).textContent=i:((n=document.createElement("input")).type="text",n.setAttribute("value",i)),E.add(n),n.disabled=this.data.readOnly,n.name=this.data.fieldName,n.tabIndex=x,o.userValue=i,n.setAttribute("id",r),n.addEventListener("input",(function(a){t.setValue(r,{value:a.target.value}),e.setPropertyOnSiblings(n,"value",a.target.value,"value")})),n.addEventListener("resetform",(function(t){var r=e.data.defaultFieldValue||"";n.value=o.userValue=r,delete o.formattedValue}));var s=function(e){o.formattedValue&&(e.target.value=o.formattedValue),e.target.scrollLeft=0,o.beforeInputSelectionRange=null};if(this.enableScripting&&this.hasJSActions){var l;n.addEventListener("focus",(function(e){o.userValue&&(e.target.value=o.userValue)})),n.addEventListener("updatefromsandbox",(function(n){var a={value:function(e){o.userValue=e.detail.value||"",t.setValue(r,{value:o.userValue.toString()}),o.formattedValue||(e.target.value=o.userValue)},valueAsString:function(e){o.formattedValue=e.detail.valueAsString||"",e.target!==document.activeElement&&(e.target.value=o.formattedValue),t.setValue(r,{formattedValue:o.formattedValue})},selRange:function(e){var t=b(e.detail.selRange,2),r=t[0],n=t[1];r>=0&&n<e.target.value.length&&e.target.setSelectionRange(r,n)}};e._dispatchEventFromSandbox(a,n)})),n.addEventListener("keydown",(function(t){var n;o.beforeInputValue=t.target.value;var a=-1;"Escape"===t.key?a=0:"Enter"===t.key?a=2:"Tab"===t.key&&(a=3),-1!==a&&(o.userValue=t.target.value,null===(n=e.linkService.eventBus)||void 0===n||n.dispatch("dispatcheventinsandbox",{source:e,detail:{id:r,name:"Keystroke",value:t.target.value,willCommit:!0,commitKey:a,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}))}));var u=s;s=null,n.addEventListener("blur",(function(t){var n;e._mouseState.isDown&&(o.userValue=t.target.value,null===(n=e.linkService.eventBus)||void 0===n||n.dispatch("dispatcheventinsandbox",{source:e,detail:{id:r,name:"Keystroke",value:t.target.value,willCommit:!0,commitKey:1,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}})),u(t)})),n.addEventListener("mousedown",(function(e){o.beforeInputValue=e.target.value,o.beforeInputSelectionRange=null})),n.addEventListener("keyup",(function(e){e.target.selectionStart===e.target.selectionEnd&&(o.beforeInputSelectionRange=null)})),n.addEventListener("select",(function(e){o.beforeInputSelectionRange=[e.target.selectionStart,e.target.selectionEnd]})),null!==(l=this.data.actions)&&void 0!==l&&l.Keystroke&&n.addEventListener("input",(function(t){var n,a=-1,i=-1;if(o.beforeInputSelectionRange){var s=b(o.beforeInputSelectionRange,2);a=s[0],i=s[1]}null===(n=e.linkService.eventBus)||void 0===n||n.dispatch("dispatcheventinsandbox",{source:e,detail:{id:r,name:"Keystroke",value:o.beforeInputValue,change:t.data,willCommit:!1,selStart:a,selEnd:i}})})),this._setEventListeners(n,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(function(e){return e.target.value}))}if(s&&n.addEventListener("blur",s),null!==this.data.maxLen&&(n.maxLength=this.data.maxLen),this.data.comb){var c=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;n.classList.add("comb"),n.style.letterSpacing="calc(".concat(c,"px - 1ch)")}}else(n=document.createElement("div")).textContent=this.data.fieldValue,n.style.verticalAlign="middle",n.style.display="table-cell";return this._setTextStyle(n),this._setBackgroundColor(n),this.container.appendChild(n),this.container}},{key:"_setTextStyle",value:function(e){var t=this.data.defaultAppearanceData,r=t.fontSize,n=t.fontColor,i=e.style;r&&(i.fontSize="".concat(r,"px")),i.color=a.Util.makeHexColor(n[0],n[1],n[2]),null!==this.data.textAlignment&&(i.textAlign=["left","center","right"][this.data.textAlignment])}}]),r}(O),F=function(e){d(r,e);var t=p(r);function r(e){return w(this,r),t.call(this,e,{isRenderable:e.renderForms})}return k(r,[{key:"render",value:function(){var e=this,t=this.annotationStorage,r=this.data,n=r.id,a=t.getValue(n,{value:r.exportValue===r.fieldValue}).value;"string"==typeof a&&(a="Off"!==a,t.setValue(n,{value:a})),this.container.className="buttonWidgetAnnotation checkBox";var i=document.createElement("input");return E.add(i),i.disabled=r.readOnly,i.type="checkbox",i.name=r.fieldName,a&&i.setAttribute("checked",!0),i.setAttribute("id",n),i.setAttribute("exportValue",r.exportValue),i.tabIndex=x,i.addEventListener("change",(function(a){var i,o=a.target,s=o.name,l=o.checked,u=g(e._getElementsByName(s,n));try{for(u.s();!(i=u.n()).done;){var c=i.value,f=l&&c.exportValue===r.exportValue;c.domElement&&(c.domElement.checked=f),t.setValue(c.id,{value:f})}}catch(e){u.e(e)}finally{u.f()}t.setValue(n,{value:l})})),i.addEventListener("resetform",(function(e){var t=r.defaultFieldValue||"Off";e.target.checked=t===r.exportValue})),this.enableScripting&&this.hasJSActions&&(i.addEventListener("updatefromsandbox",(function(r){var a={value:function(e){e.target.checked="Off"!==e.detail.value,t.setValue(n,{value:e.target.checked})}};e._dispatchEventFromSandbox(a,r)})),this._setEventListeners(i,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(function(e){return e.target.checked}))),this._setBackgroundColor(i),this.container.appendChild(i),this.container}}]),r}(O),D=function(e){d(r,e);var t=p(r);function r(e){return w(this,r),t.call(this,e,{isRenderable:e.renderForms})}return k(r,[{key:"render",value:function(){var e=this;this.container.className="buttonWidgetAnnotation radioButton";var t=this.annotationStorage,r=this.data,n=r.id,a=t.getValue(n,{value:r.fieldValue===r.buttonValue}).value;"string"==typeof a&&(a=a!==r.buttonValue,t.setValue(n,{value:a}));var i=document.createElement("input");if(E.add(i),i.disabled=r.readOnly,i.type="radio",i.name=r.fieldName,a&&i.setAttribute("checked",!0),i.setAttribute("id",n),i.tabIndex=x,i.addEventListener("change",(function(r){var a,i=r.target,o=i.name,s=i.checked,l=g(e._getElementsByName(o,n));try{for(l.s();!(a=l.n()).done;){var u=a.value;t.setValue(u.id,{value:!1})}}catch(e){l.e(e)}finally{l.f()}t.setValue(n,{value:s})})),i.addEventListener("resetform",(function(e){var t=r.defaultFieldValue;e.target.checked=null!=t&&t===r.buttonValue})),this.enableScripting&&this.hasJSActions){var o=r.buttonValue;i.addEventListener("updatefromsandbox",(function(r){var a={value:function(r){var a,i=o===r.detail.value,s=g(e._getElementsByName(r.target.name));try{for(s.s();!(a=s.n()).done;){var l=a.value,u=i&&l.id===n;l.domElement&&(l.domElement.checked=u),t.setValue(l.id,{value:u})}}catch(e){s.e(e)}finally{s.f()}}};e._dispatchEventFromSandbox(a,r)})),this._setEventListeners(i,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(function(e){return e.target.checked}))}return this._setBackgroundColor(i),this.container.appendChild(i),this.container}}]),r}(O),L=function(e){d(r,e);var t=p(r);function r(e){return w(this,r),t.call(this,e,{ignoreBorder:e.data.hasAppearance})}return k(r,[{key:"render",value:function(){var e=c(y(r.prototype),"render",this).call(this);return e.className="buttonWidgetAnnotation pushButton",this.data.alternativeText&&(e.title=this.data.alternativeText),e}}]),r}(T),M=function(e){d(r,e);var t=p(r);function r(e){return w(this,r),t.call(this,e,{isRenderable:e.renderForms})}return k(r,[{key:"render",value:function(){var e=this;this.container.className="choiceWidgetAnnotation";var t=this.annotationStorage,r=this.data.id;t.getValue(r,{value:this.data.fieldValue.length>0?this.data.fieldValue[0]:void 0});var n=this.data.defaultAppearanceData.fontSize;n||(n=9);var a="calc(".concat(n,"px * var(--zoom-factor))"),i=document.createElement("select");E.add(i),i.disabled=this.data.readOnly,i.name=this.data.fieldName,i.setAttribute("id",r),i.tabIndex=x,i.style.fontSize="".concat(n,"px"),this.data.combo||(i.size=this.data.options.length,this.data.multiSelect&&(i.multiple=!0)),i.addEventListener("resetform",(function(t){var r,n=e.data.defaultFieldValue,a=g(i.options);try{for(a.s();!(r=a.n()).done;){var o=r.value;o.selected=o.value===n}}catch(e){a.e(e)}finally{a.f()}}));var o,s=g(this.data.options);try{for(s.s();!(o=s.n()).done;){var l=o.value,u=document.createElement("option");u.textContent=l.displayValue,u.value=l.exportValue,this.data.combo&&(u.style.fontSize=a),this.data.fieldValue.includes(l.exportValue)&&u.setAttribute("selected",!0),i.appendChild(u)}}catch(e){s.e(e)}finally{s.f()}var c=function(e,t){var r=t?"value":"textContent",n=e.target.options;return e.target.multiple?Array.prototype.filter.call(n,(function(e){return e.selected})).map((function(e){return e[r]})):-1===n.selectedIndex?null:n[n.selectedIndex][r]},f=function(e){var t=e.target.options;return Array.prototype.map.call(t,(function(e){return{displayValue:e.textContent,exportValue:e.value}}))};return this.enableScripting&&this.hasJSActions?(i.addEventListener("updatefromsandbox",(function(n){var a={value:function(e){var n,a=e.detail.value,o=new Set(Array.isArray(a)?a:[a]),s=g(i.options);try{for(s.s();!(n=s.n()).done;){var l=n.value;l.selected=o.has(l.value)}}catch(e){s.e(e)}finally{s.f()}t.setValue(r,{value:c(e,!0)})},multipleSelection:function(e){i.multiple=!0},remove:function(e){var n=i.options,a=e.detail.remove;if(n[a].selected=!1,i.remove(a),n.length>0){var o=Array.prototype.findIndex.call(n,(function(e){return e.selected}));-1===o&&(n[0].selected=!0)}t.setValue(r,{value:c(e,!0),items:f(e)})},clear:function(e){for(;0!==i.length;)i.remove(0);t.setValue(r,{value:null,items:[]})},insert:function(e){var n=e.detail.insert,a=n.index,o=n.displayValue,s=n.exportValue,l=document.createElement("option");l.textContent=o,l.value=s,i.insertBefore(l,i.children[a]),t.setValue(r,{value:c(e,!0),items:f(e)})},items:function(e){for(var n=e.detail.items;0!==i.length;)i.remove(0);var a,o=g(n);try{for(o.s();!(a=o.n()).done;){var s=a.value,l=s.displayValue,u=s.exportValue,d=document.createElement("option");d.textContent=l,d.value=u,i.appendChild(d)}}catch(e){o.e(e)}finally{o.f()}i.options.length>0&&(i.options[0].selected=!0),t.setValue(r,{value:c(e,!0),items:f(e)})},indices:function(e){var n,a=new Set(e.detail.indices),i=g(e.target.options);try{for(i.s();!(n=i.n()).done;){var o=n.value;o.selected=a.has(o.index)}}catch(e){i.e(e)}finally{i.f()}t.setValue(r,{value:c(e,!0)})},editable:function(e){e.target.disabled=!e.detail.editable}};e._dispatchEventFromSandbox(a,n)})),i.addEventListener("input",(function(n){var a,i=c(n,!0),o=c(n,!1);t.setValue(r,{value:i}),null===(a=e.linkService.eventBus)||void 0===a||a.dispatch("dispatcheventinsandbox",{source:e,detail:{id:r,name:"Keystroke",value:o,changeEx:i,willCommit:!0,commitKey:1,keyDown:!1}})})),this._setEventListeners(i,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"]],(function(e){return e.target.checked}))):i.addEventListener("input",(function(e){t.setValue(r,{value:c(e)})})),this._setBackgroundColor(i),this.container.appendChild(i),this.container}}]),r}(O),N=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o})}return k(r,[{key:"render",value:function(){if(this.container.className="popupAnnotation",["Line","Square","Circle","PolyLine","Polygon","Ink"].includes(this.data.parentType))return this.container;var e='[data-annotation-id="'.concat(this.data.parentId,'"]'),t=this.layer.querySelectorAll(e);if(0===t.length)return this.container;var r=new j({container:this.container,trigger:Array.from(t),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),n=this.page,i=a.Util.normalizeRect([this.data.parentRect[0],n.view[3]-this.data.parentRect[1]+n.view[1],this.data.parentRect[2],n.view[3]-this.data.parentRect[3]+n.view[1]]),o=i[0]+this.data.parentRect[2]-this.data.parentRect[0],s=i[1];return this.container.style.transformOrigin="".concat(-o,"px ").concat(-s,"px"),this.container.style.left="".concat(o,"px"),this.container.style.top="".concat(s,"px"),this.container.appendChild(r.render()),this.container}}]),r}(C),j=function(){function e(t){w(this,e),this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.titleObj=t.titleObj,this.modificationDate=t.modificationDate,this.contentsObj=t.contentsObj,this.richText=t.richText,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}return k(e,[{key:"render",value:function(){var e,t,r=document.createElement("div");r.className="popupWrapper",this.hideElement=this.hideWrapper?r:this.container,this.hideElement.hidden=!0;var n=document.createElement("div");n.className="popup";var o=this.color;if(o){var s=.7*(255-o[0])+o[0],u=.7*(255-o[1])+o[1],c=.7*(255-o[2])+o[2];n.style.backgroundColor=a.Util.makeHexColor(0|s,0|u,0|c)}var f=document.createElement("h1");f.dir=this.titleObj.dir,f.textContent=this.titleObj.str,n.appendChild(f);var d=i.PDFDateString.toDateObject(this.modificationDate);if(d){var h=document.createElement("span");h.className="popupDate",h.textContent="{{date}}, {{time}}",h.dataset.l10nId="annotation_date_string",h.dataset.l10nArgs=JSON.stringify({date:d.toLocaleDateString(),time:d.toLocaleTimeString()}),n.appendChild(h)}if(null===(e=this.richText)||void 0===e||!e.str||null!==(t=this.contentsObj)&&void 0!==t&&t.str&&this.contentsObj.str!==this.richText.str){var p=this._formatContents(this.contentsObj);n.appendChild(p)}else l.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:n}),n.lastChild.className="richText popupContent";Array.isArray(this.trigger)||(this.trigger=[this.trigger]);var v,m=g(this.trigger);try{for(m.s();!(v=m.n()).done;){var y=v.value;y.addEventListener("click",this._toggle.bind(this)),y.addEventListener("mouseover",this._show.bind(this,!1)),y.addEventListener("mouseout",this._hide.bind(this,!1))}}catch(e){m.e(e)}finally{m.f()}return n.addEventListener("click",this._hide.bind(this,!0)),r.appendChild(n),r}},{key:"_formatContents",value:function(e){var t=e.str,r=e.dir,n=document.createElement("p");n.className="popupContent",n.dir=r;for(var a=t.split(/(?:\r\n?|\n)/),i=0,o=a.length;i<o;++i){var s=a[i];n.appendChild(document.createTextNode(s)),i<o-1&&n.appendChild(document.createElement("br"))}return n}},{key:"_toggle",value:function(){this.pinned?this._hide(!0):this._show(!0)}},{key:"_show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];e&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex+=1)}},{key:"_hide",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&(this.pinned=!1),this.hideElement.hidden||this.pinned||(this.hideElement.hidden=!0,this.container.style.zIndex-=1)}}]),e}(),B=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),r}(C),U=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){this.container.className="lineAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),a=this.svgFactory.createElement("svg:line");return a.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),a.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),a.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),a.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),a.setAttribute("stroke-width",e.borderStyle.width||1),a.setAttribute("stroke","transparent"),a.setAttribute("fill","transparent"),n.appendChild(a),this.container.append(n),this._createPopup(a,e),this.container}}]),r}(C),q=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){this.container.className="squareAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),a=e.borderStyle.width,i=this.svgFactory.createElement("svg:rect");return i.setAttribute("x",a/2),i.setAttribute("y",a/2),i.setAttribute("width",t-a),i.setAttribute("height",r-a),i.setAttribute("stroke-width",a||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),n.appendChild(i),this.container.append(n),this._createPopup(i,e),this.container}}]),r}(C),z=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){this.container.className="circleAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),a=e.borderStyle.width,i=this.svgFactory.createElement("svg:ellipse");return i.setAttribute("cx",t/2),i.setAttribute("cy",r/2),i.setAttribute("rx",t/2-a/2),i.setAttribute("ry",r/2-a/2),i.setAttribute("stroke-width",a||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),n.appendChild(i),this.container.append(n),this._createPopup(i,e),this.container}}]),r}(C),W=function(e){d(r,e);var t=p(r);function r(e){var n,a,i,o;w(this,r);var s=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return(o=t.call(this,e,{isRenderable:s,ignoreBorder:!0})).containerClassName="polylineAnnotation",o.svgElementName="svg:polyline",o}return k(r,[{key:"render",value:function(){this.container.className=this.containerClassName;var e,t=this.data,r=t.rect[2]-t.rect[0],n=t.rect[3]-t.rect[1],a=this.svgFactory.create(r,n),i=[],o=g(t.vertices);try{for(o.s();!(e=o.n()).done;){var s=e.value,l=s.x-t.rect[0],u=t.rect[3]-s.y;i.push(l+","+u)}}catch(e){o.e(e)}finally{o.f()}i=i.join(" ");var c=this.svgFactory.createElement(this.svgElementName);return c.setAttribute("points",i),c.setAttribute("stroke-width",t.borderStyle.width||1),c.setAttribute("stroke","transparent"),c.setAttribute("fill","transparent"),a.appendChild(c),this.container.append(a),this._createPopup(c,t),this.container}}]),r}(C),G=function(e){d(r,e);var t=p(r);function r(e){var n;return w(this,r),(n=t.call(this,e)).containerClassName="polygonAnnotation",n.svgElementName="svg:polygon",n}return r}(W),H=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),r}(C),V=function(e){d(r,e);var t=p(r);function r(e){var n,a,i,o;w(this,r);var s=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return(o=t.call(this,e,{isRenderable:s,ignoreBorder:!0})).containerClassName="inkAnnotation",o.svgElementName="svg:polyline",o}return k(r,[{key:"render",value:function(){this.container.className=this.containerClassName;var e,t=this.data,r=t.rect[2]-t.rect[0],n=t.rect[3]-t.rect[1],a=this.svgFactory.create(r,n),i=g(t.inkLists);try{for(i.s();!(e=i.n()).done;){var o,s=e.value,l=[],u=g(s);try{for(u.s();!(o=u.n()).done;){var c=o.value,f=c.x-t.rect[0],d=t.rect[3]-c.y;l.push("".concat(f,",").concat(d))}}catch(e){u.e(e)}finally{u.f()}l=l.join(" ");var h=this.svgFactory.createElement(this.svgElementName);h.setAttribute("points",l),h.setAttribute("stroke-width",t.borderStyle.width||1),h.setAttribute("stroke","transparent"),h.setAttribute("fill","transparent"),this._createPopup(h,t),a.appendChild(h)}}catch(e){i.e(e)}finally{i.f()}return this.container.append(a),this.container}}]),r}(C),Y=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0,createQuadrilaterals:!0})}return k(r,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.className="highlightAnnotation",this.container)}}]),r}(C),Z=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0,createQuadrilaterals:!0})}return k(r,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.className="underlineAnnotation",this.container)}}]),r}(C),X=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0,createQuadrilaterals:!0})}return k(r,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.className="squigglyAnnotation",this.container)}}]),r}(C),K=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0,createQuadrilaterals:!0})}return k(r,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.className="strikeoutAnnotation",this.container)}}]),r}(C),J=function(e){d(r,e);var t=p(r);function r(e){var n,a,i;w(this,r);var o=!!(e.data.hasPopup||null!==(n=e.data.titleObj)&&void 0!==n&&n.str||null!==(a=e.data.contentsObj)&&void 0!==a&&a.str||null!==(i=e.data.richText)&&void 0!==i&&i.str);return t.call(this,e,{isRenderable:o,ignoreBorder:!0})}return k(r,[{key:"render",value:function(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),r}(C),Q=function(e){d(r,e);var t=p(r);function r(e){var n,o;w(this,r);var s=(o=t.call(this,e,{isRenderable:!0})).data.file,l=s.filename,u=s.content;return o.filename=(0,i.getFilenameFromUrl)(l),o.content=u,null===(n=o.linkService.eventBus)||void 0===n||n.dispatch("fileattachmentannotation",{source:m(o),id:(0,a.stringToPDFString)(l),filename:l,content:u}),o}return k(r,[{key:"render",value:function(){var e,t;this.container.className="fileAttachmentAnnotation";var r=document.createElement("div");return r.style.height=this.container.style.height,r.style.width=this.container.style.width,r.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&(null!==(e=this.data.titleObj)&&void 0!==e&&e.str||null!==(t=this.data.contentsObj)&&void 0!==t&&t.str||this.data.richText)&&this._createPopup(r,this.data),this.container.appendChild(r),this.container}},{key:"_download",value:function(){var e;null===(e=this.downloadManager)||void 0===e||e.openOrDownloadData(this.container,this.content,this.filename)}}]),r}(C),$=function(){function e(){w(this,e)}return k(e,null,[{key:"render",value:function(t){var r,n=[],s=[],l=g(t.annotations);try{for(l.s();!(r=l.n()).done;){var c=r.value;c&&(c.annotationType!==a.AnnotationType.POPUP?n.push(c):s.push(c))}}catch(e){l.e(e)}finally{l.f()}s.length&&n.push.apply(n,s);for(var f=t.div,d=0,h=n;d<h.length;d++){var p=h[d],v=P.create({data:p,layer:f,page:t.page,viewport:t.viewport,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderForms:!1!==t.renderForms,svgFactory:new i.DOMSVGFactory,annotationStorage:t.annotationStorage||new o.AnnotationStorage,enableScripting:t.enableScripting,hasJSActions:t.hasJSActions,fieldObjects:t.fieldObjects,mouseState:t.mouseState||{isDown:!1}});if(v.isRenderable){var m=v.render();if(p.hidden&&(m.style.visibility="hidden"),Array.isArray(m)){var y,b=g(m);try{for(b.s();!(y=b.n()).done;){var _=y.value;f.appendChild(_)}}catch(e){b.e(e)}finally{b.f()}}else v instanceof N?f.prepend(m):f.appendChild(m)}}u(this,e,ee).call(this,f,t.annotationCanvasMap)}},{key:"update",value:function(t){var r,n,i,o=t.page,s=t.viewport,l=t.annotations,c=t.annotationCanvasMap,f=t.div,d=s.transform,h="matrix(".concat(d.join(","),")"),p=g(l);try{for(p.s();!(i=p.n()).done;){var v=i.value,m=f.querySelectorAll('[data-annotation-id="'.concat(v.id,'"]'));if(m){var y,b=g(m);try{for(b.s();!(y=b.n()).done;){var _=y.value;if(v.hasOwnCanvas){var S=a.Util.normalizeRect([v.rect[0],o.view[3]-v.rect[1]+o.view[1],v.rect[2],o.view[3]-v.rect[3]+o.view[1]]);if(!n){r=Math.abs(d[0]||d[1]);for(var w=d.slice(),A=0;A<4;A++)w[A]=Math.sign(w[A]);n="matrix(".concat(w.join(","),")")}var k=S[0]*r,x=S[1]*r;_.style.left="".concat(k,"px"),_.style.top="".concat(x,"px"),_.style.transformOrigin="".concat(-k,"px ").concat(-x,"px"),_.style.transform=n}else _.style.transform=h}}catch(e){b.e(e)}finally{b.f()}}}}catch(e){p.e(e)}finally{p.f()}u(this,e,ee).call(this,f,c),f.hidden=!1}}]),e}();function ee(e,t){if(t){var r,n=g(t);try{for(n.s();!(r=n.n()).done;){var a=b(r.value,2),i=a[0],o=a[1],s=e.querySelector('[data-annotation-id="'.concat(i,'"]'));if(s){var l=s.firstChild;"CANVAS"===l.nodeName?s.replaceChild(o,l):s.insertBefore(o,l)}}}catch(e){n.e(e)}finally{n.f()}t.clear()}}t.AnnotationLayer=$},(e,t)=>{"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e){return Math.floor(255*Math.max(0,Math.min(1,e))).toString(16).padStart(2,"0")}Object.defineProperty(t,"__esModule",{value:!0}),t.ColorConverters=void 0;var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"CMYK_G",value:function(e){var t=r(e,4),n=t[0],a=t[1],i=t[2],o=t[3];return["G",1-Math.min(1,.3*n+.59*i+.11*a+o)]}},{key:"G_CMYK",value:function(e){return["CMYK",0,0,0,1-r(e,1)[0]]}},{key:"G_RGB",value:function(e){var t=r(e,1)[0];return["RGB",t,t,t]}},{key:"G_HTML",value:function(e){var t=i(r(e,1)[0]);return"#".concat(t).concat(t).concat(t)}},{key:"RGB_G",value:function(e){var t=r(e,3);return["G",.3*t[0]+.59*t[1]+.11*t[2]]}},{key:"RGB_HTML",value:function(e){var t=r(e,3),n=t[0],a=t[1],o=t[2],s=i(n),l=i(a),u=i(o);return"#".concat(s).concat(l).concat(u)}},{key:"T_HTML",value:function(){return"#00000000"}},{key:"CMYK_RGB",value:function(e){var t=r(e,4),n=t[0],a=t[1],i=t[2],o=t[3];return["RGB",1-Math.min(1,n+o),1-Math.min(1,i+o),1-Math.min(1,a+o)]}},{key:"CMYK_HTML",value:function(e){return this.RGB_HTML(this.CMYK_RGB(e))}},{key:"RGB_CMYK",value:function(e){var t=r(e,3),n=1-t[0],a=1-t[1],i=1-t[2];return["CMYK",n,a,i,Math.min(n,a,i)]}}],null&&a(t.prototype,null),n&&a(t,n),e}();t.ColorConverters=o},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XfaLayer=void 0;var n=r(4),a=r(147);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=s(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){l=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw i}}}}function s(e,t){if(e){if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(e,t):void 0}}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r;return t=e,r=[{key:"setupStorage",value:function(e,t,r,n,a){var i=n.getValue(t,{value:null});switch(r.name){case"textarea":if(null!==i.value&&(e.textContent=i.value),"print"===a)break;e.addEventListener("input",(function(e){n.setValue(t,{value:e.target.value})}));break;case"input":if("radio"===r.attributes.type||"checkbox"===r.attributes.type){if(i.value===r.attributes.xfaOn?e.setAttribute("checked",!0):i.value===r.attributes.xfaOff&&e.removeAttribute("checked"),"print"===a)break;e.addEventListener("change",(function(e){n.setValue(t,{value:e.target.checked?e.target.getAttribute("xfaOn"):e.target.getAttribute("xfaOff")})}))}else{if(null!==i.value&&e.setAttribute("value",i.value),"print"===a)break;e.addEventListener("input",(function(e){n.setValue(t,{value:e.target.value})}))}break;case"select":if(null!==i.value){var s,l=o(r.children);try{for(l.s();!(s=l.n()).done;){var u=s.value;u.attributes.value===i.value&&(u.attributes.selected=!0)}}catch(e){l.e(e)}finally{l.f()}}e.addEventListener("input",(function(e){var r=e.target.options,a=-1===r.selectedIndex?"":r[r.selectedIndex].value;n.setValue(t,{value:a})}))}}},{key:"setAttributes",value:function(e){var t,r=e.html,a=e.element,o=e.storage,s=void 0===o?null:o,l=e.intent,u=e.linkService,c=a.attributes,f=r instanceof HTMLAnchorElement;"radio"===c.type&&(c.name="".concat(c.name,"-").concat(l));for(var d=0,h=Object.entries(c);d<h.length;d++){var p=i(h[d],2),v=p[0],m=p[1];if(null!=m&&"dataId"!==v)if("style"!==v)if("textContent"===v)r.textContent=m;else if("class"===v)m.length&&r.setAttribute(v,m.join(" "));else{if(f&&("href"===v||"newWindow"===v))continue;r.setAttribute(v,m)}else Object.assign(r.style,m)}f&&(u.addLinkAttributes||(0,n.warn)("XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance."),null===(t=u.addLinkAttributes)||void 0===t||t.call(u,r,c.href,c.newWindow)),s&&c.dataId&&this.setupStorage(r,c.dataId,a,s)}},{key:"render",value:function(e){var t=e.annotationStorage,r=e.linkService,n=e.xfaHtml,s=e.intent||"display",l=document.createElement(n.name);n.attributes&&this.setAttributes({html:l,element:n,intent:s,linkService:r});var u=[[n,-1,l]],c=e.div;if(c.appendChild(l),e.viewport){var f="matrix(".concat(e.viewport.transform.join(","),")");c.style.transform=f}"richText"!==s&&c.setAttribute("class","xfaLayer xfaFont");for(var d=[];u.length>0;){var h,p=i(u[u.length-1],3),v=p[0],m=p[1],y=p[2];if(m+1!==v.children.length){var g=v.children[++u[u.length-1][1]];if(null!==g){var b=g.name;if("#text"!==b){var _=void 0;if(_=null!=g&&null!==(h=g.attributes)&&void 0!==h&&h.xmlns?document.createElementNS(g.attributes.xmlns,b):document.createElement(b),y.appendChild(_),g.attributes&&this.setAttributes({html:_,element:g,storage:t,intent:s,linkService:r}),g.children&&g.children.length>0)u.push([g,-1,_]);else if(g.value){var S=document.createTextNode(g.value);a.XfaText.shouldBuildText(b)&&d.push(S),_.appendChild(S)}}else{var w=document.createTextNode(g.value);d.push(w),y.appendChild(w)}}}else u.pop()}var A,k=o(c.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"));try{for(k.s();!(A=k.n()).done;)A.value.setAttribute("readOnly",!0)}catch(e){k.e(e)}finally{k.f()}return{textDivs:d}}},{key:"update",value:function(e){var t="matrix(".concat(e.viewport.transform.join(","),")");e.div.style.transform=t,e.div.hidden=!1}}],null&&u(t.prototype,null),r&&u(t,r),e}();t.XfaLayer=c},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderTextLayer=function(e){var t=new v({textContent:e.textContent,textContentStream:e.textContentStream,container:e.container,viewport:e.viewport,textDivs:e.textDivs,textContentItemsStr:e.textContentItemsStr,enhanceTextSelection:e.enhanceTextSelection});return t._render(e.timeout),t};var n=r(4);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,i=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw i}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var s=30,l=new Map,u=/^\s+$/g;function c(e,t,r,a){var i=document.createElement("span"),o=e._enhanceTextSelection?{angle:0,canvasWidth:0,hasText:""!==t.str,hasEOL:t.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1}:{angle:0,canvasWidth:0,hasText:""!==t.str,hasEOL:t.hasEOL};e._textDivs.push(i);var c=n.Util.transform(e._viewport.transform,t.transform),f=Math.atan2(c[1],c[0]),d=r[t.fontName];d.vertical&&(f+=Math.PI/2);var h,p,v=Math.hypot(c[2],c[3]),m=v*function(e,t){var r=l.get(e);if(r)return r;t.save(),t.font="".concat(s,"px ").concat(e);var n=t.measureText(""),a=n.fontBoundingBoxAscent,i=Math.abs(n.fontBoundingBoxDescent);if(a){t.restore();var o=a/(a+i);return l.set(e,o),o}t.strokeStyle="red",t.clearRect(0,0,s,s),t.strokeText("g",0,0);var u=t.getImageData(0,0,s,s).data;i=0;for(var c=u.length-1-3;c>=0;c-=4)if(u[c]>0){i=Math.ceil(c/4/s);break}t.clearRect(0,0,s,s),t.strokeText("A",0,s),a=0;for(var f=0,d=(u=t.getImageData(0,0,s,s).data).length;f<d;f+=4)if(u[f]>0){a=s-Math.floor(f/4/s);break}if(t.restore(),a){var h=a/(a+i);return l.set(e,h),h}return l.set(e,.8),.8}(d.fontFamily,a);0===f?(h=c[4],p=c[5]-m):(h=c[4]+m*Math.sin(f),p=c[5]-m*Math.cos(f)),i.style.left="".concat(h,"px"),i.style.top="".concat(p,"px"),i.style.fontSize="".concat(v,"px"),i.style.fontFamily=d.fontFamily,i.setAttribute("role","presentation"),i.textContent=t.str,i.dir=t.dir,e._fontInspectorEnabled&&(i.dataset.fontName=t.fontName),0!==f&&(o.angle=f*(180/Math.PI));var y=!1;if(t.str.length>1||e._enhanceTextSelection&&u.test(t.str))y=!0;else if(" "!==t.str&&t.transform[0]!==t.transform[3]){var g=Math.abs(t.transform[0]),b=Math.abs(t.transform[3]);g!==b&&Math.max(g,b)/Math.min(g,b)>1.5&&(y=!0)}if(y&&(d.vertical?o.canvasWidth=t.height*e._viewport.scale:o.canvasWidth=t.width*e._viewport.scale),e._textDivProperties.set(i,o),e._textContentStream&&e._layoutText(i),e._enhanceTextSelection&&o.hasText){var _=1,S=0;0!==f&&(_=Math.cos(f),S=Math.sin(f));var w,A,k=(d.vertical?t.height:t.width)*e._viewport.scale,x=v;0!==f?(w=[_,S,-S,_,h,p],A=n.Util.getAxialAlignedBoundingBox([0,0,k,x],w)):A=[h,p,h+k,p+x],e._bounds.push({left:A[0],top:A[1],right:A[2],bottom:A[3],div:i,size:[k,x],m:w})}}function f(e){if(!e._canceled){var t=e._textDivs,r=e._capability,n=t.length;if(n>1e5)return e._renderingDone=!0,void r.resolve();if(!e._textContentStream)for(var a=0;a<n;a++)e._layoutText(t[a]);e._renderingDone=!0,r.resolve()}}function d(e,t,r){for(var n=0,a=0;a<r;a++){var i=e[t++];i>0&&(n=n?Math.min(i,n):i)}return n}function h(e){for(var t=e._bounds,r=e._viewport,a=function(e,t,r){var n=r.map((function(e,t){return{x1:e.left,y1:e.top,x2:e.right,y2:e.bottom,index:t,x1New:void 0,x2New:void 0}}));p(e,n);var a,o=new Array(r.length),s=i(n);try{for(s.s();!(a=s.n()).done;){var l=a.value,u=l.index;o[u]={left:l.x1New,top:0,right:l.x2New,bottom:0}}}catch(e){s.e(e)}finally{s.f()}r.map((function(t,r){var a=o[r],i=n[r];i.x1=t.top,i.y1=e-a.right,i.x2=t.bottom,i.y2=e-a.left,i.index=r,i.x1New=void 0,i.x2New=void 0})),p(t,n);var c,f=i(n);try{for(f.s();!(c=f.n()).done;){var d=c.value,h=d.index;o[h].top=d.x1New,o[h].bottom=d.x2New}}catch(e){f.e(e)}finally{f.f()}return o}(r.width,r.height,t),o=0;o<a.length;o++){var s=t[o].div,l=e._textDivProperties.get(s);if(0!==l.angle){for(var u=a[o],c=t[o],f=c.m,h=f[0],v=f[1],m=[[0,0],[0,c.size[1]],[c.size[0],0],c.size],y=new Float64Array(64),g=0,b=m.length;g<b;g++){var _=n.Util.applyTransform(m[g],f);y[g+0]=h&&(u.left-_[0])/h,y[g+4]=v&&(u.top-_[1])/v,y[g+8]=h&&(u.right-_[0])/h,y[g+12]=v&&(u.bottom-_[1])/v,y[g+16]=v&&(u.left-_[0])/-v,y[g+20]=h&&(u.top-_[1])/h,y[g+24]=v&&(u.right-_[0])/-v,y[g+28]=h&&(u.bottom-_[1])/h,y[g+32]=h&&(u.left-_[0])/-h,y[g+36]=v&&(u.top-_[1])/-v,y[g+40]=h&&(u.right-_[0])/-h,y[g+44]=v&&(u.bottom-_[1])/-v,y[g+48]=v&&(u.left-_[0])/v,y[g+52]=h&&(u.top-_[1])/-h,y[g+56]=v&&(u.right-_[0])/v,y[g+60]=h&&(u.bottom-_[1])/-h}var S=1+Math.min(Math.abs(h),Math.abs(v));l.paddingLeft=d(y,32,16)/S,l.paddingTop=d(y,48,16)/S,l.paddingRight=d(y,0,16)/S,l.paddingBottom=d(y,16,16)/S,e._textDivProperties.set(s,l)}else l.paddingLeft=t[o].left-a[o].left,l.paddingTop=t[o].top-a[o].top,l.paddingRight=a[o].right-t[o].right,l.paddingBottom=a[o].bottom-t[o].bottom,e._textDivProperties.set(s,l)}}function p(e,t){t.sort((function(e,t){return e.x1-t.x1||e.index-t.index}));var r,n=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}],a=i(t);try{for(a.s();!(r=a.n()).done;){for(var o=r.value,s=0;s<n.length&&n[s].end<=o.y1;)s++;for(var l=n.length-1;l>=0&&n[l].start>=o.y2;)l--;var u=void 0,c=void 0,f=void 0,d=void 0,h=-1/0;for(f=s;f<=l;f++){c=(u=n[f]).boundary;var p;(p=c.x2>o.x1?c.index>o.index?c.x1New:o.x1:void 0===c.x2New?(c.x2+o.x1)/2:c.x2New)>h&&(h=p)}for(o.x1New=h,f=s;f<=l;f++)void 0===(c=(u=n[f]).boundary).x2New?c.x2>o.x1?c.index>o.index&&(c.x2New=c.x2):c.x2New=h:c.x2New>h&&(c.x2New=Math.max(h,c.x2));var v=[],m=null;for(f=s;f<=l;f++){var y=(c=(u=n[f]).boundary).x2>o.x2?c:o;m===y?v[v.length-1].end=u.end:(v.push({start:u.start,end:u.end,boundary:y}),m=y)}for(n[s].start<o.y1&&(v[0].start=o.y1,v.unshift({start:n[s].start,end:o.y1,boundary:n[s].boundary})),o.y2<n[l].end&&(v[v.length-1].end=o.y2,v.push({start:o.y2,end:n[l].end,boundary:n[l].boundary})),f=s;f<=l;f++)if(void 0===(c=(u=n[f]).boundary).x2New){var g=!1;for(d=s-1;!g&&d>=0&&n[d].start>=c.y1;d--)g=n[d].boundary===c;for(d=l+1;!g&&d<n.length&&n[d].end<=c.y2;d++)g=n[d].boundary===c;for(d=0;!g&&d<v.length;d++)g=v[d].boundary===c;g||(c.x2New=h)}Array.prototype.splice.apply(n,[s,l-s+1].concat(v))}}catch(e){a.e(e)}finally{a.f()}for(var b=0,_=n;b<_.length;b++){var S=_[b].boundary;void 0===S.x2New&&(S.x2New=Math.max(e,S.x2))}}var v=function(){function e(t){var r,a=this,i=t.textContent,o=t.textContentStream,s=t.container,l=t.viewport,u=t.textDivs,c=t.textContentItemsStr,f=t.enhanceTextSelection;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._textContent=i,this._textContentStream=o,this._container=s,this._document=s.ownerDocument,this._viewport=l,this._textDivs=u||[],this._textContentItemsStr=c||[],this._enhanceTextSelection=!!f,this._fontInspectorEnabled=!(null===(r=globalThis.FontInspector)||void 0===r||!r.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,n.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally((function(){a._enhanceTextSelection||(a._textDivProperties=null),a._layoutTextCtx&&(a._layoutTextCtx.canvas.width=0,a._layoutTextCtx.canvas.height=0,a._layoutTextCtx=null)})).catch((function(){}))}var t,r;return t=e,r=[{key:"promise",get:function(){return this._capability.promise}},{key:"cancel",value:function(){this._canceled=!0,this._reader&&(this._reader.cancel(new n.AbortException("TextLayer task cancelled.")).catch((function(){})),this._reader=null),null!==this._renderTimer&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))}},{key:"_processItems",value:function(e,t){for(var r=0,n=e.length;r<n;r++)if(void 0!==e[r].str)this._textContentItemsStr.push(e[r].str),c(this,e[r],t,this._layoutTextCtx);else if("beginMarkedContentProps"===e[r].type||"beginMarkedContent"===e[r].type){var a=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),null!==e[r].id&&this._container.setAttribute("id","".concat(e[r].id)),a.appendChild(this._container)}else"endMarkedContent"===e[r].type&&(this._container=this._container.parentNode)}},{key:"_layoutText",value:function(e){var t=this._textDivProperties.get(e),r="";if(0!==t.canvasWidth&&t.hasText){var n=e.style,a=n.fontSize,i=n.fontFamily;a===this._layoutTextLastFontSize&&i===this._layoutTextLastFontFamily||(this._layoutTextCtx.font="".concat(a," ").concat(i),this._layoutTextLastFontSize=a,this._layoutTextLastFontFamily=i);var o=this._layoutTextCtx.measureText(e.textContent).width;if(o>0){var s=t.canvasWidth/o;this._enhanceTextSelection&&(t.scale=s),r="scaleX(".concat(s,")")}}if(0!==t.angle&&(r="rotate(".concat(t.angle,"deg) ").concat(r)),r.length>0&&(this._enhanceTextSelection&&(t.originalTransform=r),e.style.transform=r),t.hasText&&this._container.appendChild(e),t.hasEOL){var l=document.createElement("br");l.setAttribute("role","presentation"),this._container.appendChild(l)}}},{key:"_render",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=(0,n.createPromiseCapability)(),a=Object.create(null),i=this._document.createElement("canvas");if(i.height=i.width=s,i.mozOpaque=!0,this._layoutTextCtx=i.getContext("2d",{alpha:!1}),this._textContent){var o=this._textContent.items,l=this._textContent.styles;this._processItems(o,l),r.resolve()}else{if(!this._textContentStream)throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');var u=function t(){e._reader.read().then((function(n){var i=n.value;n.done?r.resolve():(Object.assign(a,i.styles),e._processItems(i.items,a),t())}),r.reject)};this._reader=this._textContentStream.getReader(),u()}r.promise.then((function(){a=null,t?e._renderTimer=setTimeout((function(){f(e),e._renderTimer=null}),t):f(e)}),this._capability.reject)}},{key:"expandTextDivs",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this._enhanceTextSelection&&this._renderingDone){null!==this._bounds&&(h(this),this._bounds=null);for(var t=[],r=[],n=0,a=this._textDivs.length;n<a;n++){var i=this._textDivs[n],o=this._textDivProperties.get(i);o.hasText&&(e?(t.length=0,r.length=0,o.originalTransform&&t.push(o.originalTransform),o.paddingTop>0?(r.push("".concat(o.paddingTop,"px")),t.push("translateY(".concat(-o.paddingTop,"px)"))):r.push(0),o.paddingRight>0?r.push("".concat(o.paddingRight/o.scale,"px")):r.push(0),o.paddingBottom>0?r.push("".concat(o.paddingBottom,"px")):r.push(0),o.paddingLeft>0?(r.push("".concat(o.paddingLeft/o.scale,"px")),t.push("translateX(".concat(-o.paddingLeft/o.scale,"px)"))):r.push(0),i.style.padding=r.join(" "),t.length&&(i.style.transform=t.join(" "))):(i.style.padding=null,i.style.transform=o.originalTransform))}}}}],r&&a(t.prototype,r),e}()},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVGGraphics=void 0;var n=r(4),a=r(1),i=r(6);function o(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||u(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||u(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=u(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function u(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),e}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var p=function e(){h(this,e),(0,n.unreachable)("Not implemented: SVGGraphics")};t.SVGGraphics=p;var v=function(e){if(Number.isInteger(e))return e.toString();var t=e.toFixed(10),r=t.length-1;if("0"!==t[r])return t;do{r--}while("0"===t[r]);return t.substring(0,"."===t[r]?r:r+1)},m=function(e){if(0===e[4]&&0===e[5]){if(0===e[1]&&0===e[2])return 1===e[0]&&1===e[3]?"":"scale(".concat(v(e[0])," ").concat(v(e[3]),")");if(e[0]===e[3]&&e[1]===-e[2]){var t=180*Math.acos(e[0])/Math.PI;return"rotate(".concat(v(t),")")}}else if(1===e[0]&&0===e[1]&&0===e[2]&&1===e[3])return"translate(".concat(v(e[4])," ").concat(v(e[5]),")");return"matrix(".concat(v(e[0])," ").concat(v(e[1])," ").concat(v(e[2])," ").concat(v(e[3])," ").concat(v(e[4])," ")+"".concat(v(e[5]),")")},y="normal",g="normal",b="#000000",_=["butt","round","square"],S=["miter","round","bevel"],w=function(){for(var e=new Uint8Array([137,80,78,71,13,10,26,10]),t=new Int32Array(256),r=0;r<256;r++){for(var a=r,o=0;o<8;o++)a=1&a?3988292384^a>>1&2147483647:a>>1&2147483647;t[r]=a}function s(e,r,n,a){var i=a,o=r.length;n[i]=o>>24&255,n[i+1]=o>>16&255,n[i+2]=o>>8&255,n[i+3]=255&o,n[i+=4]=255&e.charCodeAt(0),n[i+1]=255&e.charCodeAt(1),n[i+2]=255&e.charCodeAt(2),n[i+3]=255&e.charCodeAt(3),i+=4,n.set(r,i);var s=function(e,r,n){for(var a=-1,i=r;i<n;i++){var o=255&(a^e[i]);a=a>>>8^t[o]}return-1^a}(n,a+4,i+=r.length);n[i]=s>>24&255,n[i+1]=s>>16&255,n[i+2]=s>>8&255,n[i+3]=255&s}function l(e){var t=e.length,r=65535,n=Math.ceil(t/r),a=new Uint8Array(2+t+5*n+4),i=0;a[i++]=120,a[i++]=156;for(var o=0;t>r;)a[i++]=0,a[i++]=255,a[i++]=255,a[i++]=0,a[i++]=0,a.set(e.subarray(o,o+r),i),i+=r,o+=r,t-=r;a[i++]=1,a[i++]=255&t,a[i++]=t>>8&255,a[i++]=255&~t,a[i++]=(65535&~t)>>8&255,a.set(e.subarray(o),i),i+=e.length-o;var s=function(e,t,r){for(var n=1,a=0,i=0;i<r;++i)a=(a+(n=(n+(255&e[i]))%65521))%65521;return a<<16|n}(e,0,e.length);return a[i++]=s>>24&255,a[i++]=s>>16&255,a[i++]=s>>8&255,a[i++]=255&s,a}return function(t,r,a){return function(t,r,a,o){var u,c,f,d=t.width,h=t.height,p=t.data;switch(r){case n.ImageKind.GRAYSCALE_1BPP:c=0,u=1,f=d+7>>3;break;case n.ImageKind.RGB_24BPP:c=2,u=8,f=3*d;break;case n.ImageKind.RGBA_32BPP:c=6,u=8,f=4*d;break;default:throw new Error("invalid format")}for(var v=new Uint8Array((1+f)*h),m=0,y=0,g=0;g<h;++g)v[m++]=0,v.set(p.subarray(y,y+f),m),y+=f,m+=f;if(r===n.ImageKind.GRAYSCALE_1BPP&&o){m=0;for(var b=0;b<h;b++){m++;for(var _=0;_<f;_++)v[m++]^=255}}var S=new Uint8Array([d>>24&255,d>>16&255,d>>8&255,255&d,h>>24&255,h>>16&255,h>>8&255,255&h,u,c,0,0,0]),w=function(e){if(!i.isNodeJS)return l(e);try{var t;t=parseInt(process.versions.node)>=8?e:Buffer.from(e);var r=__webpack_require__(18864).deflateSync(t,{level:9});return r instanceof Uint8Array?r:new Uint8Array(r)}catch(e){(0,n.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+e)}return l(e)}(v),A=e.length+36+S.length+w.length,k=new Uint8Array(A),x=0;return k.set(e,x),s("IHDR",S,k,x+=e.length),s("IDATA",w,k,x+=12+S.length),x+=12+w.length,s("IEND",new Uint8Array(0),k,x),(0,n.createObjectURL)(k,"image/png",a)}(t,void 0===t.kind?n.ImageKind.GRAYSCALE_1BPP:t.kind,r,a)}}(),A=function(){function e(){h(this,e),this.fontSizeScale=1,this.fontWeight=g,this.fontSize=0,this.textMatrix=n.IDENTITY_MATRIX,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=n.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=b,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}return d(e,[{key:"clone",value:function(){return Object.create(this)}},{key:"setCurrentPoint",value:function(e,t){this.x=e,this.y=t}}]),e}(),k=0,x=0,E=0;t.SVGGraphics=p=function(){function e(t,r){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];for(var o in h(this,e),this.svgFactory=new a.DOMSVGFactory,this.current=new A,this.transformMatrix=n.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=t,this.objs=r,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!i,this._operatorIdMapping=[],n.OPS)this._operatorIdMapping[n.OPS[o]]=o}return d(e,[{key:"save",value:function(){this.transformStack.push(this.transformMatrix);var e=this.current;this.extraStack.push(e),this.current=e.clone()}},{key:"restore",value:function(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}},{key:"group",value:function(e){this.save(),this.executeOpTree(e),this.restore()}},{key:"loadDependencies",value:function(e){for(var t=this,r=e.fnArray,a=e.argsArray,i=0,o=r.length;i<o;i++)if(r[i]===n.OPS.dependency){var s,u=l(a[i]);try{var c=function(){var e=s.value,r=e.startsWith("g_")?t.commonObjs:t.objs,n=new Promise((function(t){r.get(e,t)}));t.current.dependencies.push(n)};for(u.s();!(s=u.n()).done;)c()}catch(e){u.e(e)}finally{u.f()}}return Promise.all(this.current.dependencies)}},{key:"transform",value:function(e,t,r,a,i,o){var s=[e,t,r,a,i,o];this.transformMatrix=n.Util.transform(this.transformMatrix,s),this.tgrp=null}},{key:"getSVG",value:function(e,t){var r=this;this.viewport=t;var a=this._initialize(t);return this.loadDependencies(e).then((function(){return r.transformMatrix=n.IDENTITY_MATRIX,r.executeOpTree(r.convertOpList(e)),a}))}},{key:"convertOpList",value:function(e){for(var t=this._operatorIdMapping,r=e.argsArray,n=e.fnArray,a=[],i=0,o=n.length;i<o;i++){var s=n[i];a.push({fnId:s,fn:t[s],args:r[i]})}return function(e){var t,r=[],n=[],a=l(e);try{for(a.s();!(t=a.n()).done;){var i=t.value;"save"!==i.fn?"restore"===i.fn?r=n.pop():r.push(i):(r.push({fnId:92,fn:"group",items:[]}),n.push(r),r=r[r.length-1].items)}}catch(e){a.e(e)}finally{a.f()}return r}(a)}},{key:"executeOpTree",value:function(e){var t,r=l(e);try{for(r.s();!(t=r.n()).done;){var a=t.value,i=a.fn,o=a.fnId,s=a.args;switch(0|o){case n.OPS.beginText:this.beginText();break;case n.OPS.dependency:break;case n.OPS.setLeading:this.setLeading(s);break;case n.OPS.setLeadingMoveText:this.setLeadingMoveText(s[0],s[1]);break;case n.OPS.setFont:this.setFont(s);break;case n.OPS.showText:case n.OPS.showSpacedText:this.showText(s[0]);break;case n.OPS.endText:this.endText();break;case n.OPS.moveText:this.moveText(s[0],s[1]);break;case n.OPS.setCharSpacing:this.setCharSpacing(s[0]);break;case n.OPS.setWordSpacing:this.setWordSpacing(s[0]);break;case n.OPS.setHScale:this.setHScale(s[0]);break;case n.OPS.setTextMatrix:this.setTextMatrix(s[0],s[1],s[2],s[3],s[4],s[5]);break;case n.OPS.setTextRise:this.setTextRise(s[0]);break;case n.OPS.setTextRenderingMode:this.setTextRenderingMode(s[0]);break;case n.OPS.setLineWidth:this.setLineWidth(s[0]);break;case n.OPS.setLineJoin:this.setLineJoin(s[0]);break;case n.OPS.setLineCap:this.setLineCap(s[0]);break;case n.OPS.setMiterLimit:this.setMiterLimit(s[0]);break;case n.OPS.setFillRGBColor:this.setFillRGBColor(s[0],s[1],s[2]);break;case n.OPS.setStrokeRGBColor:this.setStrokeRGBColor(s[0],s[1],s[2]);break;case n.OPS.setStrokeColorN:this.setStrokeColorN(s);break;case n.OPS.setFillColorN:this.setFillColorN(s);break;case n.OPS.shadingFill:this.shadingFill(s[0]);break;case n.OPS.setDash:this.setDash(s[0],s[1]);break;case n.OPS.setRenderingIntent:this.setRenderingIntent(s[0]);break;case n.OPS.setFlatness:this.setFlatness(s[0]);break;case n.OPS.setGState:this.setGState(s[0]);break;case n.OPS.fill:this.fill();break;case n.OPS.eoFill:this.eoFill();break;case n.OPS.stroke:this.stroke();break;case n.OPS.fillStroke:this.fillStroke();break;case n.OPS.eoFillStroke:this.eoFillStroke();break;case n.OPS.clip:this.clip("nonzero");break;case n.OPS.eoClip:this.clip("evenodd");break;case n.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case n.OPS.paintImageXObject:this.paintImageXObject(s[0]);break;case n.OPS.paintInlineImageXObject:this.paintInlineImageXObject(s[0]);break;case n.OPS.paintImageMaskXObject:this.paintImageMaskXObject(s[0]);break;case n.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(s[0],s[1]);break;case n.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case n.OPS.closePath:this.closePath();break;case n.OPS.closeStroke:this.closeStroke();break;case n.OPS.closeFillStroke:this.closeFillStroke();break;case n.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case n.OPS.nextLine:this.nextLine();break;case n.OPS.transform:this.transform(s[0],s[1],s[2],s[3],s[4],s[5]);break;case n.OPS.constructPath:this.constructPath(s[0],s[1]);break;case n.OPS.endPath:this.endPath();break;case 92:this.group(a.items);break;default:(0,n.warn)("Unimplemented operator ".concat(i))}}}catch(e){r.e(e)}finally{r.f()}}},{key:"setWordSpacing",value:function(e){this.current.wordSpacing=e}},{key:"setCharSpacing",value:function(e){this.current.charSpacing=e}},{key:"nextLine",value:function(){this.moveText(0,this.current.leading)}},{key:"setTextMatrix",value:function(e,t,r,n,a,i){var o=this.current;o.textMatrix=o.lineMatrix=[e,t,r,n,a,i],o.textMatrixScale=Math.hypot(e,t),o.x=o.lineX=0,o.y=o.lineY=0,o.xcoords=[],o.ycoords=[],o.tspan=this.svgFactory.createElement("svg:tspan"),o.tspan.setAttributeNS(null,"font-family",o.fontFamily),o.tspan.setAttributeNS(null,"font-size","".concat(v(o.fontSize),"px")),o.tspan.setAttributeNS(null,"y",v(-o.y)),o.txtElement=this.svgFactory.createElement("svg:text"),o.txtElement.appendChild(o.tspan)}},{key:"beginText",value:function(){var e=this.current;e.x=e.lineX=0,e.y=e.lineY=0,e.textMatrix=n.IDENTITY_MATRIX,e.lineMatrix=n.IDENTITY_MATRIX,e.textMatrixScale=1,e.tspan=this.svgFactory.createElement("svg:tspan"),e.txtElement=this.svgFactory.createElement("svg:text"),e.txtgrp=this.svgFactory.createElement("svg:g"),e.xcoords=[],e.ycoords=[]}},{key:"moveText",value:function(e,t){var r=this.current;r.x=r.lineX+=e,r.y=r.lineY+=t,r.xcoords=[],r.ycoords=[],r.tspan=this.svgFactory.createElement("svg:tspan"),r.tspan.setAttributeNS(null,"font-family",r.fontFamily),r.tspan.setAttributeNS(null,"font-size","".concat(v(r.fontSize),"px")),r.tspan.setAttributeNS(null,"y",v(-r.y))}},{key:"showText",value:function(e){var t=this.current,r=t.font,a=t.fontSize;if(0!==a){var i,o=t.fontSizeScale,s=t.charSpacing,u=t.wordSpacing,c=t.fontDirection,f=t.textHScale*c,d=r.vertical,h=d?1:-1,p=r.defaultVMetrics,_=a*t.fontMatrix[0],S=0,w=l(e);try{for(w.s();!(i=w.n()).done;){var A=i.value;if(null!==A)if((0,n.isNum)(A))S+=h*A*a/1e3;else{var k=(A.isSpace?u:0)+s,x=A.fontChar,E=void 0,P=void 0,C=A.width;if(d){var T=void 0,R=A.vmetric||p;T=-(T=A.vmetric?R[1]:.5*C)*_;var O=R[2]*_;C=R?-R[0]:C,E=T/o,P=(S+O)/o}else E=S/o,P=0;(A.isInFont||r.missingFile)&&(t.xcoords.push(t.x+E),d&&t.ycoords.push(-t.y+P),t.tspan.textContent+=x),S+=d?C*_-k*c:C*_+k*c}else S+=c*u}}catch(e){w.e(e)}finally{w.f()}t.tspan.setAttributeNS(null,"x",t.xcoords.map(v).join(" ")),d?t.tspan.setAttributeNS(null,"y",t.ycoords.map(v).join(" ")):t.tspan.setAttributeNS(null,"y",v(-t.y)),d?t.y-=S:t.x+=S*f,t.tspan.setAttributeNS(null,"font-family",t.fontFamily),t.tspan.setAttributeNS(null,"font-size","".concat(v(t.fontSize),"px")),t.fontStyle!==y&&t.tspan.setAttributeNS(null,"font-style",t.fontStyle),t.fontWeight!==g&&t.tspan.setAttributeNS(null,"font-weight",t.fontWeight);var I=t.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;if(I===n.TextRenderingMode.FILL||I===n.TextRenderingMode.FILL_STROKE?(t.fillColor!==b&&t.tspan.setAttributeNS(null,"fill",t.fillColor),t.fillAlpha<1&&t.tspan.setAttributeNS(null,"fill-opacity",t.fillAlpha)):t.textRenderingMode===n.TextRenderingMode.ADD_TO_PATH?t.tspan.setAttributeNS(null,"fill","transparent"):t.tspan.setAttributeNS(null,"fill","none"),I===n.TextRenderingMode.STROKE||I===n.TextRenderingMode.FILL_STROKE){var F=1/(t.textMatrixScale||1);this._setStrokeAttributes(t.tspan,F)}var D=t.textMatrix;0!==t.textRise&&((D=D.slice())[5]+=t.textRise),t.txtElement.setAttributeNS(null,"transform","".concat(m(D)," scale(").concat(v(f),", -1)")),t.txtElement.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),t.txtElement.appendChild(t.tspan),t.txtgrp.appendChild(t.txtElement),this._ensureTransformGroup().appendChild(t.txtElement)}}},{key:"setLeadingMoveText",value:function(e,t){this.setLeading(-t),this.moveText(e,t)}},{key:"addFontStyle",value:function(e){if(!e.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));var t=(0,n.createObjectURL)(e.data,e.mimetype,this.forceDataSchema);this.cssStyle.textContent+='@font-face { font-family: "'.concat(e.loadedName,'";')+" src: url(".concat(t,"); }\n")}},{key:"setFont",value:function(e){var t=this.current,r=this.commonObjs.get(e[0]),a=e[1];t.font=r,!this.embedFonts||r.missingFile||this.embeddedFonts[r.loadedName]||(this.addFontStyle(r),this.embeddedFonts[r.loadedName]=r),t.fontMatrix=r.fontMatrix||n.FONT_IDENTITY_MATRIX;var i="normal";r.black?i="900":r.bold&&(i="bold");var o=r.italic?"italic":"normal";a<0?(a=-a,t.fontDirection=-1):t.fontDirection=1,t.fontSize=a,t.fontFamily=r.loadedName,t.fontWeight=i,t.fontStyle=o,t.tspan=this.svgFactory.createElement("svg:tspan"),t.tspan.setAttributeNS(null,"y",v(-t.y)),t.xcoords=[],t.ycoords=[]}},{key:"endText",value:function(){var e,t=this.current;t.textRenderingMode&n.TextRenderingMode.ADD_TO_PATH_FLAG&&null!==(e=t.txtElement)&&void 0!==e&&e.hasChildNodes()&&(t.element=t.txtElement,this.clip("nonzero"),this.endPath())}},{key:"setLineWidth",value:function(e){e>0&&(this.current.lineWidth=e)}},{key:"setLineCap",value:function(e){this.current.lineCap=_[e]}},{key:"setLineJoin",value:function(e){this.current.lineJoin=S[e]}},{key:"setMiterLimit",value:function(e){this.current.miterLimit=e}},{key:"setStrokeAlpha",value:function(e){this.current.strokeAlpha=e}},{key:"setStrokeRGBColor",value:function(e,t,r){this.current.strokeColor=n.Util.makeHexColor(e,t,r)}},{key:"setFillAlpha",value:function(e){this.current.fillAlpha=e}},{key:"setFillRGBColor",value:function(e,t,r){this.current.fillColor=n.Util.makeHexColor(e,t,r),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}},{key:"setStrokeColorN",value:function(e){this.current.strokeColor=this._makeColorN_Pattern(e)}},{key:"setFillColorN",value:function(e){this.current.fillColor=this._makeColorN_Pattern(e)}},{key:"shadingFill",value:function(e){var t=this.viewport.width,r=this.viewport.height,a=n.Util.inverseTransform(this.transformMatrix),i=n.Util.applyTransform([0,0],a),o=n.Util.applyTransform([0,r],a),s=n.Util.applyTransform([t,0],a),l=n.Util.applyTransform([t,r],a),u=Math.min(i[0],o[0],s[0],l[0]),c=Math.min(i[1],o[1],s[1],l[1]),f=Math.max(i[0],o[0],s[0],l[0]),d=Math.max(i[1],o[1],s[1],l[1]),h=this.svgFactory.createElement("svg:rect");h.setAttributeNS(null,"x",u),h.setAttributeNS(null,"y",c),h.setAttributeNS(null,"width",f-u),h.setAttributeNS(null,"height",d-c),h.setAttributeNS(null,"fill",this._makeShadingPattern(e)),this.current.fillAlpha<1&&h.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().appendChild(h)}},{key:"_makeColorN_Pattern",value:function(e){return"TilingPattern"===e[0]?this._makeTilingPattern(e):this._makeShadingPattern(e)}},{key:"_makeTilingPattern",value:function(e){var t=e[1],r=e[2],a=e[3]||n.IDENTITY_MATRIX,i=s(e[4],4),l=i[0],u=i[1],c=i[2],f=i[3],d=e[5],h=e[6],p=e[7],v="shading".concat(E++),m=s(n.Util.normalizeRect([].concat(o(n.Util.applyTransform([l,u],a)),o(n.Util.applyTransform([c,f],a)))),4),y=m[0],g=m[1],b=m[2],_=m[3],S=s(n.Util.singularValueDecompose2dScale(a),2),w=d*S[0],A=h*S[1],k=this.svgFactory.createElement("svg:pattern");k.setAttributeNS(null,"id",v),k.setAttributeNS(null,"patternUnits","userSpaceOnUse"),k.setAttributeNS(null,"width",w),k.setAttributeNS(null,"height",A),k.setAttributeNS(null,"x","".concat(y)),k.setAttributeNS(null,"y","".concat(g));var x=this.svg,P=this.transformMatrix,C=this.current.fillColor,T=this.current.strokeColor,R=this.svgFactory.create(b-y,_-g);if(this.svg=R,this.transformMatrix=a,2===p){var O=n.Util.makeHexColor.apply(n.Util,o(t));this.current.fillColor=O,this.current.strokeColor=O}return this.executeOpTree(this.convertOpList(r)),this.svg=x,this.transformMatrix=P,this.current.fillColor=C,this.current.strokeColor=T,k.appendChild(R.childNodes[0]),this.defs.appendChild(k),"url(#".concat(v,")")}},{key:"_makeShadingPattern",value:function(e){switch("string"==typeof e&&(e=this.objs.get(e)),e[0]){case"RadialAxial":var t,r="shading".concat(E++),a=e[3];switch(e[1]){case"axial":var i=e[4],o=e[5];(t=this.svgFactory.createElement("svg:linearGradient")).setAttributeNS(null,"id",r),t.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),t.setAttributeNS(null,"x1",i[0]),t.setAttributeNS(null,"y1",i[1]),t.setAttributeNS(null,"x2",o[0]),t.setAttributeNS(null,"y2",o[1]);break;case"radial":var s=e[4],u=e[5],c=e[6],f=e[7];(t=this.svgFactory.createElement("svg:radialGradient")).setAttributeNS(null,"id",r),t.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),t.setAttributeNS(null,"cx",u[0]),t.setAttributeNS(null,"cy",u[1]),t.setAttributeNS(null,"r",f),t.setAttributeNS(null,"fx",s[0]),t.setAttributeNS(null,"fy",s[1]),t.setAttributeNS(null,"fr",c);break;default:throw new Error("Unknown RadialAxial type: ".concat(e[1]))}var d,h=l(a);try{for(h.s();!(d=h.n()).done;){var p=d.value,v=this.svgFactory.createElement("svg:stop");v.setAttributeNS(null,"offset",p[0]),v.setAttributeNS(null,"stop-color",p[1]),t.appendChild(v)}}catch(e){h.e(e)}finally{h.f()}return this.defs.appendChild(t),"url(#".concat(r,")");case"Mesh":return(0,n.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error("Unknown IR type: ".concat(e[0]))}}},{key:"setDash",value:function(e,t){this.current.dashArray=e,this.current.dashPhase=t}},{key:"constructPath",value:function(e,t){var r,a=this.current,i=a.x,o=a.y,s=[],u=0,c=l(e);try{for(c.s();!(r=c.n()).done;)switch(0|r.value){case n.OPS.rectangle:i=t[u++],o=t[u++];var f=t[u++],d=t[u++],h=i+f,p=o+d;s.push("M",v(i),v(o),"L",v(h),v(o),"L",v(h),v(p),"L",v(i),v(p),"Z");break;case n.OPS.moveTo:i=t[u++],o=t[u++],s.push("M",v(i),v(o));break;case n.OPS.lineTo:i=t[u++],o=t[u++],s.push("L",v(i),v(o));break;case n.OPS.curveTo:i=t[u+4],o=t[u+5],s.push("C",v(t[u]),v(t[u+1]),v(t[u+2]),v(t[u+3]),v(i),v(o)),u+=6;break;case n.OPS.curveTo2:s.push("C",v(i),v(o),v(t[u]),v(t[u+1]),v(t[u+2]),v(t[u+3])),i=t[u+2],o=t[u+3],u+=4;break;case n.OPS.curveTo3:i=t[u+2],o=t[u+3],s.push("C",v(t[u]),v(t[u+1]),v(i),v(o),v(i),v(o)),u+=4;break;case n.OPS.closePath:s.push("Z")}}catch(e){c.e(e)}finally{c.f()}s=s.join(" "),a.path&&e.length>0&&e[0]!==n.OPS.rectangle&&e[0]!==n.OPS.moveTo?s=a.path.getAttributeNS(null,"d")+s:(a.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(a.path)),a.path.setAttributeNS(null,"d",s),a.path.setAttributeNS(null,"fill","none"),a.element=a.path,a.setCurrentPoint(i,o)}},{key:"endPath",value:function(){var e=this.current;if(e.path=null,this.pendingClip)if(e.element){var t="clippath".concat(k++),r=this.svgFactory.createElement("svg:clipPath");r.setAttributeNS(null,"id",t),r.setAttributeNS(null,"transform",m(this.transformMatrix));var n=e.element.cloneNode(!0);if("evenodd"===this.pendingClip?n.setAttributeNS(null,"clip-rule","evenodd"):n.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,r.appendChild(n),this.defs.appendChild(r),e.activeClipUrl){e.clipGroup=null;var a,i=l(this.extraStack);try{for(i.s();!(a=i.n()).done;)a.value.clipGroup=null}catch(e){i.e(e)}finally{i.f()}r.setAttributeNS(null,"clip-path",e.activeClipUrl)}e.activeClipUrl="url(#".concat(t,")"),this.tgrp=null}else this.pendingClip=null}},{key:"clip",value:function(e){this.pendingClip=e}},{key:"closePath",value:function(){var e=this.current;if(e.path){var t="".concat(e.path.getAttributeNS(null,"d"),"Z");e.path.setAttributeNS(null,"d",t)}}},{key:"setLeading",value:function(e){this.current.leading=-e}},{key:"setTextRise",value:function(e){this.current.textRise=e}},{key:"setTextRenderingMode",value:function(e){this.current.textRenderingMode=e}},{key:"setHScale",value:function(e){this.current.textHScale=e/100}},{key:"setRenderingIntent",value:function(e){}},{key:"setFlatness",value:function(e){}},{key:"setGState",value:function(e){var t,r=l(e);try{for(r.s();!(t=r.n()).done;){var a=s(t.value,2),i=a[0],o=a[1];switch(i){case"LW":this.setLineWidth(o);break;case"LC":this.setLineCap(o);break;case"LJ":this.setLineJoin(o);break;case"ML":this.setMiterLimit(o);break;case"D":this.setDash(o[0],o[1]);break;case"RI":this.setRenderingIntent(o);break;case"FL":this.setFlatness(o);break;case"Font":this.setFont(o);break;case"CA":this.setStrokeAlpha(o);break;case"ca":this.setFillAlpha(o);break;default:(0,n.warn)("Unimplemented graphic state operator ".concat(i))}}}catch(e){r.e(e)}finally{r.f()}}},{key:"fill",value:function(){var e=this.current;e.element&&(e.element.setAttributeNS(null,"fill",e.fillColor),e.element.setAttributeNS(null,"fill-opacity",e.fillAlpha),this.endPath())}},{key:"stroke",value:function(){var e=this.current;e.element&&(this._setStrokeAttributes(e.element),e.element.setAttributeNS(null,"fill","none"),this.endPath())}},{key:"_setStrokeAttributes",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=this.current,n=r.dashArray;1!==t&&n.length>0&&(n=n.map((function(e){return t*e}))),e.setAttributeNS(null,"stroke",r.strokeColor),e.setAttributeNS(null,"stroke-opacity",r.strokeAlpha),e.setAttributeNS(null,"stroke-miterlimit",v(r.miterLimit)),e.setAttributeNS(null,"stroke-linecap",r.lineCap),e.setAttributeNS(null,"stroke-linejoin",r.lineJoin),e.setAttributeNS(null,"stroke-width",v(t*r.lineWidth)+"px"),e.setAttributeNS(null,"stroke-dasharray",n.map(v).join(" ")),e.setAttributeNS(null,"stroke-dashoffset",v(t*r.dashPhase)+"px")}},{key:"eoFill",value:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}},{key:"fillStroke",value:function(){this.stroke(),this.fill()}},{key:"eoFillStroke",value:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}},{key:"closeStroke",value:function(){this.closePath(),this.stroke()}},{key:"closeFillStroke",value:function(){this.closePath(),this.fillStroke()}},{key:"closeEOFillStroke",value:function(){this.closePath(),this.eoFillStroke()}},{key:"paintSolidColorImageMask",value:function(){var e=this.svgFactory.createElement("svg:rect");e.setAttributeNS(null,"x","0"),e.setAttributeNS(null,"y","0"),e.setAttributeNS(null,"width","1px"),e.setAttributeNS(null,"height","1px"),e.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(e)}},{key:"paintImageXObject",value:function(e){var t=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);t?this.paintInlineImageXObject(t):(0,n.warn)("Dependent image with object ID ".concat(e," is not ready yet"))}},{key:"paintInlineImageXObject",value:function(e,t){var r=e.width,n=e.height,a=w(e,this.forceDataSchema,!!t),i=this.svgFactory.createElement("svg:rect");i.setAttributeNS(null,"x","0"),i.setAttributeNS(null,"y","0"),i.setAttributeNS(null,"width",v(r)),i.setAttributeNS(null,"height",v(n)),this.current.element=i,this.clip("nonzero");var o=this.svgFactory.createElement("svg:image");o.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",a),o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y",v(-n)),o.setAttributeNS(null,"width",v(r)+"px"),o.setAttributeNS(null,"height",v(n)+"px"),o.setAttributeNS(null,"transform","scale(".concat(v(1/r)," ").concat(v(-1/n),")")),t?t.appendChild(o):this._ensureTransformGroup().appendChild(o)}},{key:"paintImageMaskXObject",value:function(e){var t=this.current,r=e.width,n=e.height,a=t.fillColor;t.maskId="mask".concat(x++);var i=this.svgFactory.createElement("svg:mask");i.setAttributeNS(null,"id",t.maskId);var o=this.svgFactory.createElement("svg:rect");o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y","0"),o.setAttributeNS(null,"width",v(r)),o.setAttributeNS(null,"height",v(n)),o.setAttributeNS(null,"fill",a),o.setAttributeNS(null,"mask","url(#".concat(t.maskId,")")),this.defs.appendChild(i),this._ensureTransformGroup().appendChild(o),this.paintInlineImageXObject(e,i)}},{key:"paintFormXObjectBegin",value:function(e,t){if(Array.isArray(e)&&6===e.length&&this.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t){var r=t[2]-t[0],n=t[3]-t[1],a=this.svgFactory.createElement("svg:rect");a.setAttributeNS(null,"x",t[0]),a.setAttributeNS(null,"y",t[1]),a.setAttributeNS(null,"width",v(r)),a.setAttributeNS(null,"height",v(n)),this.current.element=a,this.clip("nonzero"),this.endPath()}}},{key:"paintFormXObjectEnd",value:function(){}},{key:"_initialize",value:function(e){var t=this.svgFactory.create(e.width,e.height),r=this.svgFactory.createElement("svg:defs");t.appendChild(r),this.defs=r;var n=this.svgFactory.createElement("svg:g");return n.setAttributeNS(null,"transform",m(e.transform)),t.appendChild(n),this.svg=n,t}},{key:"_ensureClipGroup",value:function(){if(!this.current.clipGroup){var e=this.svgFactory.createElement("svg:g");e.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(e),this.current.clipGroup=e}return this.current.clipGroup}},{key:"_ensureTransformGroup",value:function(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",m(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}]),e}()},(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNodeStream=void 0;var a,i=(a=r(2))&&a.__esModule?a:{default:a},o=r(4),s=r(154);function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=d(e);if(t){var a=d(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return f(this,r)}}function f(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}function h(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function p(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){h(i,n,a,o,s,"next",e)}function s(e){h(i,n,a,o,s,"throw",e)}o(void 0)}))}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function g(e,t,r){return t&&y(e.prototype,t),r&&y(e,r),e}var b=__webpack_require__(3804),_=__webpack_require__(88254),S=__webpack_require__(74255),w=__webpack_require__(99502),A=/^file:\/\/\/[a-zA-Z]:\//,k=function(){function e(t){var r,n;m(this,e),this.source=t,this.url=(r=t.url,"file:"===(n=w.parse(r)).protocol||n.host?n:/^[a-z]:[/\\]/i.test(r)?w.parse("file:///".concat(r)):(n.host||(n.protocol="file:"),n)),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}return g(e,[{key:"_progressiveDataLength",get:function(){var e,t;return null!==(e=null===(t=this._fullRequestReader)||void 0===t?void 0:t._loaded)&&void 0!==e?e:0}},{key:"getFullReader",value:function(){return(0,o.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new R(this):new C(this),this._fullRequestReader}},{key:"getRangeReader",value:function(e,t){if(t<=this._progressiveDataLength)return null;var r=this.isFsUrl?new O(this,e,t):new T(this,e,t);return this._rangeRequestReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e);var t,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return v(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}(this._rangeRequestReaders.slice(0));try{for(r.s();!(t=r.n()).done;)t.value.cancel(e)}catch(e){r.e(e)}finally{r.f()}}}]),e}();t.PDFNodeStream=k;var x=function(){function e(t){m(this,e),this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;var r=t.source;this._contentLength=r.length,this._loaded=0,this._filename=null,this._disableRange=r.disableRange||!1,this._rangeChunkSize=r.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!r.disableStream,this._isRangeSupported=!r.disableRange,this._readableStream=null,this._readCapability=(0,o.createPromiseCapability)(),this._headersCapability=(0,o.createPromiseCapability)()}var t;return g(e,[{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:(t=p(i.default.mark((function e(){var t,r;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:if(!this._done){e.next=4;break}return e.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){e.next=6;break}throw this._storedError;case 6:if(null!==(t=this._readableStream.read())){e.next=10;break}return this._readCapability=(0,o.createPromiseCapability)(),e.abrupt("return",this.read());case 10:return this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),r=new Uint8Array(t).buffer,e.abrupt("return",{value:r,done:!1});case 14:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}},{key:"_error",value:function(e){this._storedError=e,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(e){var t=this;this._readableStream=e,e.on("readable",(function(){t._readCapability.resolve()})),e.on("end",(function(){e.destroy(),t._done=!0,t._readCapability.resolve()})),e.on("error",(function(e){t._error(e)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new o.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}]),e}(),E=function(){function e(t){m(this,e),this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,o.createPromiseCapability)();var r=t.source;this._isStreamingSupported=!r.disableStream}var t;return g(e,[{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:(t=p(i.default.mark((function e(){var t,r;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:if(!this._done){e.next=4;break}return e.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){e.next=6;break}throw this._storedError;case 6:if(null!==(t=this._readableStream.read())){e.next=10;break}return this._readCapability=(0,o.createPromiseCapability)(),e.abrupt("return",this.read());case 10:return this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded}),r=new Uint8Array(t).buffer,e.abrupt("return",{value:r,done:!1});case 14:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}},{key:"_error",value:function(e){this._storedError=e,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(e){var t=this;this._readableStream=e,e.on("readable",(function(){t._readCapability.resolve()})),e.on("end",(function(){e.destroy(),t._done=!0,t._readCapability.resolve()})),e.on("error",(function(e){t._error(e)})),this._storedError&&this._readableStream.destroy(this._storedError)}}]),e}();function P(e,t){return{protocol:e.protocol,auth:e.auth,host:e.hostname,port:e.port,path:e.path,method:"GET",headers:t}}var C=function(e){l(r,e);var t=c(r);function r(e){var n;m(this,r);var a=function(t){if(404===t.statusCode){var r=new o.MissingPDFException('Missing PDF "'.concat(n._url,'".'));return n._storedError=r,void n._headersCapability.reject(r)}n._headersCapability.resolve(),n._setReadableStream(t);var a=function(e){return n._readableStream.headers[e.toLowerCase()]},i=(0,s.validateRangeRequestCapabilities)({getResponseHeader:a,isHttp:e.isHttp,rangeChunkSize:n._rangeChunkSize,disableRange:n._disableRange}),l=i.allowRangeRequests,u=i.suggestedLength;n._isRangeSupported=l,n._contentLength=u||n._contentLength,n._filename=(0,s.extractFilenameFromHeader)(a)};return(n=t.call(this,e))._request=null,"http:"===n._url.protocol?n._request=_.request(P(n._url,e.httpHeaders),a):n._request=S.request(P(n._url,e.httpHeaders),a),n._request.on("error",(function(e){n._storedError=e,n._headersCapability.reject(e)})),n._request.end(),n}return r}(x),T=function(e){l(r,e);var t=c(r);function r(e,n,a){var i;for(var s in m(this,r),(i=t.call(this,e))._httpHeaders={},e.httpHeaders){var l=e.httpHeaders[s];void 0!==l&&(i._httpHeaders[s]=l)}i._httpHeaders.Range="bytes=".concat(n,"-").concat(a-1);var u=function(e){if(404!==e.statusCode)i._setReadableStream(e);else{var t=new o.MissingPDFException('Missing PDF "'.concat(i._url,'".'));i._storedError=t}};return i._request=null,"http:"===i._url.protocol?i._request=_.request(P(i._url,i._httpHeaders),u):i._request=S.request(P(i._url,i._httpHeaders),u),i._request.on("error",(function(e){i._storedError=e})),i._request.end(),i}return r}(E),R=function(e){l(r,e);var t=c(r);function r(e){var n;m(this,r),n=t.call(this,e);var a=decodeURIComponent(n._url.path);return A.test(n._url.href)&&(a=a.replace(/^\//,"")),b.lstat(a,(function(e,t){if(e)return"ENOENT"===e.code&&(e=new o.MissingPDFException('Missing PDF "'.concat(a,'".'))),n._storedError=e,void n._headersCapability.reject(e);n._contentLength=t.size,n._setReadableStream(b.createReadStream(a)),n._headersCapability.resolve()})),n}return r}(x),O=function(e){l(r,e);var t=c(r);function r(e,n,a){var i;m(this,r),i=t.call(this,e);var o=decodeURIComponent(i._url.path);return A.test(i._url.href)&&(o=o.replace(/^\//,"")),i._setReadableStream(b.createReadStream(o,{start:n,end:a-1})),i}return r}(E)},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createResponseStatusError=function(e,t){return 404===e||0===e&&t.startsWith("file:")?new n.MissingPDFException('Missing PDF "'+t+'".'):new n.UnexpectedResponseException("Unexpected server response (".concat(e,') while retrieving PDF "').concat(t,'".'),e)},t.extractFilenameFromHeader=function(e){var t=e("Content-Disposition");if(t){var r=(0,a.getFilenameFromContentDispositionHeader)(t);if(r.includes("%"))try{r=decodeURIComponent(r)}catch(e){}if((0,i.isPdfFile)(r))return r}return null},t.validateRangeRequestCapabilities=function(e){var t=e.getResponseHeader,r=e.isHttp,a=e.rangeChunkSize,i=e.disableRange;(0,n.assert)(a>0,"Range chunk size must be larger than zero");var o={allowRangeRequests:!1,suggestedLength:void 0},s=parseInt(t("Content-Length"),10);return Number.isInteger(s)?(o.suggestedLength=s,s<=2*a||i||!r||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(o.allowRangeRequests=!0),o):o},t.validateResponseStatus=function(e){return 200===e||206===e};var n=r(4),a=r(155),i=r(1)},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFilenameFromContentDispositionHeader=function(e){var t=!0,r=s("filename\\*","i").exec(e);if(r){var i=c(r=r[1]);return u(i=d(i=f(i=unescape(i))))}if(r=function(e){for(var t,r=[],n=s("filename\\*((?!0\\d)\\d+)(\\*?)","ig");null!==(t=n.exec(e));){var i=a(t,4),o=i[1],l=i[2],u=i[3];if((o=parseInt(o,10))in r){if(0===o)break}else r[o]=[l,u]}for(var d=[],h=0;h<r.length&&h in r;++h){var p=a(r[h],2),v=p[0],m=p[1];m=c(m),v&&(m=unescape(m),0===h&&(m=f(m))),d.push(m)}return d.join("")}(e))return u(d(r));if(r=s("filename","i").exec(e)){var o=c(r=r[1]);return u(o=d(o))}function s(e,t){return new RegExp("(?:^|;)\\s*"+e+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',t)}function l(e,r){if(e){if(!/^[\x00-\xFF]+$/.test(r))return r;try{var a=new TextDecoder(e,{fatal:!0}),i=(0,n.stringToBytes)(r);r=a.decode(i),t=!1}catch(n){if(/^utf-?8$/i.test(e))try{r=decodeURIComponent(escape(r)),t=!1}catch(e){}}}return r}function u(e){return t&&/[\x80-\xff]/.test(e)&&(e=l("utf-8",e),t&&(e=l("iso-8859-1",e))),e}function c(e){if(e.startsWith('"')){for(var t=e.slice(1).split('\\"'),r=0;r<t.length;++r){var n=t[r].indexOf('"');-1!==n&&(t[r]=t[r].slice(0,n),t.length=r+1),t[r]=t[r].replace(/\\(.)/g,"$1")}e=t.join('"')}return e}function f(e){var t=e.indexOf("'");return-1===t?e:l(e.slice(0,t),e.slice(t+1).replace(/^[^']*'/,""))}function d(e){return!e.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(e)?e:e.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(e,t,r,n){if("q"===r||"Q"===r)return l(t,n=(n=n.replace(/_/g," ")).replace(/=([0-9a-fA-F]{2})/g,(function(e,t){return String.fromCharCode(parseInt(t,16))})));try{n=atob(n)}catch(e){}return l(t,n)}))}return""};var n=r(4);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNetworkStream=void 0;var n,a=(n=r(2))&&n.__esModule?n:{default:n},i=r(4),o=r(154);function s(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function l(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){s(i,n,a,o,l,"next",e)}function l(e){s(i,n,a,o,l,"throw",e)}o(void 0)}))}}function u(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var p=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};f(this,e),this.url=t,this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&r.httpHeaders||Object.create(null),this.withCredentials=r.withCredentials||!1,this.getXhr=r.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}return h(e,[{key:"requestRange",value:function(e,t,r){var n={begin:e,end:t};for(var a in r)n[a]=r[a];return this.request(n)}},{key:"requestFull",value:function(e){return this.request(e)}},{key:"request",value:function(e){var t=this.getXhr(),r=this.currXhrId++,n=this.pendingRequests[r]={xhr:t};for(var a in t.open("GET",this.url),t.withCredentials=this.withCredentials,this.httpHeaders){var i=this.httpHeaders[a];void 0!==i&&t.setRequestHeader(a,i)}return this.isHttp&&"begin"in e&&"end"in e?(t.setRequestHeader("Range","bytes=".concat(e.begin,"-").concat(e.end-1)),n.expectedStatus=206):n.expectedStatus=200,t.responseType="arraybuffer",e.onError&&(t.onerror=function(r){e.onError(t.status)}),t.onreadystatechange=this.onStateChange.bind(this,r),t.onprogress=this.onProgress.bind(this,r),n.onHeadersReceived=e.onHeadersReceived,n.onDone=e.onDone,n.onError=e.onError,n.onProgress=e.onProgress,t.send(null),r}},{key:"onProgress",value:function(e,t){var r,n=this.pendingRequests[e];n&&(null===(r=n.onProgress)||void 0===r||r.call(n,t))}},{key:"onStateChange",value:function(e,t){var r=this.pendingRequests[e];if(r){var n=r.xhr;if(n.readyState>=2&&r.onHeadersReceived&&(r.onHeadersReceived(),delete r.onHeadersReceived),4===n.readyState&&e in this.pendingRequests)if(delete this.pendingRequests[e],0===n.status&&this.isHttp){var a;null===(a=r.onError)||void 0===a||a.call(r,n.status)}else{var o=n.status||200;if(200===o&&206===r.expectedStatus||o===r.expectedStatus){var s=function(e){var t=e.response;return"string"!=typeof t?t:(0,i.stringToBytes)(t).buffer}(n);if(206===o){var l=n.getResponseHeader("Content-Range"),u=/bytes (\d+)-(\d+)\/(\d+)/.exec(l);r.onDone({begin:parseInt(u[1],10),chunk:s})}else if(s)r.onDone({begin:0,chunk:s});else{var c;null===(c=r.onError)||void 0===c||c.call(r,n.status)}}else{var f;null===(f=r.onError)||void 0===f||f.call(r,n.status)}}}}},{key:"getRequestXhr",value:function(e){return this.pendingRequests[e].xhr}},{key:"isPendingRequest",value:function(e){return e in this.pendingRequests}},{key:"abortRequest",value:function(e){var t=this.pendingRequests[e].xhr;delete this.pendingRequests[e],t.abort()}}]),e}(),v=function(){function e(t){f(this,e),this._source=t,this._manager=new p(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}return h(e,[{key:"_onRangeRequestReaderClosed",value:function(e){var t=this._rangeRequestReaders.indexOf(e);t>=0&&this._rangeRequestReaders.splice(t,1)}},{key:"getFullReader",value:function(){return(0,i.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new m(this._manager,this._source),this._fullRequestReader}},{key:"getRangeReader",value:function(e,t){var r=new y(this._manager,e,t);return r.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){var t;null===(t=this._fullRequestReader)||void 0===t||t.cancel(e);var r,n=u(this._rangeRequestReaders.slice(0));try{for(n.s();!(r=n.n()).done;)r.value.cancel(e)}catch(e){n.e(e)}finally{n.f()}}}]),e}();t.PDFNetworkStream=v;var m=function(){function e(t,r){f(this,e),this._manager=t;var n={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=r.url,this._fullRequestId=t.requestFull(n),this._headersReceivedCapability=(0,i.createPromiseCapability)(),this._disableRange=r.disableRange||!1,this._contentLength=r.length,this._rangeChunkSize=r.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}var t;return h(e,[{key:"_onHeadersReceived",value:function(){var e=this._fullRequestId,t=this._manager.getRequestXhr(e),r=function(e){return t.getResponseHeader(e)},n=(0,o.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange}),a=n.allowRangeRequests,i=n.suggestedLength;a&&(this._isRangeSupported=!0),this._contentLength=i||this._contentLength,this._filename=(0,o.extractFilenameFromHeader)(r),this._isRangeSupported&&this._manager.abortRequest(e),this._headersReceivedCapability.resolve()}},{key:"_onDone",value:function(e){if(e&&(this._requests.length>0?this._requests.shift().resolve({value:e.chunk,done:!1}):this._cachedChunks.push(e.chunk)),this._done=!0,!(this._cachedChunks.length>0)){var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0}}},{key:"_onError",value:function(e){this._storedError=(0,o.createResponseStatusError)(e,this._url),this._headersReceivedCapability.reject(this._storedError);var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.reject(this._storedError)}catch(e){r.e(e)}finally{r.f()}this._requests.length=0,this._cachedChunks.length=0}},{key:"_onProgress",value:function(e){var t;null===(t=this.onProgress)||void 0===t||t.call(this,{loaded:e.loaded,total:e.lengthComputable?e.total:this._contentLength})}},{key:"filename",get:function(){return this._filename}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"contentLength",get:function(){return this._contentLength}},{key:"headersReady",get:function(){return this._headersReceivedCapability.promise}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._storedError){e.next=2;break}throw this._storedError;case 2:if(!(this._cachedChunks.length>0)){e.next=5;break}return t=this._cachedChunks.shift(),e.abrupt("return",{value:t,done:!1});case 5:if(!this._done){e.next=7;break}return e.abrupt("return",{value:void 0,done:!0});case 7:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 10:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._done=!0,this._headersReceivedCapability.reject(e);var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}]),e}(),y=function(){function e(t,r,n){f(this,e),this._manager=t;var a={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._requestId=t.requestRange(r,n,a),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}var t;return h(e,[{key:"_close",value:function(){var e;null===(e=this.onClosed)||void 0===e||e.call(this,this)}},{key:"_onDone",value:function(e){var t=e.chunk;this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunk=t,this._done=!0;var r,n=u(this._requests);try{for(n.s();!(r=n.n()).done;)r.value.resolve({value:void 0,done:!0})}catch(e){n.e(e)}finally{n.f()}this._requests.length=0,this._close()}},{key:"_onError",value:function(e){this._storedError=(0,o.createResponseStatusError)(e,this._url);var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.reject(this._storedError)}catch(e){r.e(e)}finally{r.f()}this._requests.length=0,this._queuedChunk=null}},{key:"_onProgress",value:function(e){var t;this.isStreamingSupported||null===(t=this.onProgress)||void 0===t||t.call(this,{loaded:e.loaded})}},{key:"isStreamingSupported",get:function(){return!1}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._storedError){e.next=2;break}throw this._storedError;case 2:if(null===this._queuedChunk){e.next=6;break}return t=this._queuedChunk,this._queuedChunk=null,e.abrupt("return",{value:t,done:!1});case 6:if(!this._done){e.next=8;break}return e.abrupt("return",{value:void 0,done:!0});case 8:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 11:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._done=!0;var t,r=u(this._requests);try{for(r.s();!(t=r.n()).done;)t.value.resolve({value:void 0,done:!0})}catch(e){r.e(e)}finally{r.f()}this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}]),e}()},(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFFetchStream=void 0;var n,a=(n=r(2))&&n.__esModule?n:{default:n},i=r(4),o=r(154);function s(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function l(e){return function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){s(i,n,a,o,l,"next",e)}function l(e){s(i,n,a,o,l,"throw",e)}o(void 0)}))}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),e}function h(e,t,r){return{method:"GET",headers:e,signal:null==r?void 0:r.signal,mode:"cors",credentials:t?"include":"same-origin",redirect:"follow"}}function p(e){var t=new Headers;for(var r in e){var n=e[r];void 0!==n&&t.append(r,n)}return t}var v=function(){function e(t){c(this,e),this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}return d(e,[{key:"_progressiveDataLength",get:function(){var e,t;return null!==(e=null===(t=this._fullRequestReader)||void 0===t?void 0:t._loaded)&&void 0!==e?e:0}},{key:"getFullReader",value:function(){return(0,i.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new m(this),this._fullRequestReader}},{key:"getRangeReader",value:function(e,t){if(t<=this._progressiveDataLength)return null;var r=new y(this,e,t);return this._rangeRequestReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e);var t,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}(this._rangeRequestReaders.slice(0));try{for(r.s();!(t=r.n()).done;)t.value.cancel(e)}catch(e){r.e(e)}finally{r.f()}}}]),e}();t.PDFFetchStream=v;var m=function(){function e(t){var r=this;c(this,e),this._stream=t,this._reader=null,this._loaded=0,this._filename=null;var n=t.source;this._withCredentials=n.withCredentials||!1,this._contentLength=n.length,this._headersCapability=(0,i.createPromiseCapability)(),this._disableRange=n.disableRange||!1,this._rangeChunkSize=n.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._isStreamingSupported=!n.disableStream,this._isRangeSupported=!n.disableRange,this._headers=p(this._stream.httpHeaders);var a=n.url;fetch(a,h(this._headers,this._withCredentials,this._abortController)).then((function(e){if(!(0,o.validateResponseStatus)(e.status))throw(0,o.createResponseStatusError)(e.status,a);r._reader=e.body.getReader(),r._headersCapability.resolve();var t=function(t){return e.headers.get(t)},n=(0,o.validateRangeRequestCapabilities)({getResponseHeader:t,isHttp:r._stream.isHttp,rangeChunkSize:r._rangeChunkSize,disableRange:r._disableRange}),s=n.allowRangeRequests,l=n.suggestedLength;r._isRangeSupported=s,r._contentLength=l||r._contentLength,r._filename=(0,o.extractFilenameFromHeader)(t),!r._isStreamingSupported&&r._isRangeSupported&&r.cancel(new i.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}var t;return d(e,[{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r,n,i;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._headersCapability.promise;case 2:return e.next=4,this._reader.read();case 4:if(t=e.sent,r=t.value,!(n=t.done)){e.next=9;break}return e.abrupt("return",{value:r,done:n});case 9:return this._loaded+=r.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),i=new Uint8Array(r).buffer,e.abrupt("return",{value:i,done:!1});case 13:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}}]),e}(),y=function(){function e(t,r,n){var a=this;c(this,e),this._stream=t,this._reader=null,this._loaded=0;var s=t.source;this._withCredentials=s.withCredentials||!1,this._readCapability=(0,i.createPromiseCapability)(),this._isStreamingSupported=!s.disableStream,"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._headers=p(this._stream.httpHeaders),this._headers.append("Range","bytes=".concat(r,"-").concat(n-1));var l=s.url;fetch(l,h(this._headers,this._withCredentials,this._abortController)).then((function(e){if(!(0,o.validateResponseStatus)(e.status))throw(0,o.createResponseStatusError)(e.status,l);a._readCapability.resolve(),a._reader=e.body.getReader()})).catch(this._readCapability.reject),this.onProgress=null}var t;return d(e,[{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:(t=l(a.default.mark((function e(){var t,r,n,i;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:return e.next=4,this._reader.read();case 4:if(t=e.sent,r=t.value,!(n=t.done)){e.next=9;break}return e.abrupt("return",{value:r,done:n});case 9:return this._loaded+=r.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),i=new Uint8Array(r).buffer,e.abrupt("return",{value:i,done:!1});case 13:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}}]),e}()}],__webpack_module_cache__={};function __w_pdfjs_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__w_pdfjs_require__),r.loaded=!0,r.exports}__w_pdfjs_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var __webpack_exports__={};return(()=>{"use strict";var e=__webpack_exports__;Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"AnnotationLayer",{enumerable:!0,get:function(){return a.AnnotationLayer}}),Object.defineProperty(e,"AnnotationMode",{enumerable:!0,get:function(){return r.AnnotationMode}}),Object.defineProperty(e,"CMapCompressionType",{enumerable:!0,get:function(){return r.CMapCompressionType}}),Object.defineProperty(e,"GlobalWorkerOptions",{enumerable:!0,get:function(){return i.GlobalWorkerOptions}}),Object.defineProperty(e,"InvalidPDFException",{enumerable:!0,get:function(){return r.InvalidPDFException}}),Object.defineProperty(e,"LinkTarget",{enumerable:!0,get:function(){return t.LinkTarget}}),Object.defineProperty(e,"LoopbackPort",{enumerable:!0,get:function(){return n.LoopbackPort}}),Object.defineProperty(e,"MissingPDFException",{enumerable:!0,get:function(){return r.MissingPDFException}}),Object.defineProperty(e,"OPS",{enumerable:!0,get:function(){return r.OPS}}),Object.defineProperty(e,"PDFDataRangeTransport",{enumerable:!0,get:function(){return n.PDFDataRangeTransport}}),Object.defineProperty(e,"PDFDateString",{enumerable:!0,get:function(){return t.PDFDateString}}),Object.defineProperty(e,"PDFWorker",{enumerable:!0,get:function(){return n.PDFWorker}}),Object.defineProperty(e,"PasswordResponses",{enumerable:!0,get:function(){return r.PasswordResponses}}),Object.defineProperty(e,"PermissionFlag",{enumerable:!0,get:function(){return r.PermissionFlag}}),Object.defineProperty(e,"PixelsPerInch",{enumerable:!0,get:function(){return t.PixelsPerInch}}),Object.defineProperty(e,"RenderingCancelledException",{enumerable:!0,get:function(){return t.RenderingCancelledException}}),Object.defineProperty(e,"SVGGraphics",{enumerable:!0,get:function(){return l.SVGGraphics}}),Object.defineProperty(e,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return r.UNSUPPORTED_FEATURES}}),Object.defineProperty(e,"UnexpectedResponseException",{enumerable:!0,get:function(){return r.UnexpectedResponseException}}),Object.defineProperty(e,"Util",{enumerable:!0,get:function(){return r.Util}}),Object.defineProperty(e,"VerbosityLevel",{enumerable:!0,get:function(){return r.VerbosityLevel}}),Object.defineProperty(e,"XfaLayer",{enumerable:!0,get:function(){return u.XfaLayer}}),Object.defineProperty(e,"addLinkAttributes",{enumerable:!0,get:function(){return t.addLinkAttributes}}),Object.defineProperty(e,"build",{enumerable:!0,get:function(){return n.build}}),Object.defineProperty(e,"createObjectURL",{enumerable:!0,get:function(){return r.createObjectURL}}),Object.defineProperty(e,"createPromiseCapability",{enumerable:!0,get:function(){return r.createPromiseCapability}}),Object.defineProperty(e,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return r.createValidAbsoluteUrl}}),Object.defineProperty(e,"getDocument",{enumerable:!0,get:function(){return n.getDocument}}),Object.defineProperty(e,"getFilenameFromUrl",{enumerable:!0,get:function(){return t.getFilenameFromUrl}}),Object.defineProperty(e,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return t.getPdfFilenameFromUrl}}),Object.defineProperty(e,"getXfaPageViewport",{enumerable:!0,get:function(){return t.getXfaPageViewport}}),Object.defineProperty(e,"isPdfFile",{enumerable:!0,get:function(){return t.isPdfFile}}),Object.defineProperty(e,"loadScript",{enumerable:!0,get:function(){return t.loadScript}}),Object.defineProperty(e,"removeNullCharacters",{enumerable:!0,get:function(){return r.removeNullCharacters}}),Object.defineProperty(e,"renderTextLayer",{enumerable:!0,get:function(){return s.renderTextLayer}}),Object.defineProperty(e,"shadow",{enumerable:!0,get:function(){return r.shadow}}),Object.defineProperty(e,"version",{enumerable:!0,get:function(){return n.version}});var t=__w_pdfjs_require__(1),r=__w_pdfjs_require__(4),n=__w_pdfjs_require__(136),a=__w_pdfjs_require__(148),i=__w_pdfjs_require__(142),o=__w_pdfjs_require__(6),s=__w_pdfjs_require__(151),l=__w_pdfjs_require__(152),u=__w_pdfjs_require__(150);if(o.isNodeJS){var c=__w_pdfjs_require__(153).PDFNodeStream;(0,n.setPDFNetworkStreamFactory)((function(e){return new c(e)}))}else{var f=__w_pdfjs_require__(156).PDFNetworkStream,d=__w_pdfjs_require__(157).PDFFetchStream;(0,n.setPDFNetworkStreamFactory)((function(e){return(0,t.isValidFetchUrl)(e.url)?new d(e):new f(e)}))}})(),__webpack_exports__})()},module.exports=factory()},8679:(e,t,r)=>{"use strict";var n=r(59864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return n.isMemo(e)?o:s[e.$$typeof]||a}s[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[n.Memo]=o;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(p){var a=h(r);a&&a!==p&&e(t,a,n)}var o=c(r);f&&(o=o.concat(f(r)));for(var s=l(t),v=l(r),m=0;m<o.length;++m){var y=o[m];if(!(i[y]||n&&n[y]||v&&v[y]||s&&s[y])){var g=d(r,y);try{u(t,y,g)}catch(e){}}}}return t}},57460:function(e,t){var r,n;r=function e(){"use strict";var t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{},r=!t.document&&!!t.postMessage,n=r&&/blob:/i.test((t.location||{}).protocol),a={},i=0,o={parse:function(r,n){var s=(n=n||{}).dynamicTyping||!1;if(S(s)&&(n.dynamicTypingFunction=s,s={}),n.dynamicTyping=s,n.transform=!!S(n.transform)&&n.transform,n.worker&&o.WORKERS_SUPPORTED){var l=function(){if(!o.WORKERS_SUPPORTED)return!1;var r,n,s=(r=t.URL||t.webkitURL||null,n=e.toString(),o.BLOB_URL||(o.BLOB_URL=r.createObjectURL(new Blob(["(",n,")();"],{type:"text/javascript"})))),l=new t.Worker(s);return l.onmessage=m,l.id=i++,a[l.id]=l}();return l.userStep=n.step,l.userChunk=n.chunk,l.userComplete=n.complete,l.userError=n.error,n.step=S(n.step),n.chunk=S(n.chunk),n.complete=S(n.complete),n.error=S(n.error),delete n.worker,void l.postMessage({input:r,config:n,workerId:l.id})}var h=null;return o.NODE_STREAM_INPUT,"string"==typeof r?h=n.download?new u(n):new f(n):!0===r.readable&&S(r.read)&&S(r.on)?h=new d(n):(t.File&&r instanceof File||r instanceof Object)&&(h=new c(n)),h.stream(r)},unparse:function(e,t){var r=!1,n=!0,a=",",i="\r\n",s='"',l=s+s,u=!1,c=null,f=!1;!function(){if("object"==typeof t){if("string"!=typeof t.delimiter||o.BAD_DELIMITERS.filter((function(e){return-1!==t.delimiter.indexOf(e)})).length||(a=t.delimiter),("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(r=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(u=t.skipEmptyLines),"string"==typeof t.newline&&(i=t.newline),"string"==typeof t.quoteChar&&(s=t.quoteChar),"boolean"==typeof t.header&&(n=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");c=t.columns}void 0!==t.escapeChar&&(l=t.escapeChar+s),("boolean"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(f=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\-@\t\r].*$/)}}();var d=new RegExp(p(s),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,u);if("object"==typeof e[0])return h(c||Object.keys(e[0]),e,u)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||c),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:"object"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],u);throw new Error("Unable to serialize unrecognized input");function h(e,t,r){var o="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&n){for(var u=0;u<e.length;u++)0<u&&(o+=a),o+=v(e[u],u);0<t.length&&(o+=i)}for(var c=0;c<t.length;c++){var f=s?e.length:t[c].length,d=!1,h=s?0===Object.keys(t[c]).length:0===t[c].length;if(r&&!s&&(d="greedy"===r?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===r&&s){for(var p=[],m=0;m<f;m++){var y=l?e[m]:m;p.push(t[c][y])}d=""===p.join("").trim()}if(!d){for(var g=0;g<f;g++){0<g&&!h&&(o+=a);var b=s&&l?e[g]:g;o+=v(t[c][b],g)}c<t.length-1&&(!r||0<f&&!h)&&(o+=i)}}return o}function v(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var n=!1;f&&"string"==typeof e&&f.test(e)&&(e="'"+e,n=!0);var i=e.toString().replace(d,l);return(n=n||!0===r||"function"==typeof r&&r(e,t)||Array.isArray(r)&&r[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,o.BAD_DELIMITERS)||-1<i.indexOf(a)||" "===i.charAt(0)||" "===i.charAt(i.length-1))?s+i+s:i}}};if(o.RECORD_SEP=String.fromCharCode(30),o.UNIT_SEP=String.fromCharCode(31),o.BYTE_ORDER_MARK="\ufeff",o.BAD_DELIMITERS=["\r","\n",'"',o.BYTE_ORDER_MARK],o.WORKERS_SUPPORTED=!r&&!!t.Worker,o.NODE_STREAM_INPUT=1,o.LocalChunkSize=10485760,o.RemoteChunkSize=5242880,o.DefaultDelimiter=",",o.Parser=v,o.ParserHandle=h,o.NetworkStreamer=u,o.FileStreamer=c,o.StringStreamer=f,o.ReadableStreamStreamer=d,t.jQuery){var s=t.jQuery;s.fn.parse=function(e){var r=e.config||{},n=[];return this.each((function(e){if("INPUT"!==s(this).prop("tagName").toUpperCase()||"file"!==s(this).attr("type").toLowerCase()||!t.FileReader||!this.files||0===this.files.length)return!0;for(var a=0;a<this.files.length;a++)n.push({file:this.files[a],inputElem:this,instanceConfig:s.extend({},r)})})),a(),this;function a(){if(0!==n.length){var t,r,a,l=n[0];if(S(e.before)){var u=e.before(l.file,l.inputElem);if("object"==typeof u){if("abort"===u.action)return"AbortError",t=l.file,r=l.inputElem,a=u.reason,void(S(e.error)&&e.error({name:"AbortError"},t,r,a));if("skip"===u.action)return void i();"object"==typeof u.config&&(l.instanceConfig=s.extend(l.instanceConfig,u.config))}else if("skip"===u)return void i()}var c=l.instanceConfig.complete;l.instanceConfig.complete=function(e){S(c)&&c(e,l.file,l.inputElem),i()},o.parse(l.file,l.instanceConfig)}else S(e.complete)&&e.complete()}function i(){n.splice(0,1),a()}}}function l(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new h(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,r){if(this.isFirstChunk&&S(this._config.beforeFirstChunk)){var a=this._config.beforeFirstChunk(e);void 0!==a&&(e=a)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine="";var s=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var l=s.meta.cursor;this._finished||(this._partialLine=i.substring(l-this._baseIndex),this._baseIndex=l),s&&s.data&&(this._rowCount+=s.data.length);var u=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(n)t.postMessage({results:s,workerId:o.WORKER_ID,finished:u});else if(S(this._config.chunk)&&!r){if(this._config.chunk(s,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);s=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(s.data),this._completeResults.errors=this._completeResults.errors.concat(s.errors),this._completeResults.meta=s.meta),this._completed||!u||!S(this._config.complete)||s&&s.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),u||s&&s.meta.paused||this._nextChunk(),s}this._halted=!0},this._sendError=function(e){S(this._config.error)?this._config.error(e):n&&this._config.error&&t.postMessage({workerId:o.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=o.RemoteChunkSize),l.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)),t.open(this._config.downloadRequestBody?"POST":"GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var a=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+a)}try{t.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}r&&0===t.status&&this._chunkError()}},this._chunkLoaded=function(){4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:t.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");return null===t?-1:parseInt(t.substring(t.lastIndexOf("/")+1))}(t),this.parseChunk(t.responseText)))},this._chunkError=function(e){var r=t.statusText||e;this._sendError(new Error(r))}}function c(e){var t,r;(e=e||{}).chunkSize||(e.chunkSize=o.LocalChunkSize),l.call(this,e);var n="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((t=new FileReader).onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var a=Math.min(this._start+this._config.chunkSize,this._input.size);e=r.call(e,this._start,a)}var i=t.readAsText(e,this._config.encoding);n||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;l.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,r=this._config.chunkSize;return r?(e=t.substring(0,r),t=t.substring(r)):(e=t,t=""),this._finished=!t,this.parseChunk(e)}}}function d(e){l.call(this,e=e||{});var t=[],r=!0,n=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){n&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=_((function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}}),this),this._streamError=_((function(e){this._streamCleanUp(),this._sendError(e)}),this),this._streamEnd=_((function(){this._streamCleanUp(),n=!0,this._streamData("")}),this),this._streamCleanUp=_((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function h(e){var t,r,n,a=Math.pow(2,53),i=-a,s=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,l=/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,u=this,c=0,f=0,d=!1,h=!1,m=[],y={data:[],errors:[],meta:{}};if(S(e.step)){var g=e.step;e.step=function(t){if(y=t,A())w();else{if(w(),0===y.data.length)return;c+=t.data.length,e.preview&&c>e.preview?r.abort():(y.data=y.data[0],g(y,u))}}}function _(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function w(){return y&&n&&(x("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+o.DefaultDelimiter+"'"),n=!1),e.skipEmptyLines&&(y.data=y.data.filter((function(e){return!_(e)}))),A()&&function(){if(y)if(Array.isArray(y.data[0])){for(var t=0;A()&&t<y.data.length;t++)y.data[t].forEach(r);y.data.splice(0,1)}else y.data.forEach(r);function r(t,r){S(e.transformHeader)&&(t=e.transformHeader(t,r)),m.push(t)}}(),function(){if(!y||!e.header&&!e.dynamicTyping&&!e.transform)return y;function t(t,r){var n,a=e.header?{}:[];for(n=0;n<t.length;n++){var i=n,o=t[n];e.header&&(i=n>=m.length?"__parsed_extra":m[n]),e.transform&&(o=e.transform(o,i)),o=k(i,o),"__parsed_extra"===i?(a[i]=a[i]||[],a[i].push(o)):a[i]=o}return e.header&&(n>m.length?x("FieldMismatch","TooManyFields","Too many fields: expected "+m.length+" fields but parsed "+n,f+r):n<m.length&&x("FieldMismatch","TooFewFields","Too few fields: expected "+m.length+" fields but parsed "+n,f+r)),a}var r=1;return!y.data.length||Array.isArray(y.data[0])?(y.data=y.data.map(t),r=y.data.length):y.data=t(y.data,0),e.header&&y.meta&&(y.meta.fields=m),f+=r,y}()}function A(){return e.header&&0===m.length}function k(t,r){return n=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[n]&&(e.dynamicTyping[n]=e.dynamicTypingFunction(n)),!0===(e.dynamicTyping[n]||e.dynamicTyping)?"true"===r||"TRUE"===r||"false"!==r&&"FALSE"!==r&&(function(e){if(s.test(e)){var t=parseFloat(e);if(i<t&&t<a)return!0}return!1}(r)?parseFloat(r):l.test(r)?new Date(r):""===r?null:r):r;var n}function x(e,t,r,n){var a={type:e,code:t,message:r};void 0!==n&&(a.row=n),y.errors.push(a)}this.parse=function(a,i,s){var l=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(p(t)+"([^]*?)"+p(t),"gm"),n=(e=e.replace(r,"")).split("\r"),a=e.split("\n"),i=1<a.length&&a[0].length<n[0].length;if(1===n.length||i)return"\n";for(var o=0,s=0;s<n.length;s++)"\n"===n[s][0]&&o++;return o>=n.length/2?"\r\n":"\r"}(a,l)),n=!1,e.delimiter)S(e.delimiter)&&(e.delimiter=e.delimiter(a),y.meta.delimiter=e.delimiter);else{var u=function(t,r,n,a,i){var s,l,u,c;i=i||[",","\t","|",";",o.RECORD_SEP,o.UNIT_SEP];for(var f=0;f<i.length;f++){var d=i[f],h=0,p=0,m=0;u=void 0;for(var y=new v({comments:a,delimiter:d,newline:r,preview:10}).parse(t),g=0;g<y.data.length;g++)if(n&&_(y.data[g]))m++;else{var b=y.data[g].length;p+=b,void 0!==u?0<b&&(h+=Math.abs(b-u),u=b):u=b}0<y.data.length&&(p/=y.data.length-m),(void 0===l||h<=l)&&(void 0===c||c<p)&&1.99<p&&(l=h,s=d,c=p)}return{successful:!!(e.delimiter=s),bestDelimiter:s}}(a,e.newline,e.skipEmptyLines,e.comments,e.delimitersToGuess);u.successful?e.delimiter=u.bestDelimiter:(n=!0,e.delimiter=o.DefaultDelimiter),y.meta.delimiter=e.delimiter}var c=b(e);return e.preview&&e.header&&c.preview++,t=a,r=new v(c),y=r.parse(t,i,s),w(),d?{meta:{paused:!0}}:y||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,r.abort(),t=S(e.chunk)?"":t.substring(r.getCharIndex())},this.resume=function(){u.streamer._halted?(d=!1,u.streamer.parseChunk(t,!0)):setTimeout(u.resume,3)},this.aborted=function(){return h},this.abort=function(){h=!0,r.abort(),y.meta.aborted=!0,S(e.complete)&&e.complete(y),t=""}}function p(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function v(e){var t,r=(e=e||{}).delimiter,n=e.newline,a=e.comments,i=e.step,s=e.preview,l=e.fastMode,u=t=void 0===e.quoteChar||null===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(u=e.escapeChar),("string"!=typeof r||-1<o.BAD_DELIMITERS.indexOf(r))&&(r=","),a===r)throw new Error("Comment character same as delimiter");!0===a?a="#":("string"!=typeof a||-1<o.BAD_DELIMITERS.indexOf(a))&&(a=!1),"\n"!==n&&"\r"!==n&&"\r\n"!==n&&(n="\n");var c=0,f=!1;this.parse=function(e,o,d){if("string"!=typeof e)throw new Error("Input must be a string");var h=e.length,v=r.length,m=n.length,y=a.length,g=S(i),b=[],_=[],w=[],A=c=0;if(!e)return M();if(l||!1!==l&&-1===e.indexOf(t)){for(var k=e.split(n),x=0;x<k.length;x++){if(w=k[x],c+=w.length,x!==k.length-1)c+=n.length;else if(d)return M();if(!a||w.substring(0,y)!==a){if(g){if(b=[],I(w.split(r)),N(),f)return M()}else I(w.split(r));if(s&&s<=x)return b=b.slice(0,s),M(!0)}}return M()}for(var E=e.indexOf(r,c),P=e.indexOf(n,c),C=new RegExp(p(u)+p(t),"g"),T=e.indexOf(t,c);;)if(e[c]!==t)if(a&&0===w.length&&e.substring(c,c+y)===a){if(-1===P)return M();c=P+m,P=e.indexOf(n,c),E=e.indexOf(r,c)}else if(-1!==E&&(E<P||-1===P))w.push(e.substring(c,E)),c=E+v,E=e.indexOf(r,c);else{if(-1===P)break;if(w.push(e.substring(c,P)),L(P+m),g&&(N(),f))return M();if(s&&b.length>=s)return M(!0)}else for(T=c,c++;;){if(-1===(T=e.indexOf(t,T+1)))return d||_.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:b.length,index:c}),D();if(T===h-1)return D(e.substring(c,T).replace(C,t));if(t!==u||e[T+1]!==u){if(t===u||0===T||e[T-1]!==u){-1!==E&&E<T+1&&(E=e.indexOf(r,T+1)),-1!==P&&P<T+1&&(P=e.indexOf(n,T+1));var R=F(-1===P?E:Math.min(E,P));if(e.substr(T+1+R,v)===r){w.push(e.substring(c,T).replace(C,t)),e[c=T+1+R+v]!==t&&(T=e.indexOf(t,c)),E=e.indexOf(r,c),P=e.indexOf(n,c);break}var O=F(P);if(e.substring(T+1+O,T+1+O+m)===n){if(w.push(e.substring(c,T).replace(C,t)),L(T+1+O+m),E=e.indexOf(r,c),T=e.indexOf(t,c),g&&(N(),f))return M();if(s&&b.length>=s)return M(!0);break}_.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:b.length,index:c}),T++}}else T++}return D();function I(e){b.push(e),A=c}function F(t){var r=0;if(-1!==t){var n=e.substring(T+1,t);n&&""===n.trim()&&(r=n.length)}return r}function D(t){return d||(void 0===t&&(t=e.substring(c)),w.push(t),c=h,I(w),g&&N()),M()}function L(t){c=t,I(w),w=[],P=e.indexOf(n,c)}function M(e){return{data:b,errors:_,meta:{delimiter:r,linebreak:n,aborted:f,truncated:!!e,cursor:A+(o||0)}}}function N(){i(M()),b=[],_=[]}},this.abort=function(){f=!0},this.getCharIndex=function(){return c}}function m(e){var t=e.data,r=a[t.workerId],n=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){n=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:g,resume:g};if(S(r.userStep)){for(var o=0;o<t.results.data.length&&(r.userStep({data:t.results.data[o],errors:t.results.errors,meta:t.results.meta},i),!n);o++);delete t.results}else S(r.userChunk)&&(r.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!n&&y(t.workerId,t.results)}function y(e,t){var r=a[e];S(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function g(){throw new Error("Not implemented.")}function b(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=b(e[r]);return t}function _(e,t){return function(){e.apply(t,arguments)}}function S(e){return"function"==typeof e}return n&&(t.onmessage=function(e){var r=e.data;if(void 0===o.WORKER_ID&&r&&(o.WORKER_ID=r.workerId),"string"==typeof r.input)t.postMessage({workerId:o.WORKER_ID,results:o.parse(r.input,r.config),finished:!0});else if(t.File&&r.input instanceof File||r.input instanceof Object){var n=o.parse(r.input,r.config);n&&t.postMessage({workerId:o.WORKER_ID,results:n,finished:!0})}}),(u.prototype=Object.create(l.prototype)).constructor=u,(c.prototype=Object.create(l.prototype)).constructor=c,(f.prototype=Object.create(f.prototype)).constructor=f,(d.prototype=Object.create(l.prototype)).constructor=d,o},void 0===(n=r.apply(t,[]))||(e.exports=n)},92703:(e,t,r)=>{"use strict";var n=r(50414);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,r,a,i,o){if(o!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return r.PropTypes=r,r}},45697:(e,t,r)=>{e.exports=r(92703)()},50414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},96774:e=>{e.exports=function(e,t,r,n){var a=r?r.call(n,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),o=Object.keys(t);if(i.length!==o.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<i.length;l++){var u=i[l];if(!s(u))return!1;var c=e[u],f=t[u];if(!1===(a=r?r.call(n,c,f,u):void 0)||void 0===a&&c!==f)return!1}return!0}},51116:(e,t,r)=>{"use strict";r(96558),t.MSGReader=r(68706)},96558:function(e,t,r){var n,a;void 0===(a="function"==typeof(n=function(){return DataStream=function(e,t,r){this._byteOffset=t||0,e instanceof ArrayBuffer?this.buffer=e:"object"==typeof e?(this.dataView=e,t&&(this._byteOffset+=t)):this.buffer=new ArrayBuffer(e||1),this.position=0,this.endianness=null==r?DataStream.LITTLE_ENDIAN:r},DataStream.prototype={},void 0===Uint8Array.prototype.BYTES_PER_ELEMENT&&(Uint8Array.prototype.BYTES_PER_ELEMENT=Uint8Array.BYTES_PER_ELEMENT,Int8Array.prototype.BYTES_PER_ELEMENT=Int8Array.BYTES_PER_ELEMENT,Uint8ClampedArray.prototype.BYTES_PER_ELEMENT=Uint8ClampedArray.BYTES_PER_ELEMENT,Uint16Array.prototype.BYTES_PER_ELEMENT=Uint16Array.BYTES_PER_ELEMENT,Int16Array.prototype.BYTES_PER_ELEMENT=Int16Array.BYTES_PER_ELEMENT,Uint32Array.prototype.BYTES_PER_ELEMENT=Uint32Array.BYTES_PER_ELEMENT,Int32Array.prototype.BYTES_PER_ELEMENT=Int32Array.BYTES_PER_ELEMENT,Float64Array.prototype.BYTES_PER_ELEMENT=Float64Array.BYTES_PER_ELEMENT),DataStream.prototype.save=function(e){var t=new Blob(this.buffer),r=window.webkitURL||window.URL;if(!r||!r.createObjectURL)throw"DataStream.save: Can't create object URL.";var n=r.createObjectURL(t),a=document.createElement("a");a.setAttribute("href",n),a.setAttribute("download",e),a.click(),r.revokeObjectURL(n)},DataStream.BIG_ENDIAN=!1,DataStream.LITTLE_ENDIAN=!0,DataStream.prototype._dynamicSize=!0,Object.defineProperty(DataStream.prototype,"dynamicSize",{get:function(){return this._dynamicSize},set:function(e){e||this._trimAlloc(),this._dynamicSize=e}}),DataStream.prototype._byteLength=0,Object.defineProperty(DataStream.prototype,"byteLength",{get:function(){return this._byteLength-this._byteOffset}}),Object.defineProperty(DataStream.prototype,"buffer",{get:function(){return this._trimAlloc(),this._buffer},set:function(e){this._buffer=e,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}}),Object.defineProperty(DataStream.prototype,"byteOffset",{get:function(){return this._byteOffset},set:function(e){this._byteOffset=e,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}}),Object.defineProperty(DataStream.prototype,"dataView",{get:function(){return this._dataView},set:function(e){this._byteOffset=e.byteOffset,this._buffer=e.buffer,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._byteOffset+e.byteLength}}),DataStream.prototype._realloc=function(e){if(this._dynamicSize){var t=this._byteOffset+this.position+e,r=this._buffer.byteLength;if(t<=r)t>this._byteLength&&(this._byteLength=t);else{for(r<1&&(r=1);t>r;)r*=2;var n=new ArrayBuffer(r),a=new Uint8Array(this._buffer);new Uint8Array(n,0,a.length).set(a),this.buffer=n,this._byteLength=t}}},DataStream.prototype._trimAlloc=function(){if(this._byteLength!=this._buffer.byteLength){var e=new ArrayBuffer(this._byteLength),t=new Uint8Array(e),r=new Uint8Array(this._buffer,0,t.length);t.set(r),this.buffer=e}},DataStream.prototype.seek=function(e){var t=Math.max(0,Math.min(this.byteLength,e));this.position=isNaN(t)||!isFinite(t)?0:t},DataStream.prototype.isEof=function(){return this.position>=this.byteLength},DataStream.prototype.mapInt32Array=function(e,t){this._realloc(4*e);var r=new Int32Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=4*e,r},DataStream.prototype.mapInt16Array=function(e,t){this._realloc(2*e);var r=new Int16Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=2*e,r},DataStream.prototype.mapInt8Array=function(e){this._realloc(1*e);var t=new Int8Array(this._buffer,this.byteOffset+this.position,e);return this.position+=1*e,t},DataStream.prototype.mapUint32Array=function(e,t){this._realloc(4*e);var r=new Uint32Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=4*e,r},DataStream.prototype.mapUint16Array=function(e,t){this._realloc(2*e);var r=new Uint16Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=2*e,r},DataStream.prototype.mapUint8Array=function(e){this._realloc(1*e);var t=new Uint8Array(this._buffer,this.byteOffset+this.position,e);return this.position+=1*e,t},DataStream.prototype.mapFloat64Array=function(e,t){this._realloc(8*e);var r=new Float64Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=8*e,r},DataStream.prototype.mapFloat32Array=function(e,t){this._realloc(4*e);var r=new Float32Array(this._buffer,this.byteOffset+this.position,e);return DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=4*e,r},DataStream.prototype.readInt32Array=function(e,t){e=null==e?this.byteLength-this.position/4:e;var r=new Int32Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.readInt16Array=function(e,t){e=null==e?this.byteLength-this.position/2:e;var r=new Int16Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.readInt8Array=function(e){e=null==e?this.byteLength-this.position:e;var t=new Int8Array(e);return DataStream.memcpy(t.buffer,0,this.buffer,this.byteOffset+this.position,e*t.BYTES_PER_ELEMENT),this.position+=t.byteLength,t},DataStream.prototype.readUint32Array=function(e,t){e=null==e?this.byteLength-this.position/4:e;var r=new Uint32Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.readUint16Array=function(e,t){e=null==e?this.byteLength-this.position/2:e;var r=new Uint16Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.readUint8Array=function(e){e=null==e?this.byteLength-this.position:e;var t=new Uint8Array(e);return DataStream.memcpy(t.buffer,0,this.buffer,this.byteOffset+this.position,e*t.BYTES_PER_ELEMENT),this.position+=t.byteLength,t},DataStream.prototype.readFloat64Array=function(e,t){e=null==e?this.byteLength-this.position/8:e;var r=new Float64Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.readFloat32Array=function(e,t){e=null==e?this.byteLength-this.position/4:e;var r=new Float32Array(e);return DataStream.memcpy(r.buffer,0,this.buffer,this.byteOffset+this.position,e*r.BYTES_PER_ELEMENT),DataStream.arrayToNative(r,null==t?this.endianness:t),this.position+=r.byteLength,r},DataStream.prototype.writeInt32Array=function(e,t){if(this._realloc(4*e.length),e instanceof Int32Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapInt32Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeInt32(e[r],t)},DataStream.prototype.writeInt16Array=function(e,t){if(this._realloc(2*e.length),e instanceof Int16Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapInt16Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeInt16(e[r],t)},DataStream.prototype.writeInt8Array=function(e){if(this._realloc(1*e.length),e instanceof Int8Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapInt8Array(e.length);else for(var t=0;t<e.length;t++)this.writeInt8(e[t])},DataStream.prototype.writeUint32Array=function(e,t){if(this._realloc(4*e.length),e instanceof Uint32Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapUint32Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeUint32(e[r],t)},DataStream.prototype.writeUint16Array=function(e,t){if(this._realloc(2*e.length),e instanceof Uint16Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapUint16Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeUint16(e[r],t)},DataStream.prototype.writeUint8Array=function(e){if(this._realloc(1*e.length),e instanceof Uint8Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapUint8Array(e.length);else for(var t=0;t<e.length;t++)this.writeUint8(e[t])},DataStream.prototype.writeFloat64Array=function(e,t){if(this._realloc(8*e.length),e instanceof Float64Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapFloat64Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeFloat64(e[r],t)},DataStream.prototype.writeFloat32Array=function(e,t){if(this._realloc(4*e.length),e instanceof Float32Array&&this.byteOffset+this.position%e.BYTES_PER_ELEMENT==0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,0,e.byteLength),this.mapFloat32Array(e.length,t);else for(var r=0;r<e.length;r++)this.writeFloat32(e[r],t)},DataStream.prototype.readInt32=function(e){var t=this._dataView.getInt32(this.position,null==e?this.endianness:e);return this.position+=4,t},DataStream.prototype.readInt=function(e){return this.seek(e),this.readInt32()},DataStream.prototype.readInt16=function(e){var t=this._dataView.getInt16(this.position,null==e?this.endianness:e);return this.position+=2,t},DataStream.prototype.readShort=function(e){return this.seek(e),this.readInt16()},DataStream.prototype.readInt8=function(){var e=this._dataView.getInt8(this.position);return this.position+=1,e},DataStream.prototype.readByte=function(e){return this.seek(e),this.readInt8()},DataStream.prototype.readUint32=function(e){var t=this._dataView.getUint32(this.position,null==e?this.endianness:e);return this.position+=4,t},DataStream.prototype.readUint16=function(e){var t=this._dataView.getUint16(this.position,null==e?this.endianness:e);return this.position+=2,t},DataStream.prototype.readUint8=function(){var e=this._dataView.getUint8(this.position);return this.position+=1,e},DataStream.prototype.readFloat32=function(e){var t=this._dataView.getFloat32(this.position,null==e?this.endianness:e);return this.position+=4,t},DataStream.prototype.readFloat64=function(e){var t=this._dataView.getFloat64(this.position,null==e?this.endianness:e);return this.position+=8,t},DataStream.prototype.writeInt32=function(e,t){this._realloc(4),this._dataView.setInt32(this.position,e,null==t?this.endianness:t),this.position+=4},DataStream.prototype.writeInt16=function(e,t){this._realloc(2),this._dataView.setInt16(this.position,e,null==t?this.endianness:t),this.position+=2},DataStream.prototype.writeInt8=function(e){this._realloc(1),this._dataView.setInt8(this.position,e),this.position+=1},DataStream.prototype.writeUint32=function(e,t){this._realloc(4),this._dataView.setUint32(this.position,e,null==t?this.endianness:t),this.position+=4},DataStream.prototype.writeUint16=function(e,t){this._realloc(2),this._dataView.setUint16(this.position,e,null==t?this.endianness:t),this.position+=2},DataStream.prototype.writeUint8=function(e){this._realloc(1),this._dataView.setUint8(this.position,e),this.position+=1},DataStream.prototype.writeFloat32=function(e,t){this._realloc(4),this._dataView.setFloat32(this.position,e,null==t?this.endianness:t),this.position+=4},DataStream.prototype.writeFloat64=function(e,t){this._realloc(8),this._dataView.setFloat64(this.position,e,null==t?this.endianness:t),this.position+=8},DataStream.endianness=new Int8Array(new Int16Array([1]).buffer)[0]>0,DataStream.memcpy=function(e,t,r,n,a){var i=new Uint8Array(e,t,a),o=new Uint8Array(r,n,a);i.set(o)},DataStream.arrayToNative=function(e,t){return t==this.endianness?e:this.flipArrayEndianness(e)},DataStream.nativeToEndian=function(e,t){return this.endianness==t?e:this.flipArrayEndianness(e)},DataStream.flipArrayEndianness=function(e){for(var t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength),r=0;r<e.byteLength;r+=e.BYTES_PER_ELEMENT)for(var n=r+e.BYTES_PER_ELEMENT-1,a=r;n>a;n--,a++){var i=t[a];t[a]=t[n],t[n]=i}return e},DataStream.createStringFromArray=function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},DataStream.prototype.failurePosition=0,DataStream.prototype.readStruct=function(e){for(var t,r,n={},a=this.position,i=0;i<e.length;i+=2){if(t=e[i+1],null==(r=this.readType(t,n)))return 0==this.failurePosition&&(this.failurePosition=this.position),this.position=a,null;n[e[i]]=r}return n},DataStream.prototype.readUCS2String=function(e,t){return DataStream.createStringFromArray(this.readUint16Array(e,t))},DataStream.prototype.readStringAt=function(e,t){return this.seek(e),this.readUCS2String(t)},DataStream.prototype.writeUCS2String=function(e,t,r){null==r&&(r=e.length);for(var n=0;n<e.length&&n<r;n++)this.writeUint16(e.charCodeAt(n),t);for(;n<r;n++)this.writeUint16(0)},DataStream.prototype.readString=function(e,t){return null==t||"ASCII"==t?DataStream.createStringFromArray(this.mapUint8Array(null==e?this.byteLength-this.position:e)):new TextDecoder(t).decode(this.mapUint8Array(e))},DataStream.prototype.writeString=function(e,t,r){if(null==t||"ASCII"==t)if(null!=r){var n=0,a=Math.min(e.length,r);for(n=0;n<a;n++)this.writeUint8(e.charCodeAt(n));for(;n<r;n++)this.writeUint8(0)}else for(n=0;n<e.length;n++)this.writeUint8(e.charCodeAt(n));else this.writeUint8Array(new TextEncoder(t).encode(e.substring(0,r)))},DataStream.prototype.readCString=function(e){var t=this.byteLength-this.position,r=new Uint8Array(this._buffer,this._byteOffset+this.position),n=t;null!=e&&(n=Math.min(e,t));for(var a=0;a<n&&0!=r[a];a++);var i=DataStream.createStringFromArray(this.mapUint8Array(a));return null!=e?this.position+=n-a:a!=t&&(this.position+=1),i},DataStream.prototype.writeCString=function(e,t){if(null!=t){var r=0,n=Math.min(e.length,t);for(r=0;r<n;r++)this.writeUint8(e.charCodeAt(r));for(;r<t;r++)this.writeUint8(0)}else{for(r=0;r<e.length;r++)this.writeUint8(e.charCodeAt(r));this.writeUint8(0)}},DataStream.prototype.readType=function(e,t){if("function"==typeof e)return e(this,t);if(!("object"!=typeof e||e instanceof Array))return e.get(this,t);if(e instanceof Array&&3!=e.length)return this.readStruct(e,t);var r=null,n=null,a="ASCII",i=this.position;if("string"==typeof e&&/:/.test(e)){var o=e.split(":");e=o[0],n=null!=t[s=o[1]]?parseInt(t[s]):parseInt(o[1])}switch("string"==typeof e&&/,/.test(e)&&(o=e.split(","),e=o[0],a=parseInt(o[1])),e){case"uint8":r=this.readUint8();break;case"int8":r=this.readInt8();break;case"uint16":r=this.readUint16(this.endianness);break;case"int16":r=this.readInt16(this.endianness);break;case"uint32":r=this.readUint32(this.endianness);break;case"int32":r=this.readInt32(this.endianness);break;case"float32":r=this.readFloat32(this.endianness);break;case"float64":r=this.readFloat64(this.endianness);break;case"uint16be":r=this.readUint16(DataStream.BIG_ENDIAN);break;case"int16be":r=this.readInt16(DataStream.BIG_ENDIAN);break;case"uint32be":r=this.readUint32(DataStream.BIG_ENDIAN);break;case"int32be":r=this.readInt32(DataStream.BIG_ENDIAN);break;case"float32be":r=this.readFloat32(DataStream.BIG_ENDIAN);break;case"float64be":r=this.readFloat64(DataStream.BIG_ENDIAN);break;case"uint16le":r=this.readUint16(DataStream.LITTLE_ENDIAN);break;case"int16le":r=this.readInt16(DataStream.LITTLE_ENDIAN);break;case"uint32le":r=this.readUint32(DataStream.LITTLE_ENDIAN);break;case"int32le":r=this.readInt32(DataStream.LITTLE_ENDIAN);break;case"float32le":r=this.readFloat32(DataStream.LITTLE_ENDIAN);break;case"float64le":r=this.readFloat64(DataStream.LITTLE_ENDIAN);break;case"cstring":r=this.readCString(n);break;case"string":r=this.readString(n,a);break;case"u16string":r=this.readUCS2String(n,this.endianness);break;case"u16stringle":r=this.readUCS2String(n,DataStream.LITTLE_ENDIAN);break;case"u16stringbe":r=this.readUCS2String(n,DataStream.BIG_ENDIAN);break;default:if(3==e.length){var s,l=e[1],u=0;if(u="function"==typeof(s=e[2])?s(t,this,e):"string"==typeof s&&null!=t[s]?parseInt(t[s]):parseInt(s),"string"==typeof l){var c=l.replace(/(le|be)$/,""),f=null;switch(/le$/.test(l)?f=DataStream.LITTLE_ENDIAN:/be$/.test(l)&&(f=DataStream.BIG_ENDIAN),"*"==s&&(u=null),c){case"uint8":r=this.readUint8Array(u);break;case"uint16":r=this.readUint16Array(u,f);break;case"uint32":r=this.readUint32Array(u,f);break;case"int8":r=this.readInt8Array(u);break;case"int16":r=this.readInt16Array(u,f);break;case"int32":r=this.readInt32Array(u,f);break;case"float32":r=this.readFloat32Array(u,f);break;case"float64":r=this.readFloat64Array(u,f);break;case"cstring":case"utf16string":case"string":if(null==u)for(r=[];!this.isEof()&&null!=(v=this.readType(l,t));)r.push(v);else{r=new Array(u);for(var d=0;d<u;d++)r[d]=this.readType(l,t)}}}else if("*"==s)for(r=[],this.buffer;;){var h=this.position;try{var p=this.readType(l,t);if(null==p){this.position=h;break}r.push(p)}catch(e){this.position=h;break}}else for(r=new Array(u),d=0;d<u;d++){var v;if(null==(v=this.readType(l,t)))return null;r[d]=v}break}}return null!=n&&(this.position=i+n),r},DataStream.prototype.writeStruct=function(e,t){for(var r=0;r<e.length;r+=2){var n=e[r+1];this.writeType(n,t[e[r]],t)}},DataStream.prototype.writeType=function(e,t,r){if("function"==typeof e)return e(this,t);if("object"==typeof e&&!(e instanceof Array))return e.set(this,t,r);var n=null,a="ASCII",i=this.position;if("string"==typeof e&&/:/.test(e)){var o=e.split(":");e=o[0],n=parseInt(o[1])}switch("string"==typeof e&&/,/.test(e)&&(o=e.split(","),e=o[0],a=parseInt(o[1])),e){case"uint8":this.writeUint8(t);break;case"int8":this.writeInt8(t);break;case"uint16":this.writeUint16(t,this.endianness);break;case"int16":this.writeInt16(t,this.endianness);break;case"uint32":this.writeUint32(t,this.endianness);break;case"int32":this.writeInt32(t,this.endianness);break;case"float32":this.writeFloat32(t,this.endianness);break;case"float64":this.writeFloat64(t,this.endianness);break;case"uint16be":this.writeUint16(t,DataStream.BIG_ENDIAN);break;case"int16be":this.writeInt16(t,DataStream.BIG_ENDIAN);break;case"uint32be":this.writeUint32(t,DataStream.BIG_ENDIAN);break;case"int32be":this.writeInt32(t,DataStream.BIG_ENDIAN);break;case"float32be":this.writeFloat32(t,DataStream.BIG_ENDIAN);break;case"float64be":this.writeFloat64(t,DataStream.BIG_ENDIAN);break;case"uint16le":this.writeUint16(t,DataStream.LITTLE_ENDIAN);break;case"int16le":this.writeInt16(t,DataStream.LITTLE_ENDIAN);break;case"uint32le":this.writeUint32(t,DataStream.LITTLE_ENDIAN);break;case"int32le":this.writeInt32(t,DataStream.LITTLE_ENDIAN);break;case"float32le":this.writeFloat32(t,DataStream.LITTLE_ENDIAN);break;case"float64le":this.writeFloat64(t,DataStream.LITTLE_ENDIAN);break;case"cstring":this.writeCString(t,n);break;case"string":this.writeString(t,a,n);break;case"u16string":this.writeUCS2String(t,this.endianness,n);break;case"u16stringle":this.writeUCS2String(t,DataStream.LITTLE_ENDIAN,n);break;case"u16stringbe":this.writeUCS2String(t,DataStream.BIG_ENDIAN,n);break;default:if(3==e.length){for(var s=e[1],l=0;l<t.length;l++)this.writeType(s,t[l]);break}this.writeStruct(e,t)}null!=n&&(this.position=i,this._realloc(n),this.position=i+n)},DataStream})?n.call(t,r,t,e):n)||(e.exports=a)},68706:function(e,t,r){var n,a,i;a=[r(96558)],void 0===(i="function"==typeof(n=function(e){var t={FILE_HEADER:function(e){for(var t=new Array(e.length),r=0;r<e.length;r++)t[r]=e[r]<<24>>24;return t}([208,207,17,224,161,177,26,225]),MSG:{UNUSED_BLOCK:-1,END_OF_CHAIN:-2,S_BIG_BLOCK_SIZE:512,S_BIG_BLOCK_MARK:9,L_BIG_BLOCK_SIZE:4096,L_BIG_BLOCK_MARK:12,SMALL_BLOCK_SIZE:64,BIG_BLOCK_MIN_DOC_SIZE:4096,HEADER:{PROPERTY_START_OFFSET:48,BAT_START_OFFSET:76,BAT_COUNT_OFFSET:44,SBAT_START_OFFSET:60,SBAT_COUNT_OFFSET:64,XBAT_START_OFFSET:68,XBAT_COUNT_OFFSET:72},PROP:{NO_INDEX:-1,PROPERTY_SIZE:128,NAME_SIZE_OFFSET:64,MAX_NAME_LENGTH:31,TYPE_OFFSET:66,PREVIOUS_PROPERTY_OFFSET:68,NEXT_PROPERTY_OFFSET:72,CHILD_PROPERTY_OFFSET:76,START_BLOCK_OFFSET:116,SIZE_OFFSET:120,TYPE_ENUM:{DIRECTORY:1,DOCUMENT:2,ROOT:5}},FIELD:{PREFIX:{ATTACHMENT:"__attach_version1.0",RECIPIENT:"__recip_version1.0",DOCUMENT:"__substg1."},NAME_MAPPING:{"0037":"subject","0c1a":"senderName","5d02":"senderEmail",1e3:"body","007d":"headers",3703:"extension",3704:"fileNameShort",3707:"fileName",3712:"pidContentId",3001:"name","39fe":"email"},CLASS_MAPPING:{ATTACHMENT_DATA:"3701"},TYPE_MAPPING:{"001e":"string","001f":"unicode","0102":"binary"},DIR_TYPE:{INNER_MSG:"000d"}}}};function r(e,t){return(t+1)*e.bigBlockSize}function n(e,t,n){var a=r(t,n);return e.seek(a),e.readInt32Array(t.bigBlockLength)}function a(e,t,r,a){var i=Math.floor(r/t.bigBlockLength),o=r%t.bigBlockLength;return n(e,t,a[i])[o]}function i(e,t,r){return a(e,t,r,t.batData)}function o(e,t,r){return a(e,t,r,t.sbatData)}function s(e){var r=function(e){var r={};return r.bigBlockSize=e.readByte(30)==t.MSG.L_BIG_BLOCK_MARK?t.MSG.L_BIG_BLOCK_SIZE:t.MSG.S_BIG_BLOCK_SIZE,r.bigBlockLength=r.bigBlockSize/4,r.xBlockLength=r.bigBlockLength-1,r.batCount=e.readInt(t.MSG.HEADER.BAT_COUNT_OFFSET),r.propertyStart=e.readInt(t.MSG.HEADER.PROPERTY_START_OFFSET),r.sbatStart=e.readInt(t.MSG.HEADER.SBAT_START_OFFSET),r.sbatCount=e.readInt(t.MSG.HEADER.SBAT_COUNT_OFFSET),r.xbatStart=e.readInt(t.MSG.HEADER.XBAT_START_OFFSET),r.xbatCount=e.readInt(t.MSG.HEADER.XBAT_COUNT_OFFSET),r}(e);return r.batData=function(e,r){var n=new Array(l(r));e.seek(t.MSG.HEADER.BAT_START_OFFSET);for(var a=0;a<n.length;a++)n[a]=e.readInt32();return n}(e,r),r.sbatData=function(e,r){for(var n=[],a=r.sbatStart,o=0;o<r.sbatCount&&a!=t.MSG.END_OF_CHAIN;o++)n.push(a),a=i(e,r,a);return n}(e,r),r.xbatCount>0&&function(e,r){for(var a=l(r),i=r.batCount-a,o=r.xbatStart,s=0;s<r.xbatCount;s++){var u=n(e,r,o);o=u[r.xBlockLength];for(var c=Math.min(i,r.xBlockLength),f=0;f<c;f++){var d=u[f];if(d==t.MSG.UNUSED_BLOCK||d==t.MSG.END_OF_CHAIN)break;r.batData.push(d)}i-=c}}(e,r),r.propertyData=function(e,r){for(var n=[],a=r.propertyStart;a!=t.MSG.END_OF_CHAIN;)f(e,r,a,n),a=i(e,r,a);return d(n,n[0]),n}(e,r),r.fieldsData=function(e,t){var r={attachments:[],recipients:[]};return h(e,t,t.propertyData[0],r),r}(e,r),r}function l(e){var r=(t.MSG.S_BIG_BLOCK_SIZE-t.MSG.HEADER.BAT_START_OFFSET)/4;return Math.min(e.batCount,r)}function u(e,r){var n=e.readShort(r+t.MSG.PROP.NAME_SIZE_OFFSET);return n<1?"":e.readStringAt(r,n/2)}function c(e,r,n){return{index:r,type:e.readByte(n+t.MSG.PROP.TYPE_OFFSET),name:u(e,n),previousProperty:e.readInt(n+t.MSG.PROP.PREVIOUS_PROPERTY_OFFSET),nextProperty:e.readInt(n+t.MSG.PROP.NEXT_PROPERTY_OFFSET),childProperty:e.readInt(n+t.MSG.PROP.CHILD_PROPERTY_OFFSET),startBlock:e.readInt(n+t.MSG.PROP.START_BLOCK_OFFSET),sizeBlock:e.readInt(n+t.MSG.PROP.SIZE_OFFSET)}}function f(e,n,a,i){for(var o=n.bigBlockSize/t.MSG.PROP.PROPERTY_SIZE,s=r(n,a),l=0;l<o;l++){switch(e.readByte(s+t.MSG.PROP.TYPE_OFFSET)){case t.MSG.PROP.TYPE_ENUM.ROOT:case t.MSG.PROP.TYPE_ENUM.DIRECTORY:case t.MSG.PROP.TYPE_ENUM.DOCUMENT:i.push(c(e,i.length,s));break;default:i.push(null)}s+=t.MSG.PROP.PROPERTY_SIZE}}function d(e,r){if(r.childProperty!=t.MSG.PROP.NO_INDEX){r.children=[];for(var n=[r.childProperty];0!=n.length;){var a=n.shift(),i=e[a];null!=i&&(r.children.push(a),i.type==t.MSG.PROP.TYPE_ENUM.DIRECTORY&&d(e,i),i.previousProperty!=t.MSG.PROP.NO_INDEX&&n.push(i.previousProperty),i.nextProperty!=t.MSG.PROP.NO_INDEX&&n.push(i.nextProperty))}}}function h(e,r,n,a){if(n.children&&n.children.length>0)for(var i=0;i<n.children.length;i++){var o=r.propertyData[n.children[i]];o.type==t.MSG.PROP.TYPE_ENUM.DIRECTORY?p(e,r,o,a):o.type==t.MSG.PROP.TYPE_ENUM.DOCUMENT&&0==o.name.indexOf(t.MSG.FIELD.PREFIX.DOCUMENT)&&v(e,r,o,a)}}function p(e,r,n,a){if(0==n.name.indexOf(t.MSG.FIELD.PREFIX.ATTACHMENT)){var i={};a.attachments.push(i),h(e,r,n,i)}else if(0==n.name.indexOf(t.MSG.FIELD.PREFIX.RECIPIENT)){var o={};a.recipients.push(o),h(e,r,n,o)}else m(n)!=t.MSG.FIELD.DIR_TYPE.INNER_MSG?h(e,r,n,a):a.innerMsgContent=!0}function v(e,r,n,a){var i=n.name.substring(12).toLowerCase(),o=i.substring(0,4),s=i.substring(4,8),l=t.MSG.FIELD.NAME_MAPPING[o];l&&(a[l]=b(e,r,n,s)),o==t.MSG.FIELD.CLASS_MAPPING.ATTACHMENT_DATA&&(a.dataId=n.index,a.contentLength=n.sizeBlock)}function m(e){return e.name.substring(12).toLowerCase().substring(4,8)}var y={sbat:{extractor:function(r,n,a,i){var s=function(e,r,n){for(var a=[],i=n.startBlock;i!=t.MSG.END_OF_CHAIN;)a.push(i),i=o(e,r,i);return a}(r,n,a);return 1==s.length?g(r,n,a.startBlock,a.sizeBlock,i):s.length>1?function(r,n,a,i,o){for(var s=new Int8Array(a.sizeBlock),l=0,u=0;l<i.length;l++)for(var c=g(r,n,i[l],t.MSG.SMALL_BLOCK_SIZE,y.sbat.dataType.binary),f=0;f<c.length;f++)s[u++]=c[f];return o(new e(s,0,e.LITTLE_ENDIAN),n,0,0,a.sizeBlock)}(r,n,a,s,i):null},dataType:{string:function(e,t,r,n,a){return e.seek(r+n),e.readString(a)},unicode:function(e,t,r,n,a){return e.seek(r+n),e.readUCS2String(a/2)},binary:function(e,r,n,a,i){e.seek(n+a);var o=Math.min(Math.min(r.bigBlockSize-a,i),t.MSG.SMALL_BLOCK_SIZE);return e.readUint8Array(o)}}},bat:{extractor:function(e,t,n,a){var i=r(t,n.startBlock);return e.seek(i),a(e,n)},dataType:{string:function(e,t){return e.readString(t.sizeBlock)},unicode:function(e,t){return e.readUCS2String(t.sizeBlock/2)},binary:function(e,t){return e.readUint8Array(t.sizeBlock)}}}};function g(e,n,a,o,s){for(var l=a*t.MSG.SMALL_BLOCK_SIZE,u=Math.floor(l/n.bigBlockSize),c=l%n.bigBlockSize,f=n.propertyData[0].startBlock,d=0;d<u;d++)f=i(e,n,f);return s(e,n,r(n,f),c,o)}function b(e,r,n,a){var i=null,o=n.sizeBlock<t.MSG.BIG_BLOCK_MIN_DOC_SIZE?y.sbat:y.bat,s=o.dataType[t.MSG.FIELD.TYPE_MAPPING[a]];return s&&(i=o.extractor(e,r,n,s)),i}var _=function(t){this.ds=new e(t,0,e.LITTLE_ENDIAN)};return _.prototype={getFileData:function(){return(e=this.ds).seek(0),function(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!=t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}(t.FILE_HEADER,e.readInt8Array(t.FILE_HEADER.length))?(null==this.fileData&&(this.fileData=s(this.ds)),this.fileData.fieldsData):{error:"Unsupported file type!"};var e},getAttachment:function(e){var t="number"==typeof e?this.fileData.fieldsData.attachments[e]:e,r=this.fileData.propertyData[t.dataId],n=b(this.ds,this.fileData,r,m(r));return{fileName:t.fileName,content:n}}},_})?n.apply(t,a):n)||(e.exports=i)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,